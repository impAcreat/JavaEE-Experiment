/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 16345.0, "series": [{"data": [[0.0, 5.0], [0.1, 5.0], [0.2, 5.0], [0.3, 6.0], [0.4, 6.0], [0.5, 6.0], [0.6, 6.0], [0.7, 6.0], [0.8, 6.0], [0.9, 6.0], [1.0, 6.0], [1.1, 6.0], [1.2, 6.0], [1.3, 6.0], [1.4, 6.0], [1.5, 6.0], [1.6, 6.0], [1.7, 6.0], [1.8, 6.0], [1.9, 6.0], [2.0, 6.0], [2.1, 6.0], [2.2, 6.0], [2.3, 6.0], [2.4, 6.0], [2.5, 6.0], [2.6, 6.0], [2.7, 7.0], [2.8, 7.0], [2.9, 7.0], [3.0, 7.0], [3.1, 7.0], [3.2, 7.0], [3.3, 7.0], [3.4, 7.0], [3.5, 7.0], [3.6, 7.0], [3.7, 7.0], [3.8, 7.0], [3.9, 7.0], [4.0, 7.0], [4.1, 7.0], [4.2, 7.0], [4.3, 7.0], [4.4, 7.0], [4.5, 7.0], [4.6, 7.0], [4.7, 7.0], [4.8, 7.0], [4.9, 7.0], [5.0, 7.0], [5.1, 7.0], [5.2, 7.0], [5.3, 7.0], [5.4, 7.0], [5.5, 7.0], [5.6, 7.0], [5.7, 7.0], [5.8, 7.0], [5.9, 7.0], [6.0, 7.0], [6.1, 7.0], [6.2, 7.0], [6.3, 7.0], [6.4, 7.0], [6.5, 7.0], [6.6, 7.0], [6.7, 7.0], [6.8, 7.0], [6.9, 7.0], [7.0, 7.0], [7.1, 7.0], [7.2, 7.0], [7.3, 7.0], [7.4, 7.0], [7.5, 7.0], [7.6, 7.0], [7.7, 7.0], [7.8, 7.0], [7.9, 7.0], [8.0, 7.0], [8.1, 7.0], [8.2, 7.0], [8.3, 8.0], [8.4, 8.0], [8.5, 8.0], [8.6, 8.0], [8.7, 8.0], [8.8, 8.0], [8.9, 8.0], [9.0, 8.0], [9.1, 8.0], [9.2, 8.0], [9.3, 8.0], [9.4, 8.0], [9.5, 8.0], [9.6, 8.0], [9.7, 8.0], [9.8, 8.0], [9.9, 8.0], [10.0, 8.0], [10.1, 8.0], [10.2, 8.0], [10.3, 8.0], [10.4, 8.0], [10.5, 8.0], [10.6, 8.0], [10.7, 8.0], [10.8, 8.0], [10.9, 8.0], [11.0, 8.0], [11.1, 8.0], [11.2, 8.0], [11.3, 8.0], [11.4, 8.0], [11.5, 8.0], [11.6, 8.0], [11.7, 8.0], [11.8, 8.0], [11.9, 8.0], [12.0, 8.0], [12.1, 8.0], [12.2, 8.0], [12.3, 8.0], [12.4, 8.0], [12.5, 8.0], [12.6, 8.0], [12.7, 8.0], [12.8, 8.0], [12.9, 8.0], [13.0, 8.0], [13.1, 8.0], [13.2, 8.0], [13.3, 8.0], [13.4, 8.0], [13.5, 8.0], [13.6, 8.0], [13.7, 8.0], [13.8, 8.0], [13.9, 8.0], [14.0, 8.0], [14.1, 8.0], [14.2, 8.0], [14.3, 8.0], [14.4, 8.0], [14.5, 8.0], [14.6, 8.0], [14.7, 9.0], [14.8, 9.0], [14.9, 9.0], [15.0, 9.0], [15.1, 9.0], [15.2, 9.0], [15.3, 9.0], [15.4, 9.0], [15.5, 9.0], [15.6, 9.0], [15.7, 9.0], [15.8, 9.0], [15.9, 9.0], [16.0, 9.0], [16.1, 9.0], [16.2, 9.0], [16.3, 9.0], [16.4, 9.0], [16.5, 9.0], [16.6, 9.0], [16.7, 9.0], [16.8, 9.0], [16.9, 9.0], [17.0, 9.0], [17.1, 9.0], [17.2, 9.0], [17.3, 9.0], [17.4, 9.0], [17.5, 9.0], [17.6, 9.0], [17.7, 9.0], [17.8, 9.0], [17.9, 9.0], [18.0, 9.0], [18.1, 9.0], [18.2, 9.0], [18.3, 9.0], [18.4, 9.0], [18.5, 9.0], [18.6, 9.0], [18.7, 9.0], [18.8, 9.0], [18.9, 9.0], [19.0, 10.0], [19.1, 10.0], [19.2, 10.0], [19.3, 10.0], [19.4, 10.0], [19.5, 10.0], [19.6, 10.0], [19.7, 10.0], [19.8, 10.0], [19.9, 10.0], [20.0, 10.0], [20.1, 10.0], [20.2, 10.0], [20.3, 10.0], [20.4, 10.0], [20.5, 10.0], [20.6, 10.0], [20.7, 10.0], [20.8, 10.0], [20.9, 10.0], [21.0, 10.0], [21.1, 10.0], [21.2, 10.0], [21.3, 10.0], [21.4, 10.0], [21.5, 10.0], [21.6, 10.0], [21.7, 11.0], [21.8, 11.0], [21.9, 11.0], [22.0, 11.0], [22.1, 11.0], [22.2, 11.0], [22.3, 11.0], [22.4, 11.0], [22.5, 11.0], [22.6, 11.0], [22.7, 11.0], [22.8, 11.0], [22.9, 11.0], [23.0, 11.0], [23.1, 11.0], [23.2, 11.0], [23.3, 11.0], [23.4, 12.0], [23.5, 12.0], [23.6, 12.0], [23.7, 12.0], [23.8, 12.0], [23.9, 12.0], [24.0, 12.0], [24.1, 12.0], [24.2, 12.0], [24.3, 12.0], [24.4, 13.0], [24.5, 13.0], [24.6, 13.0], [24.7, 13.0], [24.8, 13.0], [24.9, 13.0], [25.0, 13.0], [25.1, 14.0], [25.2, 14.0], [25.3, 14.0], [25.4, 14.0], [25.5, 14.0], [25.6, 14.0], [25.7, 15.0], [25.8, 15.0], [25.9, 15.0], [26.0, 15.0], [26.1, 15.0], [26.2, 16.0], [26.3, 16.0], [26.4, 16.0], [26.5, 16.0], [26.6, 17.0], [26.7, 17.0], [26.8, 18.0], [26.9, 18.0], [27.0, 18.0], [27.1, 19.0], [27.2, 19.0], [27.3, 20.0], [27.4, 22.0], [27.5, 22.0], [27.6, 24.0], [27.7, 25.0], [27.8, 27.0], [27.9, 28.0], [28.0, 28.0], [28.1, 29.0], [28.2, 31.0], [28.3, 33.0], [28.4, 34.0], [28.5, 36.0], [28.6, 38.0], [28.7, 40.0], [28.8, 42.0], [28.9, 43.0], [29.0, 46.0], [29.1, 48.0], [29.2, 51.0], [29.3, 53.0], [29.4, 54.0], [29.5, 58.0], [29.6, 64.0], [29.7, 67.0], [29.8, 69.0], [29.9, 71.0], [30.0, 76.0], [30.1, 80.0], [30.2, 84.0], [30.3, 87.0], [30.4, 92.0], [30.5, 97.0], [30.6, 101.0], [30.7, 103.0], [30.8, 107.0], [30.9, 110.0], [31.0, 113.0], [31.1, 116.0], [31.2, 124.0], [31.3, 138.0], [31.4, 140.0], [31.5, 151.0], [31.6, 165.0], [31.7, 177.0], [31.8, 182.0], [31.9, 189.0], [32.0, 212.0], [32.1, 225.0], [32.2, 231.0], [32.3, 272.0], [32.4, 291.0], [32.5, 310.0], [32.6, 344.0], [32.7, 358.0], [32.8, 375.0], [32.9, 391.0], [33.0, 404.0], [33.1, 436.0], [33.2, 453.0], [33.3, 486.0], [33.4, 513.0], [33.5, 545.0], [33.6, 565.0], [33.7, 595.0], [33.8, 597.0], [33.9, 630.0], [34.0, 634.0], [34.1, 652.0], [34.2, 685.0], [34.3, 720.0], [34.4, 739.0], [34.5, 761.0], [34.6, 780.0], [34.7, 792.0], [34.8, 829.0], [34.9, 867.0], [35.0, 875.0], [35.1, 891.0], [35.2, 925.0], [35.3, 948.0], [35.4, 962.0], [35.5, 992.0], [35.6, 1006.0], [35.7, 1023.0], [35.8, 1065.0], [35.9, 1083.0], [36.0, 1092.0], [36.1, 1122.0], [36.2, 1136.0], [36.3, 1151.0], [36.4, 1163.0], [36.5, 1187.0], [36.6, 1214.0], [36.7, 1264.0], [36.8, 1290.0], [36.9, 1328.0], [37.0, 1349.0], [37.1, 1377.0], [37.2, 1396.0], [37.3, 1413.0], [37.4, 1429.0], [37.5, 1439.0], [37.6, 1471.0], [37.7, 1483.0], [37.8, 1503.0], [37.9, 1515.0], [38.0, 1544.0], [38.1, 1576.0], [38.2, 1588.0], [38.3, 1601.0], [38.4, 1647.0], [38.5, 1658.0], [38.6, 1693.0], [38.7, 1703.0], [38.8, 1735.0], [38.9, 1752.0], [39.0, 1766.0], [39.1, 1816.0], [39.2, 1855.0], [39.3, 1877.0], [39.4, 1889.0], [39.5, 1900.0], [39.6, 1927.0], [39.7, 1949.0], [39.8, 1967.0], [39.9, 1976.0], [40.0, 2005.0], [40.1, 2024.0], [40.2, 2033.0], [40.3, 2040.0], [40.4, 2067.0], [40.5, 2081.0], [40.6, 2112.0], [40.7, 2130.0], [40.8, 2162.0], [40.9, 2181.0], [41.0, 2209.0], [41.1, 2235.0], [41.2, 2269.0], [41.3, 2310.0], [41.4, 2340.0], [41.5, 2356.0], [41.6, 2381.0], [41.7, 2414.0], [41.8, 2437.0], [41.9, 2457.0], [42.0, 2503.0], [42.1, 2522.0], [42.2, 2549.0], [42.3, 2578.0], [42.4, 2586.0], [42.5, 2603.0], [42.6, 2636.0], [42.7, 2661.0], [42.8, 2684.0], [42.9, 2688.0], [43.0, 2716.0], [43.1, 2730.0], [43.2, 2741.0], [43.3, 2761.0], [43.4, 2787.0], [43.5, 2815.0], [43.6, 2833.0], [43.7, 2847.0], [43.8, 2862.0], [43.9, 2876.0], [44.0, 2893.0], [44.1, 2932.0], [44.2, 2967.0], [44.3, 2975.0], [44.4, 2986.0], [44.5, 3027.0], [44.6, 3049.0], [44.7, 3069.0], [44.8, 3100.0], [44.9, 3119.0], [45.0, 3137.0], [45.1, 3150.0], [45.2, 3176.0], [45.3, 3206.0], [45.4, 3230.0], [45.5, 3261.0], [45.6, 3267.0], [45.7, 3287.0], [45.8, 3308.0], [45.9, 3345.0], [46.0, 3365.0], [46.1, 3378.0], [46.2, 3392.0], [46.3, 3415.0], [46.4, 3458.0], [46.5, 3468.0], [46.6, 3503.0], [46.7, 3552.0], [46.8, 3571.0], [46.9, 3595.0], [47.0, 3611.0], [47.1, 3654.0], [47.2, 3689.0], [47.3, 3706.0], [47.4, 3716.0], [47.5, 3750.0], [47.6, 3799.0], [47.7, 3821.0], [47.8, 3829.0], [47.9, 3842.0], [48.0, 3858.0], [48.1, 3868.0], [48.2, 3902.0], [48.3, 3908.0], [48.4, 3942.0], [48.5, 3953.0], [48.6, 3980.0], [48.7, 4016.0], [48.8, 4025.0], [48.9, 4056.0], [49.0, 4069.0], [49.1, 4074.0], [49.2, 4115.0], [49.3, 4135.0], [49.4, 4139.0], [49.5, 4154.0], [49.6, 4165.0], [49.7, 4186.0], [49.8, 4211.0], [49.9, 4223.0], [50.0, 4242.0], [50.1, 4254.0], [50.2, 4272.0], [50.3, 4285.0], [50.4, 4310.0], [50.5, 4329.0], [50.6, 4337.0], [50.7, 4353.0], [50.8, 4391.0], [50.9, 4395.0], [51.0, 4408.0], [51.1, 4413.0], [51.2, 4455.0], [51.3, 4472.0], [51.4, 4490.0], [51.5, 4506.0], [51.6, 4514.0], [51.7, 4533.0], [51.8, 4545.0], [51.9, 4553.0], [52.0, 4573.0], [52.1, 4593.0], [52.2, 4608.0], [52.3, 4615.0], [52.4, 4637.0], [52.5, 4673.0], [52.6, 4688.0], [52.7, 4701.0], [52.8, 4715.0], [52.9, 4767.0], [53.0, 4778.0], [53.1, 4784.0], [53.2, 4807.0], [53.3, 4822.0], [53.4, 4854.0], [53.5, 4874.0], [53.6, 4891.0], [53.7, 4910.0], [53.8, 4928.0], [53.9, 4943.0], [54.0, 4978.0], [54.1, 4996.0], [54.2, 5018.0], [54.3, 5041.0], [54.4, 5054.0], [54.5, 5076.0], [54.6, 5097.0], [54.7, 5102.0], [54.8, 5111.0], [54.9, 5128.0], [55.0, 5143.0], [55.1, 5154.0], [55.2, 5194.0], [55.3, 5212.0], [55.4, 5222.0], [55.5, 5235.0], [55.6, 5248.0], [55.7, 5263.0], [55.8, 5283.0], [55.9, 5304.0], [56.0, 5342.0], [56.1, 5360.0], [56.2, 5400.0], [56.3, 5419.0], [56.4, 5424.0], [56.5, 5433.0], [56.6, 5466.0], [56.7, 5480.0], [56.8, 5493.0], [56.9, 5498.0], [57.0, 5526.0], [57.1, 5528.0], [57.2, 5551.0], [57.3, 5559.0], [57.4, 5575.0], [57.5, 5601.0], [57.6, 5652.0], [57.7, 5663.0], [57.8, 5684.0], [57.9, 5707.0], [58.0, 5722.0], [58.1, 5738.0], [58.2, 5754.0], [58.3, 5761.0], [58.4, 5791.0], [58.5, 5811.0], [58.6, 5820.0], [58.7, 5833.0], [58.8, 5854.0], [58.9, 5872.0], [59.0, 5902.0], [59.1, 5919.0], [59.2, 5934.0], [59.3, 5960.0], [59.4, 5969.0], [59.5, 5985.0], [59.6, 6019.0], [59.7, 6023.0], [59.8, 6033.0], [59.9, 6043.0], [60.0, 6083.0], [60.1, 6101.0], [60.2, 6107.0], [60.3, 6121.0], [60.4, 6145.0], [60.5, 6151.0], [60.6, 6168.0], [60.7, 6190.0], [60.8, 6213.0], [60.9, 6222.0], [61.0, 6241.0], [61.1, 6255.0], [61.2, 6284.0], [61.3, 6311.0], [61.4, 6327.0], [61.5, 6344.0], [61.6, 6375.0], [61.7, 6385.0], [61.8, 6396.0], [61.9, 6419.0], [62.0, 6444.0], [62.1, 6451.0], [62.2, 6459.0], [62.3, 6478.0], [62.4, 6519.0], [62.5, 6526.0], [62.6, 6534.0], [62.7, 6548.0], [62.8, 6585.0], [62.9, 6607.0], [63.0, 6631.0], [63.1, 6647.0], [63.2, 6664.0], [63.3, 6673.0], [63.4, 6684.0], [63.5, 6709.0], [63.6, 6725.0], [63.7, 6737.0], [63.8, 6750.0], [63.9, 6760.0], [64.0, 6778.0], [64.1, 6792.0], [64.2, 6820.0], [64.3, 6837.0], [64.4, 6866.0], [64.5, 6904.0], [64.6, 6918.0], [64.7, 6923.0], [64.8, 6956.0], [64.9, 6969.0], [65.0, 6982.0], [65.1, 7005.0], [65.2, 7032.0], [65.3, 7045.0], [65.4, 7063.0], [65.5, 7075.0], [65.6, 7104.0], [65.7, 7135.0], [65.8, 7158.0], [65.9, 7180.0], [66.0, 7211.0], [66.1, 7238.0], [66.2, 7252.0], [66.3, 7258.0], [66.4, 7263.0], [66.5, 7288.0], [66.6, 7317.0], [66.7, 7323.0], [66.8, 7348.0], [66.9, 7361.0], [67.0, 7368.0], [67.1, 7381.0], [67.2, 7391.0], [67.3, 7421.0], [67.4, 7439.0], [67.5, 7446.0], [67.6, 7455.0], [67.7, 7479.0], [67.8, 7499.0], [67.9, 7506.0], [68.0, 7533.0], [68.1, 7543.0], [68.2, 7550.0], [68.3, 7566.0], [68.4, 7593.0], [68.5, 7617.0], [68.6, 7644.0], [68.7, 7655.0], [68.8, 7685.0], [68.9, 7697.0], [69.0, 7717.0], [69.1, 7738.0], [69.2, 7759.0], [69.3, 7799.0], [69.4, 7830.0], [69.5, 7842.0], [69.6, 7880.0], [69.7, 7899.0], [69.8, 7918.0], [69.9, 7921.0], [70.0, 7941.0], [70.1, 7966.0], [70.2, 7973.0], [70.3, 8022.0], [70.4, 8061.0], [70.5, 8070.0], [70.6, 8092.0], [70.7, 8113.0], [70.8, 8125.0], [70.9, 8140.0], [71.0, 8171.0], [71.1, 8189.0], [71.2, 8196.0], [71.3, 8207.0], [71.4, 8233.0], [71.5, 8244.0], [71.6, 8253.0], [71.7, 8293.0], [71.8, 8305.0], [71.9, 8316.0], [72.0, 8335.0], [72.1, 8354.0], [72.2, 8371.0], [72.3, 8391.0], [72.4, 8407.0], [72.5, 8418.0], [72.6, 8426.0], [72.7, 8448.0], [72.8, 8470.0], [72.9, 8483.0], [73.0, 8494.0], [73.1, 8515.0], [73.2, 8536.0], [73.3, 8554.0], [73.4, 8570.0], [73.5, 8595.0], [73.6, 8615.0], [73.7, 8636.0], [73.8, 8667.0], [73.9, 8678.0], [74.0, 8702.0], [74.1, 8717.0], [74.2, 8734.0], [74.3, 8742.0], [74.4, 8771.0], [74.5, 8784.0], [74.6, 8800.0], [74.7, 8817.0], [74.8, 8840.0], [74.9, 8865.0], [75.0, 8882.0], [75.1, 8893.0], [75.2, 8903.0], [75.3, 8914.0], [75.4, 8925.0], [75.5, 8945.0], [75.6, 8952.0], [75.7, 8973.0], [75.8, 8987.0], [75.9, 8992.0], [76.0, 9020.0], [76.1, 9037.0], [76.2, 9051.0], [76.3, 9062.0], [76.4, 9077.0], [76.5, 9090.0], [76.6, 9112.0], [76.7, 9127.0], [76.8, 9131.0], [76.9, 9135.0], [77.0, 9151.0], [77.1, 9159.0], [77.2, 9204.0], [77.3, 9217.0], [77.4, 9254.0], [77.5, 9271.0], [77.6, 9285.0], [77.7, 9305.0], [77.8, 9331.0], [77.9, 9360.0], [78.0, 9380.0], [78.1, 9404.0], [78.2, 9407.0], [78.3, 9419.0], [78.4, 9446.0], [78.5, 9456.0], [78.6, 9465.0], [78.7, 9508.0], [78.8, 9528.0], [78.9, 9552.0], [79.0, 9586.0], [79.1, 9597.0], [79.2, 9619.0], [79.3, 9632.0], [79.4, 9642.0], [79.5, 9653.0], [79.6, 9664.0], [79.7, 9694.0], [79.8, 9716.0], [79.9, 9731.0], [80.0, 9747.0], [80.1, 9779.0], [80.2, 9793.0], [80.3, 9821.0], [80.4, 9837.0], [80.5, 9861.0], [80.6, 9876.0], [80.7, 9908.0], [80.8, 9937.0], [80.9, 9947.0], [81.0, 9960.0], [81.1, 9985.0], [81.2, 10002.0], [81.3, 10024.0], [81.4, 10039.0], [81.5, 10047.0], [81.6, 10068.0], [81.7, 10098.0], [81.8, 10122.0], [81.9, 10138.0], [82.0, 10151.0], [82.1, 10161.0], [82.2, 10175.0], [82.3, 10198.0], [82.4, 10221.0], [82.5, 10233.0], [82.6, 10266.0], [82.7, 10282.0], [82.8, 10300.0], [82.9, 10321.0], [83.0, 10332.0], [83.1, 10346.0], [83.2, 10371.0], [83.3, 10376.0], [83.4, 10395.0], [83.5, 10419.0], [83.6, 10449.0], [83.7, 10470.0], [83.8, 10486.0], [83.9, 10501.0], [84.0, 10523.0], [84.1, 10542.0], [84.2, 10548.0], [84.3, 10556.0], [84.4, 10574.0], [84.5, 10618.0], [84.6, 10643.0], [84.7, 10659.0], [84.8, 10675.0], [84.9, 10690.0], [85.0, 10711.0], [85.1, 10725.0], [85.2, 10738.0], [85.3, 10766.0], [85.4, 10779.0], [85.5, 10804.0], [85.6, 10809.0], [85.7, 10824.0], [85.8, 10846.0], [85.9, 10865.0], [86.0, 10881.0], [86.1, 10911.0], [86.2, 10926.0], [86.3, 10942.0], [86.4, 10969.0], [86.5, 10973.0], [86.6, 10995.0], [86.7, 11017.0], [86.8, 11035.0], [86.9, 11053.0], [87.0, 11073.0], [87.1, 11095.0], [87.2, 11120.0], [87.3, 11139.0], [87.4, 11154.0], [87.5, 11166.0], [87.6, 11198.0], [87.7, 11233.0], [87.8, 11246.0], [87.9, 11266.0], [88.0, 11277.0], [88.1, 11313.0], [88.2, 11321.0], [88.3, 11336.0], [88.4, 11346.0], [88.5, 11376.0], [88.6, 11388.0], [88.7, 11404.0], [88.8, 11412.0], [88.9, 11431.0], [89.0, 11445.0], [89.1, 11453.0], [89.2, 11464.0], [89.3, 11481.0], [89.4, 11497.0], [89.5, 11518.0], [89.6, 11536.0], [89.7, 11555.0], [89.8, 11575.0], [89.9, 11604.0], [90.0, 11623.0], [90.1, 11650.0], [90.2, 11674.0], [90.3, 11681.0], [90.4, 11695.0], [90.5, 11716.0], [90.6, 11723.0], [90.7, 11738.0], [90.8, 11773.0], [90.9, 11793.0], [91.0, 11818.0], [91.1, 11833.0], [91.2, 11853.0], [91.3, 11869.0], [91.4, 11921.0], [91.5, 11942.0], [91.6, 11965.0], [91.7, 11990.0], [91.8, 12008.0], [91.9, 12042.0], [92.0, 12071.0], [92.1, 12117.0], [92.2, 12130.0], [92.3, 12137.0], [92.4, 12151.0], [92.5, 12169.0], [92.6, 12191.0], [92.7, 12210.0], [92.8, 12227.0], [92.9, 12259.0], [93.0, 12276.0], [93.1, 12296.0], [93.2, 12312.0], [93.3, 12346.0], [93.4, 12360.0], [93.5, 12380.0], [93.6, 12400.0], [93.7, 12412.0], [93.8, 12436.0], [93.9, 12452.0], [94.0, 12474.0], [94.1, 12486.0], [94.2, 12492.0], [94.3, 12527.0], [94.4, 12543.0], [94.5, 12568.0], [94.6, 12615.0], [94.7, 12629.0], [94.8, 12666.0], [94.9, 12680.0], [95.0, 12694.0], [95.1, 12702.0], [95.2, 12731.0], [95.3, 12782.0], [95.4, 12804.0], [95.5, 12818.0], [95.6, 12852.0], [95.7, 12901.0], [95.8, 12908.0], [95.9, 12927.0], [96.0, 12944.0], [96.1, 12972.0], [96.2, 13002.0], [96.3, 13010.0], [96.4, 13046.0], [96.5, 13079.0], [96.6, 13105.0], [96.7, 13126.0], [96.8, 13143.0], [96.9, 13158.0], [97.0, 13174.0], [97.1, 13186.0], [97.2, 13198.0], [97.3, 13234.0], [97.4, 13261.0], [97.5, 13277.0], [97.6, 13282.0], [97.7, 13318.0], [97.8, 13333.0], [97.9, 13349.0], [98.0, 13371.0], [98.1, 13384.0], [98.2, 13419.0], [98.3, 13446.0], [98.4, 13473.0], [98.5, 13502.0], [98.6, 13520.0], [98.7, 13555.0], [98.8, 13574.0], [98.9, 13655.0], [99.0, 13685.0], [99.1, 13736.0], [99.2, 13767.0], [99.3, 13875.0], [99.4, 13913.0], [99.5, 14033.0], [99.6, 14200.0], [99.7, 14361.0], [99.8, 14554.0], [99.9, 14958.0], [100.0, 16345.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1298.0, "series": [{"data": [[0.0, 1298.0], [100.0, 58.0], [200.0, 24.0], [300.0, 22.0], [400.0, 17.0], [500.0, 19.0], [600.0, 17.0], [700.0, 20.0], [800.0, 17.0], [900.0, 19.0], [1000.0, 20.0], [1100.0, 21.0], [1200.0, 13.0], [1300.0, 17.0], [1400.0, 24.0], [1500.0, 21.0], [1600.0, 16.0], [1700.0, 17.0], [1800.0, 18.0], [1900.0, 21.0], [2000.0, 26.0], [2100.0, 14.0], [2200.0, 15.0], [2300.0, 16.0], [2400.0, 15.0], [2500.0, 20.0], [2600.0, 20.0], [2700.0, 20.0], [2800.0, 27.0], [2900.0, 19.0], [3000.0, 13.0], [3100.0, 21.0], [3200.0, 20.0], [3300.0, 22.0], [3400.0, 12.0], [3500.0, 15.0], [3600.0, 15.0], [3700.0, 15.0], [3800.0, 24.0], [3900.0, 20.0], [4000.0, 21.0], [4200.0, 23.0], [4300.0, 26.0], [4100.0, 26.0], [4400.0, 23.0], [4500.0, 29.0], [4600.0, 23.0], [4700.0, 22.0], [4800.0, 19.0], [5000.0, 24.0], [5100.0, 24.0], [4900.0, 20.0], [5200.0, 25.0], [5300.0, 15.0], [5400.0, 31.0], [5500.0, 24.0], [5600.0, 14.0], [5700.0, 26.0], [5800.0, 23.0], [6100.0, 29.0], [5900.0, 23.0], [6000.0, 25.0], [6300.0, 25.0], [6200.0, 21.0], [6400.0, 23.0], [6600.0, 26.0], [6500.0, 20.0], [6800.0, 15.0], [6900.0, 24.0], [6700.0, 28.0], [7000.0, 22.0], [7100.0, 17.0], [7400.0, 23.0], [7200.0, 25.0], [7300.0, 30.0], [7500.0, 25.0], [7600.0, 23.0], [7700.0, 16.0], [7900.0, 23.0], [7800.0, 17.0], [8000.0, 15.0], [8100.0, 26.0], [8200.0, 23.0], [8300.0, 24.0], [8400.0, 29.0], [8500.0, 21.0], [8700.0, 28.0], [8600.0, 18.0], [9200.0, 20.0], [9000.0, 27.0], [9100.0, 26.0], [8800.0, 23.0], [8900.0, 34.0], [9500.0, 21.0], [9600.0, 26.0], [9400.0, 23.0], [9300.0, 19.0], [9700.0, 20.0], [9800.0, 19.0], [9900.0, 22.0], [10100.0, 24.0], [10200.0, 20.0], [10000.0, 24.0], [10400.0, 20.0], [10300.0, 27.0], [10700.0, 23.0], [10600.0, 21.0], [10500.0, 23.0], [10800.0, 26.0], [10900.0, 23.0], [11000.0, 22.0], [11200.0, 17.0], [11100.0, 20.0], [11300.0, 29.0], [11400.0, 33.0], [11600.0, 24.0], [11500.0, 17.0], [11700.0, 21.0], [12000.0, 13.0], [12100.0, 24.0], [11800.0, 18.0], [12200.0, 20.0], [11900.0, 18.0], [12500.0, 14.0], [12300.0, 20.0], [12600.0, 21.0], [12400.0, 28.0], [12700.0, 12.0], [13200.0, 18.0], [12800.0, 15.0], [13100.0, 28.0], [13300.0, 23.0], [12900.0, 20.0], [13000.0, 16.0], [13400.0, 14.0], [13500.0, 15.0], [13700.0, 9.0], [13800.0, 6.0], [13600.0, 7.0], [14100.0, 2.0], [14300.0, 3.0], [14000.0, 3.0], [13900.0, 4.0], [14200.0, 4.0], [14600.0, 1.0], [14400.0, 1.0], [14800.0, 1.0], [14700.0, 1.0], [14500.0, 2.0], [15000.0, 1.0], [14900.0, 2.0], [15100.0, 1.0], [16300.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 16300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 187.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2644.0, "series": [{"data": [[0.0, 1419.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 187.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2644.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.930817610062894, "minX": 1.699971996E12, "maxY": 2023.5975609756088, "series": [{"data": [[1.699972014E12, 603.103225806452], [1.699972015E12, 449.62500000000017], [1.699972016E12, 295.60256410256426], [1.699972011E12, 1074.1006289308173], [1.699972012E12, 916.608974358975], [1.699972013E12, 759.5759493670885], [1.699971998E12, 8.541666666666673], [1.699971999E12, 188.98461538461538], [1.699972E12, 580.1756756756755], [1.699971996E12, 8.125748502994007], [1.699972017E12, 109.23041474654376], [1.699971997E12, 6.930817610062894], [1.699972003E12, 1651.0408163265306], [1.699972004E12, 2004.5069444444453], [1.699972005E12, 2023.5975609756088], [1.699972001E12, 927.2888888888888], [1.699972002E12, 1254.7045454545453], [1.699972009E12, 1393.589743589744], [1.69997201E12, 1234.5802469135801], [1.699972006E12, 1860.0552147239266], [1.699972007E12, 1699.044025157233], [1.699972008E12, 1545.587837837838]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.699972017E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.0, "maxY": 15084.0, "series": [{"data": [[2.0, 629.8604651162791], [3.0, 8.126050420168065], [4.0, 173.02439024390245], [5.0, 9.654411764705882], [6.0, 170.92528735632183], [7.0, 92.82716049382717], [8.0, 124.66949152542372], [9.0, 225.48684210526318], [10.0, 293.29787234042556], [11.0, 548.4444444444445], [12.0, 20.52631578947368], [13.0, 1218.7391304347825], [14.0, 752.3684210526316], [15.0, 11.733333333333334], [16.0, 979.3571428571429], [17.0, 1663.2777777777778], [18.0, 25.333333333333336], [19.0, 3962.142857142857], [20.0, 30.142857142857142], [21.0, 2720.0], [22.0, 13.333333333333334], [23.0, 3921.285714285714], [24.0, 1504.7777777777778], [25.0, 2219.166666666667], [26.0, 1054.076923076923], [27.0, 1179.3333333333335], [28.0, 3414.0], [29.0, 2312.5], [30.0, 40.875], [31.0, 8973.0], [33.0, 4465.0], [32.0, 3351.25], [34.0, 4585.333333333333], [35.0, 6660.5], [37.0, 1548.888888888889], [36.0, 4476.333333333333], [38.0, 13211.0], [40.0, 13340.0], [42.0, 6800.5], [45.0, 13369.0], [44.0, 13351.5], [46.0, 13528.0], [48.0, 13849.0], [50.0, 13261.5], [53.0, 13637.0], [52.0, 13392.666666666666], [54.0, 13231.0], [56.0, 8929.0], [57.0, 13482.0], [59.0, 8919.666666666666], [58.0, 85.0], [61.0, 13158.0], [60.0, 12959.0], [63.0, 14327.0], [62.0, 13520.0], [65.0, 6557.0], [67.0, 13474.5], [64.0, 13073.0], [70.0, 6924.0], [71.0, 14033.0], [69.0, 13736.0], [68.0, 13543.0], [72.0, 3534.75], [74.0, 45.5], [73.0, 6866.0], [75.0, 13527.0], [77.0, 6567.0], [78.0, 13516.0], [76.0, 12917.0], [83.0, 6555.5], [82.0, 13702.0], [81.0, 13106.0], [80.0, 13959.0], [84.0, 2853.2], [86.0, 6595.0], [85.0, 85.33333333333333], [87.0, 12927.0], [88.0, 7449.5], [89.0, 6681.0], [95.0, 13147.0], [94.0, 12860.0], [93.0, 14282.0], [92.0, 13288.666666666666], [99.0, 13194.0], [97.0, 14008.0], [96.0, 13020.0], [103.0, 6920.5], [102.0, 12875.0], [101.0, 13150.0], [100.0, 13143.0], [104.0, 3330.25], [107.0, 13234.0], [106.0, 13235.0], [105.0, 12806.0], [110.0, 6641.0], [111.0, 13588.0], [109.0, 13885.0], [108.0, 13159.0], [113.0, 13318.0], [112.0, 13277.0], [116.0, 10044.5], [117.0, 6619.5], [119.0, 12921.0], [118.0, 13114.0], [122.0, 6867.5], [123.0, 4496.666666666667], [120.0, 12926.0], [124.0, 3418.25], [127.0, 5054.0], [126.0, 6460.5], [125.0, 13278.0], [129.0, 8897.333333333334], [132.0, 6728.5], [135.0, 12804.0], [134.0, 13017.0], [133.0, 13758.0], [131.0, 12908.0], [130.0, 13318.0], [136.0, 6556.5], [139.0, 2682.8], [138.0, 4333.666666666667], [140.0, 2274.0], [143.0, 14817.0], [142.0, 12676.0], [137.0, 13062.0], [144.0, 105.0], [151.0, 13316.0], [150.0, 12902.0], [149.0, 13186.0], [148.0, 12972.0], [147.0, 13178.0], [146.0, 12970.0], [145.0, 13131.0], [157.0, 2223.3333333333335], [155.0, 7086.5], [158.0, 110.0], [156.0, 14458.0], [154.0, 12782.0], [153.0, 13076.0], [152.0, 13277.0], [161.0, 234.5], [167.0, 12550.0], [166.0, 13479.0], [165.0, 12762.5], [163.0, 12744.0], [162.0, 13072.0], [160.0, 12621.333333333334], [175.0, 12486.0], [174.0, 13395.0], [173.0, 12825.0], [172.0, 13008.0], [171.0, 13224.0], [170.0, 13008.0], [169.0, 12579.0], [168.0, 13343.0], [182.0, 148.0], [181.0, 157.5], [183.0, 7720.6], [180.0, 13280.0], [179.0, 12647.0], [178.0, 12666.0], [177.0, 12967.0], [176.0, 15084.0], [184.0, 4283.0], [191.0, 12276.0], [190.0, 12397.0], [189.0, 12491.0], [187.0, 12731.0], [186.0, 12412.0], [185.0, 12676.0], [199.0, 12480.0], [198.0, 12818.0], [197.0, 13004.0], [196.0, 12958.5], [194.0, 13020.5], [192.0, 12313.0], [207.0, 13762.0], [206.0, 12925.5], [204.0, 12268.0], [203.0, 12452.0], [202.0, 12314.0], [201.0, 12497.0], [200.0, 13371.0], [211.0, 4176.333333333334], [213.0, 325.25], [214.0, 8344.333333333334], [215.0, 12360.0], [212.0, 12380.0], [210.0, 12262.0], [209.0, 12559.0], [208.0, 12481.0], [218.0, 6185.5], [221.0, 4394.333333333334], [222.0, 6259.5], [223.0, 12160.0], [220.0, 12400.0], [219.0, 12210.0], [217.0, 12455.0], [216.0, 12215.0], [231.0, 12312.0], [230.0, 12675.0], [229.0, 12474.0], [228.0, 12291.5], [226.0, 12133.0], [225.0, 12303.0], [224.0, 12301.0], [238.0, 4137.666666666666], [239.0, 4575.666666666667], [237.0, 13429.0], [236.0, 12346.0], [235.0, 12135.5], [233.0, 12311.5], [240.0, 153.0], [241.0, 6352.25], [242.0, 6404.5], [243.0, 3324.5], [245.0, 4843.666666666667], [247.0, 12292.0], [246.0, 12436.0], [244.0, 12050.0], [248.0, 432.0], [255.0, 13513.5], [253.0, 12079.0], [252.0, 12153.0], [251.0, 12169.0], [250.0, 12465.0], [249.0, 12937.0], [270.0, 6431.0], [262.0, 6088.0], [261.0, 12242.0], [260.0, 11994.0], [269.0, 2732.8], [268.0, 6096.0], [271.0, 12346.0], [267.0, 12760.0], [266.0, 12129.0], [265.0, 12577.0], [263.0, 12486.0], [257.0, 12008.0], [256.0, 12356.0], [259.0, 11999.0], [258.0, 11990.0], [285.0, 6075.0], [273.0, 6713.0], [274.0, 12688.0], [272.0, 6290.0], [276.0, 4226.0], [277.0, 12696.0], [279.0, 12259.0], [278.0, 11940.0], [281.0, 6144.5], [282.0, 295.0], [283.0, 12457.5], [287.0, 11853.0], [280.0, 11914.0], [286.0, 12416.0], [284.0, 11977.0], [275.0, 12208.0], [290.0, 8440.333333333334], [293.0, 6216.0], [292.0, 4505.333333333333], [294.0, 6937.0], [295.0, 12744.0], [288.0, 13473.0], [301.0, 6314.0], [300.0, 6027.5], [291.0, 11850.0], [303.0, 6208.5], [302.0, 6482.0], [299.0, 12157.0], [297.0, 12139.0], [296.0, 11942.0], [317.0, 6032.5], [310.0, 6132.0], [313.0, 6540.0], [316.0, 4330.666666666666], [306.0, 11818.0], [305.0, 11771.0], [304.0, 12333.0], [315.0, 8150.333333333333], [319.0, 4195.166666666666], [312.0, 11834.0], [311.0, 11921.0], [309.0, 12956.0], [308.0, 12023.0], [334.0, 12092.0], [320.0, 4985.333333333333], [327.0, 12067.0], [326.0, 11695.0], [325.0, 12357.0], [324.0, 12583.0], [321.0, 6062.5], [335.0, 12020.0], [333.0, 12525.0], [332.0, 11697.0], [323.0, 12621.0], [322.0, 11965.0], [331.0, 11980.0], [330.0, 12204.0], [329.0, 12717.5], [349.0, 6035.0], [339.0, 6447.5], [341.0, 6717.5], [340.0, 12130.0], [343.0, 12130.0], [336.0, 11777.0], [338.0, 12142.0], [337.0, 13373.0], [342.0, 12462.0], [345.0, 4250.666666666666], [346.0, 6707.0], [350.0, 539.5], [348.0, 4071.3333333333335], [351.0, 11629.5], [344.0, 12852.0], [347.0, 13545.0], [366.0, 12443.0], [352.0, 6069.0], [353.0, 11970.0], [355.0, 11911.0], [354.0, 11615.0], [359.0, 11732.0], [358.0, 12686.0], [357.0, 12179.0], [356.0, 12811.0], [367.0, 11674.0], [365.0, 11809.0], [364.0, 11575.0], [363.0, 11579.0], [362.0, 12400.0], [361.0, 14361.0], [360.0, 12402.0], [380.0, 5990.0], [369.0, 4641.0], [370.0, 610.5], [371.0, 12292.5], [372.0, 5948.0], [373.0, 11713.0], [375.0, 11650.0], [368.0, 11822.0], [374.0, 12437.0], [382.0, 2816.8], [381.0, 6008.0], [383.0, 530.0], [376.0, 11499.0], [379.0, 11649.0], [377.0, 11525.0], [397.0, 11695.0], [385.0, 6199.0], [384.0, 11538.0], [388.0, 8798.666666666666], [390.0, 11474.0], [389.0, 11674.0], [391.0, 6184.5], [395.0, 6088.0], [399.0, 11510.0], [398.0, 11864.0], [396.0, 11695.0], [386.0, 13357.0], [394.0, 11487.0], [393.0, 11455.5], [414.0, 5989.5], [403.0, 6084.0], [402.0, 11407.0], [401.0, 11391.0], [400.0, 11716.0], [407.0, 11445.0], [406.0, 11643.0], [404.0, 11411.0], [415.0, 6093.0], [413.0, 12378.0], [412.0, 12536.0], [411.0, 11314.0], [410.0, 12142.0], [409.0, 11388.0], [408.0, 11717.0], [429.0, 826.0], [417.0, 5879.0], [416.0, 11321.0], [418.0, 11412.0], [428.0, 11379.0], [419.0, 11326.0], [420.0, 5987.0], [422.0, 11960.0], [421.0, 11808.0], [423.0, 954.0], [425.0, 564.5], [426.0, 9347.2], [427.0, 3329.25], [431.0, 12151.0], [430.0, 11544.5], [447.0, 11233.0], [441.0, 6228.5], [445.0, 6096.5], [446.0, 11233.0], [444.0, 12543.0], [435.0, 11449.0], [434.0, 11605.5], [432.0, 11632.0], [443.0, 11230.0], [442.0, 11270.0], [440.0, 11537.0], [439.0, 11681.0], [438.0, 11680.0], [437.0, 12694.0], [436.0, 11450.0], [462.0, 5875.5], [452.0, 3433.75], [454.0, 12227.0], [453.0, 11325.0], [455.0, 5987.0], [458.0, 5834.5], [461.0, 3002.8], [463.0, 12000.0], [460.0, 11155.5], [451.0, 13158.0], [450.0, 11747.0], [449.0, 12360.0], [448.0, 12296.0], [457.0, 12507.0], [456.0, 11235.0], [478.0, 11015.0], [464.0, 4271.0], [467.0, 11839.5], [465.0, 11498.0], [479.0, 11096.0], [477.0, 11083.0], [476.0, 11342.0], [475.0, 11379.0], [474.0, 11474.0], [473.0, 11599.0], [471.0, 14170.0], [470.0, 11094.0], [469.0, 11527.5], [493.0, 6006.0], [485.0, 6056.0], [484.0, 11724.0], [486.0, 10973.0], [487.0, 5846.0], [491.0, 3583.25], [489.0, 5932.0], [488.0, 4373.333333333334], [490.0, 4240.333333333334], [492.0, 6077.0], [483.0, 11239.0], [482.0, 11705.0], [481.0, 11227.0], [480.0, 11109.0], [495.0, 11993.5], [510.0, 11270.0], [511.0, 11444.0], [509.0, 10911.0], [508.0, 10919.0], [507.0, 10896.0], [506.0, 11049.0], [505.0, 11071.0], [504.0, 11852.0], [503.0, 10952.0], [497.0, 12191.0], [496.0, 11336.0], [499.0, 11035.0], [498.0, 11536.0], [502.0, 11034.0], [501.0, 10935.0], [500.0, 11017.0], [540.0, 6063.0], [516.0, 4369.0], [518.0, 4322.0], [520.0, 5908.0], [522.0, 10884.5], [526.0, 10942.0], [514.0, 11463.0], [512.0, 11128.0], [524.0, 10954.0], [528.0, 6073.5], [538.0, 6042.0], [542.0, 10809.0], [536.0, 11723.0], [534.0, 11256.0], [532.0, 11671.333333333334], [570.0, 6048.0], [564.0, 820.5], [568.0, 4336.0], [548.0, 11067.0], [546.0, 10747.0], [544.0, 11154.0], [574.0, 6530.0], [572.0, 10602.0], [562.0, 10698.5], [560.0, 10970.0], [558.0, 11259.0], [556.0, 11246.0], [554.0, 10761.0], [552.0, 11346.0], [604.0, 11860.0], [580.0, 5926.5], [578.0, 7778.333333333333], [576.0, 10621.0], [582.0, 6129.0], [602.0, 10618.0], [600.0, 10491.0], [606.0, 11472.0], [586.0, 5922.5], [584.0, 10970.0], [588.0, 10530.0], [592.0, 5722.5], [590.0, 5814.5], [594.0, 3097.2], [598.0, 10969.0], [596.0, 10569.0], [638.0, 10456.0], [608.0, 5791.5], [610.0, 10682.0], [614.0, 10814.0], [612.0, 11391.0], [628.0, 7255.0], [636.0, 11248.0], [634.0, 10406.0], [630.0, 10385.0], [626.0, 10376.0], [624.0, 10371.0], [622.0, 11139.0], [620.0, 10534.0], [618.0, 10439.0], [670.0, 10545.0], [644.0, 5974.0], [640.0, 4246.0], [642.0, 10789.0], [654.0, 10884.0], [652.0, 10294.0], [650.0, 11376.0], [648.0, 11497.0], [664.0, 4132.666666666666], [646.0, 10681.0], [662.0, 5695.0], [668.0, 10296.0], [666.0, 10542.0], [660.0, 10553.0], [658.0, 10711.0], [656.0, 10725.0], [698.0, 11021.0], [672.0, 5755.0], [680.0, 4335.333333333334], [684.0, 10092.0], [682.0, 10995.0], [692.0, 2889.0], [696.0, 4109.75], [676.0, 10231.0], [674.0, 10561.0], [702.0, 10037.0], [700.0, 10194.0], [694.0, 10148.0], [688.0, 10231.0], [718.0, 10097.0], [708.0, 5598.0], [706.0, 10563.0], [704.0, 12071.0], [710.0, 10138.0], [712.0, 4372.666666666666], [714.0, 4143.666666666666], [716.0, 10634.0], [726.0, 4974.0], [724.0, 10957.0], [722.0, 11628.0], [720.0, 10233.0], [734.0, 9861.0], [732.0, 10346.0], [730.0, 9937.0], [728.0, 9947.0], [738.0, 3442.25], [764.0, 10470.0], [740.0, 9873.0], [742.0, 9861.0], [746.0, 10357.5], [744.0, 10039.0], [748.0, 4633.0], [750.0, 9787.0], [736.0, 9985.0], [752.0, 10044.5], [754.0, 10021.0], [756.0, 10317.0], [758.0, 10146.0], [766.0, 9849.0], [762.0, 9729.0], [770.0, 4333.666666666666], [772.0, 6111.0], [768.0, 6107.0], [774.0, 4376.666666666666], [792.0, 10122.0], [794.0, 9942.0], [776.0, 10402.0], [778.0, 10506.0], [780.0, 9675.0], [782.0, 9759.0], [796.0, 5731.0], [784.0, 10009.0], [786.0, 9712.0], [788.0, 10222.0], [790.0, 10354.0], [798.0, 10034.0], [800.0, 10099.0], [804.0, 3504.5], [828.0, 10014.0], [802.0, 10100.0], [814.0, 10205.0], [812.0, 10706.0], [810.0, 9938.0], [808.0, 9618.0], [806.0, 6150.0], [824.0, 9575.0], [818.0, 9654.0], [820.0, 10469.0], [822.0, 9785.0], [830.0, 9518.0], [826.0, 9597.0], [838.0, 5443.0], [856.0, 6736.0], [844.0, 9725.5], [842.0, 10395.0], [834.0, 9854.0], [836.0, 10523.0], [846.0, 9459.0], [850.0, 6189.0], [848.0, 9937.0], [862.0, 10734.0], [860.0, 9360.0], [858.0, 9419.0], [854.0, 9512.0], [878.0, 4675.0], [870.0, 5718.5], [888.0, 9732.0], [876.0, 9467.5], [874.0, 9280.0], [872.0, 9390.0], [864.0, 10133.0], [866.0, 9331.0], [868.0, 9580.0], [886.0, 5831.5], [892.0, 4199.666666666666], [890.0, 10168.0], [894.0, 3167.6], [884.0, 9217.0], [882.0, 9204.0], [880.0, 11438.0], [898.0, 9127.0], [904.0, 1438.0], [906.0, 5279.0], [896.0, 9404.0], [900.0, 9141.5], [902.0, 9305.0], [910.0, 9145.0], [926.0, 5406.0], [916.0, 9099.0], [914.0, 9413.0], [912.0, 9648.0], [922.0, 9037.0], [920.0, 9343.0], [930.0, 5431.0], [932.0, 3408.75], [928.0, 9021.0], [942.0, 9960.0], [940.0, 8993.0], [938.0, 9441.0], [936.0, 8982.0], [948.0, 10221.0], [950.0, 8990.0], [946.0, 6812.666666666667], [956.0, 1966.5], [958.0, 8903.0], [944.0, 9254.0], [952.0, 9133.0], [934.0, 9130.0], [974.0, 4288.666666666666], [986.0, 4167.666666666666], [966.0, 5240.0], [964.0, 8857.0], [984.0, 9008.0], [968.0, 4341.666666666666], [970.0, 9309.0], [972.0, 9690.0], [962.0, 9528.0], [960.0, 9285.5], [978.0, 5775.0], [976.0, 5510.0], [990.0, 8808.0], [988.0, 9215.0], [982.0, 8836.5], [980.0, 8800.0], [994.0, 8960.0], [1018.0, 5884.5], [996.0, 6985.666666666667], [998.0, 8752.0], [1016.0, 8774.0], [1000.0, 5235.5], [1002.0, 8966.5], [1004.0, 9037.0], [992.0, 9151.0], [1006.0, 10134.0], [1010.0, 8717.0], [1008.0, 8923.0], [1012.0, 9320.5], [1020.0, 5288.5], [1022.0, 8667.0], [1032.0, 9021.0], [1024.0, 5689.0], [1052.0, 8895.0], [1028.0, 5720.5], [1036.0, 5195.0], [1060.0, 8488.0], [1056.0, 8483.0], [1064.0, 8441.0], [1068.0, 9262.0], [1076.0, 8551.0], [1080.0, 9062.0], [1084.0, 8676.0], [1048.0, 6507.0], [1044.0, 8975.0], [1040.0, 8867.0], [1092.0, 9506.0], [1136.0, 8719.5], [1144.0, 5355.5], [1096.0, 5534.5], [1088.0, 8575.5], [1100.0, 8740.0], [1140.0, 2273.3333333333335], [1120.0, 8337.0], [1108.0, 9449.0], [1104.0, 8452.0], [1112.0, 5828.0], [1128.0, 5087.0], [1132.0, 8358.0], [1124.0, 5192.0], [1160.0, 5339.5], [1156.0, 5663.0], [1152.0, 3596.0], [1180.0, 9407.0], [1164.0, 8068.0], [1200.0, 9465.0], [1212.0, 2067.0], [1184.0, 8480.0], [1204.0, 5261.5], [1208.0, 8207.0], [1188.0, 6007.5], [1192.0, 4236.0], [1196.0, 8421.0], [1172.0, 6339.0], [1168.0, 8865.0], [1176.0, 7941.0], [1268.0, 8696.0], [1224.0, 5705.0], [1220.0, 7849.0], [1216.0, 8587.0], [1272.0, 5088.5], [1264.0, 7685.0], [1228.0, 9114.0], [1248.0, 8007.5], [1252.0, 7804.5], [1276.0, 7546.0], [1232.0, 7784.0], [1236.0, 4919.5], [1244.0, 7697.0], [1240.0, 8470.0], [1256.0, 7648.0], [1292.0, 8784.0], [1280.0, 5401.5], [1284.0, 7506.0], [1288.0, 7817.0], [1312.0, 6223.666666666667], [1340.0, 7690.0], [1336.0, 8702.0], [1332.0, 7646.0], [1328.0, 7861.5], [1316.0, 4945.0], [1320.0, 5507.5], [1324.0, 5368.0], [1308.0, 5049.5], [1304.0, 7464.0], [1300.0, 7480.0], [1296.0, 8252.0], [1356.0, 6018.333333333333], [1348.0, 5119.0], [1344.0, 5434.5], [1372.0, 7966.5], [1368.0, 5012.5], [1392.0, 8235.0], [1396.0, 7033.0], [1400.0, 8570.0], [1404.0, 7072.0], [1376.0, 4998.0], [1380.0, 9694.0], [1384.0, 4012.0], [1388.0, 8209.5], [1360.0, 7260.0], [1364.0, 4868.5], [1412.0, 7308.0], [1456.0, 6889.0], [1464.0, 2737.0], [1460.0, 4275.0], [1468.0, 6745.0], [1408.0, 7069.0], [1416.0, 7918.0], [1420.0, 7365.0], [1436.0, 7160.0], [1432.0, 8129.0], [1428.0, 6925.0], [1424.0, 7365.0], [1452.0, 7053.0], [1448.0, 7361.0], [1444.0, 6970.0], [1440.0, 7958.0], [1472.0, 7395.0], [1504.0, 7368.0], [1508.0, 4267.0], [1512.0, 7113.0], [1492.0, 4632.5], [1488.0, 7252.0], [1496.0, 6806.0], [1476.0, 7160.0], [1500.0, 6647.0], [1532.0, 6383.0], [1528.0, 6748.5], [1524.0, 6448.0], [1520.0, 6484.0], [1484.0, 6810.5], [1480.0, 6686.0], [1588.0, 6145.0], [1564.0, 6311.0], [1540.0, 2835.0], [1544.0, 6548.0], [1592.0, 4273.333333333333], [1584.0, 6121.0], [1548.0, 6386.0], [1596.0, 6254.0], [1572.0, 6213.0], [1576.0, 6821.0], [1580.0, 6432.0], [1568.0, 3956.2], [1556.0, 4283.333333333333], [1552.0, 6495.0], [1560.0, 7381.0], [1652.0, 5956.0], [1656.0, 4572.0], [1612.0, 5476.0], [1604.0, 4696.5], [1628.0, 6959.0], [1608.0, 6528.0], [1648.0, 6759.0], [1660.0, 4032.25], [1632.0, 8207.0], [1636.0, 6019.0], [1640.0, 7455.0], [1644.0, 6098.0], [1624.0, 3771.75], [1620.0, 6014.0], [1616.0, 6033.0], [1724.0, 6754.0], [1716.0, 5827.0], [1700.0, 5975.0], [1704.0, 5735.0], [1696.0, 4144.333333333333], [1708.0, 4671.0], [1720.0, 5917.5], [1712.0, 5700.0], [1664.0, 7081.0], [1668.0, 5840.0], [1672.0, 6478.0], [1676.0, 5950.0], [1692.0, 5836.0], [1688.0, 5759.0], [1684.0, 6384.0], [1680.0, 5930.0], [1736.0, 4649.333333333333], [1728.0, 6168.0], [1756.0, 5768.0], [1752.0, 6375.0], [1732.0, 6134.0], [1740.0, 5553.0], [1776.0, 5738.0], [1784.0, 4499.0], [1788.0, 5342.0], [1780.0, 6190.0], [1772.0, 4453.666666666667], [1768.0, 5424.0], [1764.0, 4051.0], [1760.0, 5449.0], [1744.0, 5551.0], [1748.0, 5583.0], [1848.0, 4208.5], [1804.0, 4257.0], [1800.0, 4254.5], [1792.0, 3779.5], [1796.0, 6920.0], [1824.0, 5493.0], [1852.0, 5707.0], [1844.0, 4810.5], [1840.0, 4236.5], [1828.0, 4217.5], [1836.0, 4585.5], [1832.0, 5820.0], [1816.0, 5543.0], [1812.0, 5241.0], [1808.0, 6124.0], [1820.0, 5811.0], [1860.0, 5722.0], [1912.0, 4194.5], [1868.0, 4548.0], [1864.0, 5244.0], [1856.0, 4996.0], [1872.0, 4216.5], [1876.0, 5189.0], [1880.0, 5104.0], [1884.0, 5109.0], [1888.0, 4467.0], [1916.0, 3664.0], [1908.0, 4143.0], [1904.0, 4844.0], [1892.0, 4376.0], [1896.0, 4882.0], [1900.0, 4977.0], [1924.0, 4769.0], [1920.0, 4786.0], [1928.0, 4693.0], [1932.0, 4176.5], [1940.0, 5063.5], [1936.0, 4669.0], [1944.0, 4062.0], [1952.0, 4606.0], [1980.0, 4791.5], [1976.0, 4514.0], [1972.0, 4810.0], [1968.0, 5787.5], [1956.0, 4174.0], [1960.0, 4553.0], [1964.0, 4743.0], [1996.0, 4861.0], [1984.0, 4473.0], [2012.0, 6391.0], [1988.0, 4148.0], [2020.0, 4025.0], [2024.0, 4454.0], [2028.0, 4555.0], [2032.0, 4501.0], [1992.0, 4395.0], [2036.0, 4628.0], [2040.0, 4285.0], [2044.0, 5130.0], [2016.0, 5360.0], [2000.0, 5401.0], [2004.0, 4468.0], [2008.0, 4491.666666666667], [2048.0, 4239.0], [2104.0, 3838.0], [2072.0, 3922.0], [2056.0, 4231.0], [2080.0, 5093.0], [2088.0, 4016.0], [2096.0, 4194.0], [2120.0, 5773.0], [2112.0, 4036.0], [2057.0, 4391.0], [2105.0, 4115.333333333333], [2065.0, 4400.0], [2049.0, 4302.0], [2073.0, 4049.5], [2081.0, 4395.0], [2097.0, 4023.0], [2089.0, 4979.0], [2113.0, 4443.0], [1073.0, 8953.0], [1077.0, 2834.0], [1025.0, 8913.0], [1053.0, 8485.0], [1061.0, 5243.0], [1057.0, 8831.0], [1069.0, 9836.0], [1037.0, 9045.0], [1033.0, 8607.0], [1029.0, 9533.0], [1081.0, 8479.0], [1085.0, 9273.0], [1041.0, 9065.0], [1045.0, 8544.0], [1049.0, 4203.0], [1141.0, 8244.0], [1145.0, 5170.0], [1093.0, 5167.5], [1089.0, 9470.0], [1117.0, 8543.0], [1149.0, 6108.666666666667], [1121.0, 8460.0], [1137.0, 8840.0], [1101.0, 8535.0], [1097.0, 8636.0], [1113.0, 5395.5], [1109.0, 8398.0], [1105.0, 8605.0], [1125.0, 8263.0], [1129.0, 8992.0], [1133.0, 8171.0], [1213.0, 8214.5], [1161.0, 5324.0], [1165.0, 8402.0], [1201.0, 7880.0], [1157.0, 5056.5], [1153.0, 8610.0], [1185.0, 6272.0], [1205.0, 4913.5], [1209.0, 8323.0], [1189.0, 8734.0], [1193.0, 8371.0], [1197.0, 7991.0], [1169.0, 8061.0], [1173.0, 7971.0], [1177.0, 10109.0], [1181.0, 8852.0], [1221.0, 6071.5], [1265.0, 8321.0], [1229.0, 8485.0], [1225.0, 7983.0], [1269.0, 4212.333333333333], [1277.0, 2174.0], [1233.0, 7921.0], [1237.0, 7832.0], [1241.0, 7970.0], [1245.0, 7716.0], [1217.0, 8236.0], [1257.0, 9084.0], [1261.0, 5962.666666666667], [1253.0, 5016.0], [1249.0, 8360.0], [1293.0, 4027.333333333333], [1337.0, 5028.5], [1281.0, 4966.0], [1285.0, 7534.0], [1289.0, 7504.0], [1329.0, 7392.0], [1333.0, 7506.0], [1341.0, 7372.0], [1313.0, 4332.666666666667], [1317.0, 7395.0], [1321.0, 7391.0], [1325.0, 8619.0], [1305.0, 5122.5], [1301.0, 8796.0], [1297.0, 7613.0], [1309.0, 4305.0], [1353.0, 5651.333333333333], [1349.0, 4123.0], [1345.0, 7348.0], [1373.0, 7654.0], [1369.0, 7193.0], [1357.0, 7258.0], [1393.0, 7028.0], [1381.0, 4211.0], [1377.0, 8106.0], [1385.0, 7237.0], [1389.0, 8066.0], [1405.0, 7255.0], [1457.0, 7446.0], [1461.0, 5118.5], [1465.0, 5621.666666666667], [1469.0, 6725.0], [1409.0, 7644.0], [1413.0, 7254.0], [1417.0, 6973.0], [1421.0, 7143.0], [1437.0, 6921.0], [1433.0, 8127.0], [1429.0, 7440.0], [1425.0, 7920.0], [1453.0, 6796.0], [1449.0, 7162.0], [1445.0, 9592.0], [1441.0, 6961.0], [1485.0, 7211.0], [1473.0, 5087.5], [1477.0, 6212.5], [1481.0, 6709.0], [1501.0, 2973.0], [1489.0, 4198.333333333333], [1505.0, 3982.333333333333], [1509.0, 6780.0], [1513.0, 6813.0], [1533.0, 4016.0], [1529.0, 6767.0], [1521.0, 4940.0], [1525.0, 4880.0], [1517.0, 6730.5], [1493.0, 6670.0], [1497.0, 6684.0], [1593.0, 4995.5], [1585.0, 7035.0], [1569.0, 4824.0], [1597.0, 6792.0], [1577.0, 6218.0], [1573.0, 6762.0], [1581.0, 4631.5], [1553.0, 4554.0], [1557.0, 2727.0], [1565.0, 5065.0], [1561.0, 6453.0], [1537.0, 6402.0], [1541.0, 7146.0], [1549.0, 6533.0], [1589.0, 6585.0], [1649.0, 6168.0], [1653.0, 4226.75], [1601.0, 5162.666666666667], [1605.0, 6327.0], [1613.0, 6222.0], [1629.0, 5969.0], [1657.0, 4520.0], [1633.0, 6350.0], [1661.0, 5923.0], [1641.0, 6101.0], [1637.0, 5944.0], [1645.0, 6156.0], [1625.0, 5021.5], [1621.0, 6617.0], [1617.0, 6194.0], [1713.0, 5781.0], [1721.0, 5705.0], [1697.0, 4014.25], [1701.0, 2987.0], [1689.0, 5117.0], [1685.0, 6758.0], [1681.0, 6780.0], [1693.0, 5960.0], [1677.0, 6026.0], [1673.0, 5807.0], [1669.0, 6311.0], [1665.0, 6416.0], [1717.0, 5642.0], [1705.0, 4743.666666666667], [1709.0, 5969.0], [1725.0, 6664.0], [1737.0, 4449.5], [1729.0, 4537.5], [1753.0, 4922.0], [1757.0, 5429.0], [1733.0, 3728.0], [1777.0, 5736.0], [1741.0, 5575.0], [1781.0, 5764.0], [1785.0, 6071.0], [1789.0, 5528.0], [1765.0, 4103.666666666667], [1761.0, 6455.0], [1769.0, 5526.0], [1773.0, 5496.0], [1745.0, 4324.0], [1749.0, 5463.0], [1845.0, 5172.0], [1841.0, 3914.5], [1797.0, 4887.5], [1793.0, 5498.0], [1821.0, 5579.0], [1825.0, 4206.5], [1829.0, 7139.0], [1833.0, 5313.0], [1849.0, 5066.0], [1853.0, 6837.0], [1837.0, 4731.0], [1805.0, 3858.0], [1801.0, 5487.0], [1809.0, 4970.0], [1813.0, 6347.0], [1817.0, 3919.3333333333335], [1857.0, 5559.0], [1869.0, 5160.0], [1865.0, 4982.0], [1861.0, 4965.0], [1873.0, 5743.0], [1877.0, 4081.0], [1881.0, 5253.0], [1885.0, 5473.0], [1889.0, 5667.0], [1917.0, 4977.0], [1913.0, 4129.666666666667], [1905.0, 4978.0], [1893.0, 4885.0], [1897.0, 6464.0], [1901.0, 5243.0], [1925.0, 5801.0], [1929.0, 5516.0], [1921.0, 5248.0], [1949.0, 4810.5], [1941.0, 4674.0], [1937.0, 4686.0], [1945.0, 4438.5], [1953.0, 4876.0], [1981.0, 4472.0], [1977.0, 4107.0], [1973.0, 4790.0], [1969.0, 5542.0], [1933.0, 4817.0], [1957.0, 4549.0], [1961.0, 4539.0], [1965.0, 4615.0], [1997.0, 4343.0], [1985.0, 4930.0], [2013.0, 4571.5], [1989.0, 4545.0], [2021.0, 4535.0], [2025.0, 4713.0], [2029.0, 4632.0], [2033.0, 4184.5], [1993.0, 4401.0], [2037.0, 4094.3333333333335], [2041.0, 4420.25], [2045.0, 4100.5], [2017.0, 4771.0], [2001.0, 4667.0], [2005.0, 4593.0], [2009.0, 4470.5], [2058.0, 4142.0], [2050.0, 4179.0], [2066.0, 4523.0], [2106.0, 4336.0], [2074.0, 4005.0], [2082.0, 4009.0], [2090.0, 4331.0], [2114.0, 4151.666666666667], [2059.0, 4132.0], [2067.0, 4410.0], [2051.0, 4346.0], [2107.0, 4121.0], [2075.0, 5144.0], [2083.0, 4068.5], [2099.0, 4292.5], [2091.0, 4607.0], [2115.0, 4485.166666666667], [537.0, 3036.4], [517.0, 2997.0], [515.0, 11316.0], [519.0, 10876.0], [513.0, 6014.5], [523.0, 6128.0], [527.0, 10929.0], [525.0, 11132.0], [539.0, 5789.0], [543.0, 11310.0], [529.0, 10794.0], [541.0, 11572.0], [535.0, 10975.0], [533.0, 11144.0], [573.0, 6141.0], [561.0, 810.0], [547.0, 5865.5], [545.0, 11482.0], [551.0, 10828.0], [549.0, 11675.0], [559.0, 10666.0], [557.0, 10813.0], [555.0, 10767.0], [563.0, 2877.6], [565.0, 4971.2], [575.0, 11349.0], [571.0, 10931.0], [569.0, 11166.0], [567.0, 10796.0], [603.0, 11032.0], [591.0, 3683.75], [605.0, 5726.0], [601.0, 10477.0], [583.0, 11663.0], [581.0, 10804.0], [579.0, 10660.0], [599.0, 11220.0], [597.0, 10741.0], [595.0, 10556.0], [593.0, 11673.0], [589.0, 10542.0], [587.0, 10970.0], [585.0, 10549.0], [639.0, 10328.0], [627.0, 854.0], [635.0, 6477.5], [637.0, 10329.0], [633.0, 10394.0], [615.0, 10725.0], [613.0, 10427.0], [611.0, 11716.0], [609.0, 11414.0], [631.0, 10389.0], [629.0, 10707.0], [625.0, 10830.0], [623.0, 11131.0], [621.0, 10659.0], [619.0, 10452.0], [617.0, 10587.5], [671.0, 6310.5], [641.0, 4044.6666666666665], [647.0, 10361.0], [643.0, 10335.0], [655.0, 11518.0], [653.0, 10308.0], [651.0, 11073.0], [649.0, 10830.0], [663.0, 4356.0], [665.0, 7513.0], [669.0, 10529.0], [667.0, 10574.0], [661.0, 10530.0], [659.0, 10227.0], [657.0, 10614.0], [699.0, 10643.0], [677.0, 5822.0], [687.0, 10204.0], [673.0, 10153.0], [683.0, 5708.5], [681.0, 10804.0], [685.0, 6321.0], [693.0, 3103.6], [691.0, 10226.0], [689.0, 10772.0], [703.0, 10046.0], [701.0, 10155.0], [697.0, 10175.0], [679.0, 10184.0], [695.0, 10582.0], [719.0, 10851.0], [715.0, 4256.333333333334], [713.0, 3961.0], [717.0, 1044.0], [725.0, 6006.0], [723.0, 10061.0], [721.0, 9912.0], [735.0, 9965.0], [733.0, 10654.0], [731.0, 9925.0], [729.0, 10548.0], [711.0, 10278.0], [709.0, 10047.0], [707.0, 10047.0], [727.0, 4340.666666666666], [741.0, 10151.0], [739.0, 2818.166666666667], [761.0, 9899.5], [743.0, 9872.0], [747.0, 5780.5], [737.0, 9968.0], [749.0, 9901.0], [767.0, 11407.0], [753.0, 10343.0], [755.0, 9801.0], [757.0, 9778.0], [759.0, 10226.0], [765.0, 9981.0], [763.0, 11366.0], [771.0, 9690.0], [795.0, 4194.333333333334], [769.0, 5848.5], [775.0, 4583.0], [793.0, 10178.0], [773.0, 4100.666666666666], [777.0, 5444.0], [779.0, 10449.0], [781.0, 10685.0], [783.0, 11016.0], [797.0, 9731.0], [799.0, 9731.0], [785.0, 10492.0], [787.0, 9718.0], [789.0, 10776.0], [791.0, 10151.0], [801.0, 9647.0], [803.0, 5490.0], [815.0, 10675.0], [813.0, 9803.0], [811.0, 10292.0], [809.0, 10300.0], [805.0, 9624.0], [807.0, 9664.0], [825.0, 10984.0], [831.0, 10419.0], [817.0, 10945.0], [819.0, 9552.0], [821.0, 9595.0], [829.0, 9997.0], [827.0, 9653.0], [833.0, 9721.5], [839.0, 4070.3333333333335], [845.0, 5379.5], [841.0, 9722.0], [847.0, 5831.0], [837.0, 9734.0], [851.0, 3624.25], [849.0, 5533.0], [863.0, 9692.0], [861.0, 10068.0], [859.0, 9870.0], [857.0, 9453.0], [853.0, 7457.666666666667], [855.0, 10371.0], [865.0, 9333.0], [889.0, 5788.5], [871.0, 5314.0], [877.0, 5340.0], [873.0, 10729.0], [879.0, 9359.0], [867.0, 9380.0], [869.0, 9653.0], [885.0, 5468.5], [887.0, 4262.333333333334], [891.0, 9231.0], [895.0, 4012.3333333333335], [883.0, 9382.0], [881.0, 10257.0], [893.0, 5566.0], [897.0, 9131.0], [903.0, 3562.5], [905.0, 4776.0], [909.0, 9500.5], [907.0, 9285.0], [911.0, 9416.0], [901.0, 9315.0], [925.0, 4977.6], [923.0, 5568.0], [927.0, 9208.0], [919.0, 9356.5], [917.0, 9093.0], [915.0, 9082.0], [913.0, 11362.0], [921.0, 9021.0], [957.0, 4792.0], [931.0, 9066.0], [943.0, 8951.0], [941.0, 9238.0], [939.0, 8987.0], [949.0, 4012.6666666666665], [951.0, 8954.0], [947.0, 5253.5], [955.0, 8915.5], [953.0, 10352.0], [935.0, 9626.0], [933.0, 8973.0], [965.0, 8858.0], [963.0, 5803.5], [967.0, 9632.0], [985.0, 9090.0], [971.0, 9301.0], [975.0, 9407.0], [961.0, 9712.0], [973.0, 5779.5], [977.0, 5377.0], [991.0, 8925.0], [989.0, 9061.0], [987.0, 9041.0], [979.0, 5773.0], [983.0, 3818.75], [999.0, 8771.0], [997.0, 5520.0], [1017.0, 8902.0], [1003.0, 9135.0], [1005.0, 5693.0], [1007.0, 8951.0], [993.0, 8921.0], [1011.0, 1844.0], [1009.0, 8715.0], [1015.0, 8793.0], [1013.0, 8727.0], [1019.0, 4280.333333333334], [1023.0, 8667.0], [1021.0, 8811.0], [1082.0, 8705.0], [1030.0, 6060.0], [1050.0, 5164.5], [1054.0, 8674.0], [1026.0, 8947.0], [1034.0, 5606.0], [1062.0, 5604.0], [1058.0, 8502.0], [1066.0, 8442.0], [1070.0, 9067.0], [1078.0, 5468.75], [1074.0, 8494.0], [1038.0, 9988.0], [1086.0, 8313.0], [1046.0, 8553.0], [1042.0, 8554.0], [1094.0, 8448.0], [1090.0, 9307.0], [1098.0, 8305.0], [1102.0, 8734.0], [1118.0, 9462.0], [1114.0, 8253.0], [1138.0, 8372.0], [1142.0, 3719.75], [1146.0, 5503.5], [1110.0, 5645.5], [1106.0, 8416.0], [1126.0, 3852.25], [1122.0, 8244.0], [1202.0, 8595.0], [1210.0, 3940.333333333333], [1182.0, 7958.0], [1158.0, 8080.0], [1166.0, 9779.0], [1214.0, 8205.0], [1186.0, 8092.0], [1206.0, 7943.0], [1190.0, 7942.0], [1194.0, 5383.5], [1198.0, 8893.0], [1170.0, 8740.0], [1174.0, 8945.0], [1178.0, 2224.0], [1266.0, 8418.0], [1222.0, 4257.333333333333], [1218.0, 8592.0], [1270.0, 7738.0], [1230.0, 7973.0], [1274.0, 8387.0], [1278.0, 8152.5], [1250.0, 8567.0], [1234.0, 4971.5], [1246.0, 6261.0], [1242.0, 7880.0], [1238.0, 7712.0], [1254.0, 3610.8], [1262.0, 5000.0], [1258.0, 7919.0], [1334.0, 7820.0], [1342.0, 7842.0], [1294.0, 5262.5], [1282.0, 7794.0], [1286.0, 7537.0], [1290.0, 8023.0], [1338.0, 8354.0], [1330.0, 7391.0], [1314.0, 5080.0], [1318.0, 7421.0], [1322.0, 7388.0], [1326.0, 7372.0], [1306.0, 7917.0], [1302.0, 7449.0], [1298.0, 7479.0], [1310.0, 5270.5], [1354.0, 8028.0], [1350.0, 4382.333333333333], [1346.0, 7317.0], [1374.0, 4882.0], [1366.0, 7639.0], [1370.0, 4842.0], [1358.0, 7966.0], [1394.0, 7488.0], [1398.0, 7033.0], [1402.0, 7397.5], [1406.0, 8407.0], [1382.0, 4822.666666666666], [1378.0, 7550.0], [1390.0, 7565.0], [1386.0, 7075.0], [1362.0, 5990.666666666667], [1410.0, 7533.0], [1466.0, 6778.0], [1462.0, 7295.0], [1458.0, 6733.0], [1438.0, 7752.0], [1414.0, 6966.0], [1422.0, 7893.0], [1434.0, 6923.0], [1430.0, 7005.0], [1426.0, 8069.0], [1454.0, 7227.0], [1450.0, 7544.0], [1442.0, 6820.0], [1530.0, 4750.0], [1478.0, 4707.0], [1534.0, 3022.0], [1506.0, 4841.0], [1510.0, 6899.0], [1518.0, 6560.0], [1514.0, 6709.0], [1490.0, 7280.0], [1494.0, 6664.0], [1502.0, 7063.0], [1474.0, 6771.0], [1526.0, 6632.0], [1522.0, 6444.0], [1486.0, 6760.0], [1482.0, 6713.0], [1546.0, 5359.333333333333], [1538.0, 3627.5], [1562.0, 5148.5], [1566.0, 6860.0], [1542.0, 6498.0], [1590.0, 6742.0], [1586.0, 6355.0], [1550.0, 6847.0], [1594.0, 6589.0], [1598.0, 6089.0], [1570.0, 5402.5], [1574.0, 6606.0], [1578.0, 6861.0], [1582.0, 6534.0], [1554.0, 6284.0], [1558.0, 6874.0], [1610.0, 6032.5], [1602.0, 4003.0], [1630.0, 6107.0], [1606.0, 4853.0], [1654.0, 4609.5], [1650.0, 7189.0], [1658.0, 5924.0], [1662.0, 5977.0], [1634.0, 6202.0], [1638.0, 6024.0], [1642.0, 6325.0], [1646.0, 6069.0], [1622.0, 6299.0], [1618.0, 6429.0], [1626.0, 4035.75], [1726.0, 4682.5], [1698.0, 4628.0], [1702.0, 5954.0], [1706.0, 6384.0], [1710.0, 6548.0], [1722.0, 6891.0], [1718.0, 5912.0], [1714.0, 5819.0], [1694.0, 5812.0], [1666.0, 5985.0], [1674.0, 5830.0], [1678.0, 6156.0], [1686.0, 6964.0], [1682.0, 5922.0], [1734.0, 4884.333333333333], [1730.0, 5998.5], [1750.0, 4453.0], [1758.0, 5569.0], [1754.0, 5488.0], [1742.0, 4310.666666666667], [1738.0, 5539.0], [1790.0, 4445.0], [1786.0, 5752.0], [1778.0, 4419.0], [1782.0, 5466.0], [1766.0, 4108.75], [1770.0, 5420.0], [1774.0, 6151.0], [1762.0, 6584.0], [1746.0, 4465.0], [1806.0, 4633.2], [1798.0, 4294.0], [1794.0, 7507.0], [1802.0, 4265.0], [1846.0, 4577.0], [1850.0, 5041.0], [1854.0, 5236.0], [1826.0, 5467.0], [1842.0, 4754.0], [1834.0, 5151.0], [1830.0, 6255.0], [1838.0, 6631.0], [1814.0, 5854.0], [1810.0, 5528.0], [1818.0, 3265.0], [1822.0, 5223.0], [1862.0, 4978.0], [1858.0, 5112.5], [1870.0, 4327.5], [1874.0, 5111.0], [1882.0, 4913.5], [1878.0, 5663.0], [1886.0, 4382.0], [1890.0, 4891.0], [1918.0, 5646.0], [1914.0, 4413.5], [1906.0, 4832.0], [1910.0, 5153.0], [1894.0, 5212.0], [1898.0, 4932.0], [1902.0, 5128.0], [1926.0, 4822.0], [1974.0, 4370.666666666667], [1922.0, 4384.5], [1946.0, 4615.0], [1930.0, 4695.0], [1942.0, 4656.5], [1938.0, 4688.0], [1982.0, 4782.0], [1978.0, 5018.0], [1934.0, 5533.0], [1954.0, 4365.5], [1958.0, 3632.5], [1966.0, 4537.5], [1998.0, 4509.0], [1986.0, 4016.0], [2014.0, 4172.5], [1990.0, 4132.0], [2022.0, 4413.0], [2026.0, 5208.0], [2030.0, 4334.0], [1994.0, 5266.0], [2034.0, 4557.0], [2038.0, 4254.0], [2042.0, 4453.0], [2046.0, 4684.0], [2018.0, 4715.0], [2002.0, 5197.0], [2006.0, 4469.0], [2010.0, 4253.5], [2060.0, 4592.0], [2068.0, 4163.0], [2108.0, 3980.0], [2076.0, 4353.0], [2084.0, 5848.0], [2092.0, 4922.0], [2100.0, 4127.0], [2116.0, 4264.0], [2061.0, 4138.0], [2069.0, 4453.5], [2053.0, 4890.5], [2109.0, 4136.0], [2077.0, 4782.0], [2085.0, 3953.3333333333335], [2101.0, 4498.333333333333], [2093.0, 4022.0], [2117.0, 5791.0], [1039.0, 8887.0], [1027.0, 4457.666666666666], [1051.0, 5232.0], [1055.0, 8678.0], [1059.0, 8507.0], [1067.0, 8558.0], [1063.0, 9121.0], [1071.0, 8640.0], [1075.0, 5245.0], [1035.0, 8615.0], [1031.0, 8927.0], [1079.0, 3774.75], [1083.0, 8788.0], [1087.0, 2074.0], [1043.0, 5247.0], [1139.0, 8316.0], [1091.0, 5538.0], [1119.0, 8391.0], [1115.0, 8637.0], [1147.0, 9051.0], [1151.0, 5196.5], [1143.0, 5777.0], [1103.0, 9156.0], [1099.0, 10218.0], [1095.0, 8701.0], [1111.0, 5370.0], [1107.0, 8518.0], [1123.0, 4202.0], [1127.0, 5120.5], [1131.0, 8303.5], [1135.0, 8271.0], [1203.0, 8463.0], [1211.0, 4976.5], [1159.0, 5061.0], [1163.0, 9489.5], [1167.0, 8934.0], [1155.0, 8641.0], [1215.0, 8771.0], [1207.0, 9405.0], [1187.0, 5667.0], [1191.0, 5286.0], [1195.0, 8409.0], [1199.0, 8228.0], [1171.0, 5364.5], [1175.0, 9320.0], [1179.0, 8071.0], [1183.0, 5275.5], [1227.0, 7903.0], [1279.0, 4443.333333333333], [1267.0, 8185.0], [1231.0, 7925.0], [1223.0, 8182.0], [1275.0, 8204.0], [1235.0, 4181.666666666667], [1239.0, 8336.0], [1219.0, 7854.0], [1243.0, 8128.0], [1255.0, 4168.666666666667], [1259.0, 7656.0], [1263.0, 4908.0], [1295.0, 8421.0], [1287.0, 2995.0], [1283.0, 7504.0], [1291.0, 7486.0], [1331.0, 7675.0], [1335.0, 7361.0], [1339.0, 5393.5], [1315.0, 7543.0], [1319.0, 7545.0], [1323.0, 7446.0], [1343.0, 7373.0], [1303.0, 8070.0], [1299.0, 7899.0], [1307.0, 7457.0], [1359.0, 7296.0], [1403.0, 7158.0], [1347.0, 7443.0], [1375.0, 7603.0], [1367.0, 7348.0], [1363.0, 7555.0], [1351.0, 4305.666666666667], [1379.0, 7288.0], [1383.0, 7236.0], [1391.0, 7029.0], [1407.0, 7521.0], [1399.0, 7180.0], [1395.0, 7058.0], [1459.0, 4780.0], [1467.0, 4884.0], [1471.0, 5625.333333333333], [1463.0, 7135.0], [1439.0, 7262.0], [1411.0, 7104.0], [1415.0, 8327.0], [1419.0, 7124.0], [1423.0, 7339.0], [1431.0, 6904.0], [1427.0, 7006.0], [1455.0, 8061.0], [1451.0, 6996.0], [1447.0, 6991.0], [1443.0, 6956.0], [1487.0, 5133.5], [1499.0, 4148.166666666667], [1475.0, 7753.0], [1479.0, 6688.0], [1503.0, 4671.0], [1507.0, 6632.0], [1511.0, 7238.0], [1535.0, 5230.0], [1531.0, 6391.0], [1523.0, 6439.0], [1515.0, 5256.0], [1519.0, 6908.0], [1491.0, 4634.0], [1495.0, 4949.0], [1599.0, 6083.0], [1595.0, 6607.0], [1579.0, 5114.0], [1575.0, 6237.0], [1571.0, 6321.0], [1583.0, 6673.0], [1555.0, 4621.5], [1563.0, 6684.0], [1559.0, 6241.0], [1567.0, 7470.0], [1539.0, 6969.0], [1547.0, 6548.0], [1543.0, 6329.0], [1551.0, 7181.0], [1587.0, 6146.0], [1591.0, 6334.0], [1651.0, 6156.0], [1659.0, 4374.5], [1603.0, 7240.0], [1611.0, 6018.0], [1607.0, 6227.0], [1615.0, 6185.5], [1631.0, 7230.0], [1655.0, 6785.0], [1663.0, 5050.0], [1635.0, 5139.0], [1643.0, 4515.0], [1639.0, 6198.0], [1647.0, 6148.0], [1623.0, 6519.0], [1619.0, 6329.0], [1627.0, 4670.5], [1671.0, 6243.0], [1699.0, 5872.0], [1703.0, 5713.0], [1687.0, 6106.0], [1683.0, 5919.0], [1691.0, 6113.5], [1679.0, 6222.0], [1667.0, 6633.0], [1695.0, 6563.0], [1715.0, 6151.0], [1707.0, 5101.0], [1711.0, 4700.5], [1727.0, 5677.0], [1723.0, 6521.0], [1779.0, 4100.333333333333], [1787.0, 6248.0], [1759.0, 5494.0], [1731.0, 5644.0], [1735.0, 5660.0], [1743.0, 5521.0], [1739.0, 5654.0], [1783.0, 5913.0], [1791.0, 4156.333333333333], [1763.0, 5978.0], [1767.0, 6274.0], [1771.0, 5376.0], [1775.0, 5035.5], [1747.0, 5528.0], [1751.0, 6521.0], [1851.0, 5040.0], [1819.0, 4635.333333333333], [1823.0, 5252.0], [1795.0, 6004.0], [1827.0, 5716.0], [1831.0, 5145.0], [1835.0, 5652.0], [1855.0, 4608.0], [1843.0, 4522.0], [1847.0, 6220.0], [1839.0, 5096.0], [1803.0, 5480.0], [1799.0, 5441.0], [1807.0, 5320.0], [1811.0, 5222.0], [1863.0, 5684.0], [1867.0, 6629.5], [1859.0, 5142.0], [1887.0, 4890.0], [1871.0, 4358.666666666667], [1875.0, 5097.0], [1879.0, 4943.0], [1883.0, 4967.0], [1891.0, 5833.0], [1919.0, 4927.0], [1915.0, 4200.5], [1907.0, 4928.0], [1911.0, 4985.0], [1895.0, 4854.0], [1899.0, 5251.0], [1903.0, 5419.0], [1931.0, 4673.0], [1927.0, 4599.0], [1951.0, 4895.0], [1947.0, 6127.0], [1943.0, 5044.0], [1983.0, 4477.0], [1975.0, 4336.666666666667], [1971.0, 6114.0], [1935.0, 4879.0], [1955.0, 4206.0], [1959.0, 4641.5], [1963.0, 4568.5], [1999.0, 5076.0], [1987.0, 4863.5], [2011.0, 4267.333333333333], [2015.0, 4132.5], [2027.0, 4784.0], [2031.0, 5581.0], [2019.0, 3954.5], [1995.0, 5104.0], [1991.0, 4728.0], [2035.0, 4533.0], [2039.0, 4510.0], [2043.0, 4469.0], [2047.0, 4448.8], [2003.0, 4614.0], [2007.0, 5806.0], [2062.0, 4455.0], [2054.0, 4531.0], [2070.0, 4337.0], [2110.0, 4488.0], [2086.0, 4871.0], [2094.0, 5716.0], [2102.0, 4246.333333333333], [2118.0, 4074.3333333333335], [2055.0, 4147.0], [2063.0, 4874.0], [2111.0, 4318.0], [2071.0, 4582.0], [2079.0, 4192.0], [2103.0, 4593.75], [2095.0, 4023.0], [2087.0, 5360.0], [2119.0, 4111.5], [1.0, 7.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[746.2211764705887, 4855.695294117645]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2120.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 42559.0, "minX": 1.699971996E12, "maxY": 280695.0, "series": [{"data": [[1.699972014E12, 72675.0], [1.699972015E12, 71199.0], [1.699972016E12, 73106.0], [1.699972011E12, 74567.0], [1.699972012E12, 73123.0], [1.699972013E12, 74051.0], [1.699971998E12, 280695.0], [1.699971999E12, 91224.0], [1.699972E12, 69260.0], [1.699971996E12, 78138.0], [1.699972017E12, 101780.0], [1.699971997E12, 223126.0], [1.699972003E12, 68752.0], [1.699972004E12, 67357.0], [1.699972005E12, 76876.0], [1.699972001E12, 63115.0], [1.699972002E12, 61699.0], [1.699972009E12, 73109.0], [1.69997201E12, 75981.0], [1.699972006E12, 76437.0], [1.699972007E12, 74530.0], [1.699972008E12, 69364.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.699972014E12, 50045.0], [1.699972015E12, 49007.0], [1.699972016E12, 50330.0], [1.699972011E12, 51353.0], [1.699972012E12, 50347.0], [1.699972013E12, 50983.0], [1.699971998E12, 193695.0], [1.699971999E12, 62949.0], [1.699972E12, 47800.0], [1.699971996E12, 53923.0], [1.699972017E12, 70098.0], [1.699971997E12, 153961.0], [1.699972003E12, 47437.0], [1.699972004E12, 46459.0], [1.699972005E12, 52932.0], [1.699972001E12, 43540.0], [1.699972002E12, 42559.0], [1.699972009E12, 50333.0], [1.69997201E12, 52329.0], [1.699972006E12, 52639.0], [1.699972007E12, 51316.0], [1.699972008E12, 47756.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.699972017E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8.857442348008385, "minX": 1.699971996E12, "maxY": 13247.483870967739, "series": [{"data": [[1.699972014E12, 10839.012903225806], [1.699972015E12, 11536.493421052628], [1.699972016E12, 12294.724358974358], [1.699972011E12, 8748.515723270439], [1.699972012E12, 9418.160256410252], [1.699972013E12, 10204.575949367083], [1.699971998E12, 11.006666666666671], [1.699971999E12, 232.07692307692307], [1.699972E12, 1040.9054054054054], [1.699971996E12, 25.68263473053893], [1.699972017E12, 13247.483870967739], [1.699971997E12, 8.857442348008385], [1.699972003E12, 3258.850340136055], [1.699972004E12, 4042.284722222223], [1.699972005E12, 4674.7317073170725], [1.699972001E12, 1796.1851851851852], [1.699972002E12, 2477.4772727272707], [1.699972009E12, 7451.974358974358], [1.69997201E12, 8199.981481481484], [1.699972006E12, 5393.441717791408], [1.699972007E12, 6079.4465408805045], [1.699972008E12, 6685.520270270272]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.699972017E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8.798742138364776, "minX": 1.699971996E12, "maxY": 13247.423963133644, "series": [{"data": [[1.699972014E12, 10838.864516129039], [1.699972015E12, 11536.41447368421], [1.699972016E12, 12294.64102564102], [1.699972011E12, 8748.45911949686], [1.699972012E12, 9418.057692307691], [1.699972013E12, 10204.512658227854], [1.699971998E12, 10.959999999999988], [1.699971999E12, 232.0615384615385], [1.699972E12, 1040.8648648648657], [1.699971996E12, 25.209580838323355], [1.699972017E12, 13247.423963133644], [1.699971997E12, 8.798742138364776], [1.699972003E12, 3258.7687074829923], [1.699972004E12, 4042.1736111111113], [1.699972005E12, 4674.676829268294], [1.699972001E12, 1796.1111111111104], [1.699972002E12, 2477.3409090909086], [1.699972009E12, 7451.910256410256], [1.69997201E12, 8199.851851851856], [1.699972006E12, 5393.361963190185], [1.699972007E12, 6079.415094339622], [1.699972008E12, 6685.4527027027]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.699972017E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.5759493670886076, "minX": 1.699971996E12, "maxY": 7.664670658682634, "series": [{"data": [[1.699972014E12, 0.6258064516129035], [1.699972015E12, 0.6644736842105267], [1.699972016E12, 0.8653846153846156], [1.699972011E12, 0.7358490566037736], [1.699972012E12, 0.6025641025641023], [1.699972013E12, 0.5759493670886076], [1.699971998E12, 1.2266666666666663], [1.699971999E12, 1.9128205128205127], [1.699972E12, 1.4189189189189182], [1.699971996E12, 7.664670658682634], [1.699972017E12, 0.5760368663594472], [1.699971997E12, 1.5094339622641497], [1.699972003E12, 1.6530612244897964], [1.699972004E12, 1.9444444444444449], [1.699972005E12, 1.4695121951219512], [1.699972001E12, 0.9925925925925921], [1.699972002E12, 0.9924242424242431], [1.699972009E12, 0.794871794871795], [1.69997201E12, 0.648148148148148], [1.699972006E12, 1.3251533742331287], [1.699972007E12, 1.0251572327044027], [1.699972008E12, 0.8581081081081082]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.699972017E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.699971996E12, "maxY": 16345.0, "series": [{"data": [[1.699972014E12, 13476.0], [1.699972015E12, 14170.0], [1.699972016E12, 14632.0], [1.699972011E12, 10218.0], [1.699972012E12, 11438.0], [1.699972013E12, 12196.0], [1.699971998E12, 65.0], [1.699971999E12, 840.0], [1.699972E12, 1889.0], [1.699971996E12, 116.0], [1.699972017E12, 16345.0], [1.699971997E12, 30.0], [1.699972003E12, 4788.0], [1.699972004E12, 5791.0], [1.699972005E12, 6451.0], [1.699972001E12, 2834.0], [1.699972002E12, 3398.0], [1.699972009E12, 9694.0], [1.69997201E12, 10444.0], [1.699972006E12, 7507.0], [1.699972007E12, 8207.0], [1.699972008E12, 9821.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.699972014E12, 11476.0], [1.699972015E12, 12275.300000000001], [1.699972016E12, 12895.4], [1.699972011E12, 9414.0], [1.699972012E12, 10087.5], [1.699972013E12, 10867.9], [1.699971998E12, 17.899999999999977], [1.699971999E12, 550.6], [1.699972E12, 1544.6], [1.699971996E12, 88.60000000000014], [1.699972017E12, 13902.6], [1.699971997E12, 12.0], [1.699972003E12, 3985.000000000002], [1.699972004E12, 4723.0], [1.699972005E12, 5310.0], [1.699972001E12, 2358.0], [1.699972002E12, 3087.7], [1.699972009E12, 8127.6], [1.69997201E12, 9042.300000000003], [1.699972006E12, 6057.8], [1.699972007E12, 6754.0], [1.699972008E12, 7261.099999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.699972014E12, 13341.599999999999], [1.699972015E12, 13739.109999999999], [1.699972016E12, 14477.530000000002], [1.699972011E12, 10167.6], [1.699972012E12, 11394.68], [1.699972013E12, 12122.25], [1.699971998E12, 47.950000000000045], [1.699971999E12, 793.9199999999996], [1.699972E12, 1853.2299999999993], [1.699971996E12, 115.32], [1.699972017E12, 15127.46], [1.699971997E12, 19.65999999999991], [1.699972003E12, 4743.840000000001], [1.699972004E12, 5782.900000000001], [1.699972005E12, 6412.0], [1.699972001E12, 2807.719999999999], [1.699972002E12, 3385.4599999999996], [1.699972009E12, 9635.86], [1.69997201E12, 10253.740000000002], [1.699972006E12, 7466.039999999999], [1.699972007E12, 7755.800000000005], [1.699972008E12, 8933.119999999984]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.699972014E12, 11673.4], [1.699972015E12, 12594.699999999999], [1.699972016E12, 13381.4], [1.699972011E12, 9632.0], [1.699972012E12, 10430.7], [1.699972013E12, 11065.599999999995], [1.699971998E12, 26.949999999999932], [1.699971999E12, 644.1999999999994], [1.699972E12, 1713.1499999999994], [1.699971996E12, 106.19999999999999], [1.699972017E12, 14396.8], [1.699971997E12, 14.099999999999966], [1.699972003E12, 4385.599999999999], [1.699972004E12, 5139.0], [1.699972005E12, 5682.25], [1.699972001E12, 2616.5999999999985], [1.699972002E12, 3226.9999999999995], [1.699972009E12, 8465.45], [1.69997201E12, 9444.2], [1.699972006E12, 6463.2], [1.699972007E12, 6964.0], [1.699972008E12, 7428.549999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.699972014E12, 10153.0], [1.699972015E12, 10859.0], [1.699972016E12, 11541.0], [1.699972011E12, 8073.0], [1.699972012E12, 8800.0], [1.699972013E12, 9504.0], [1.699971998E12, 5.0], [1.699971999E12, 9.0], [1.699972E12, 436.0], [1.699971996E12, 6.0], [1.699972017E12, 12215.0], [1.699971997E12, 5.0], [1.699972003E12, 2582.0], [1.699972004E12, 3308.0], [1.699972005E12, 4016.0], [1.699972001E12, 1146.0], [1.699972002E12, 1838.0], [1.699972009E12, 6725.0], [1.69997201E12, 7438.0], [1.699972006E12, 4669.0], [1.699972007E12, 5376.0], [1.699972008E12, 6018.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.699972014E12, 10743.0], [1.699972015E12, 11444.5], [1.699972016E12, 12194.5], [1.699972011E12, 8678.0], [1.699972012E12, 9304.0], [1.699972013E12, 10094.0], [1.699971998E12, 9.0], [1.699971999E12, 159.0], [1.699972E12, 1005.0], [1.699971996E12, 10.0], [1.699972017E12, 13187.0], [1.699971997E12, 8.0], [1.699972003E12, 3173.0], [1.699972004E12, 3942.5], [1.699972005E12, 4553.5], [1.699972001E12, 1716.0], [1.699972002E12, 2450.0], [1.699972009E12, 7359.0], [1.69997201E12, 8075.0], [1.699972006E12, 5265.0], [1.699972007E12, 6006.0], [1.699972008E12, 6639.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.699972017E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8.0, "minX": 132.0, "maxY": 13187.0, "series": [{"data": [[135.0, 1716.0], [132.0, 2450.0], [600.0, 9.0], [148.0, 3953.5], [147.0, 3173.0], [144.0, 3942.5], [159.0, 8093.0], [156.0, 9323.0], [158.0, 10094.0], [155.0, 10743.0], [152.0, 11444.5], [167.0, 10.0], [164.0, 4553.5], [163.0, 5265.0], [162.0, 8075.0], [195.0, 159.0], [217.0, 13187.0], [477.0, 8.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 600.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 8.0, "minX": 132.0, "maxY": 13187.0, "series": [{"data": [[135.0, 1716.0], [132.0, 2450.0], [600.0, 9.0], [148.0, 3953.5], [147.0, 3173.0], [144.0, 3942.5], [159.0, 8093.0], [156.0, 9322.5], [158.0, 10094.0], [155.0, 10743.0], [152.0, 11444.5], [167.0, 9.0], [164.0, 4553.5], [163.0, 5265.0], [162.0, 8074.0], [195.0, 159.0], [217.0, 13187.0], [477.0, 8.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 600.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 170.0, "minX": 1.699971996E12, "maxY": 618.0, "series": [{"data": [[1.699972003E12, 499.0], [1.699972004E12, 420.0], [1.699972001E12, 501.0], [1.699972002E12, 500.0], [1.699971998E12, 618.0], [1.699971999E12, 557.0], [1.699972E12, 500.0], [1.699971996E12, 170.0], [1.699971997E12, 485.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.699972004E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 132.0, "minX": 1.699971996E12, "maxY": 600.0, "series": [{"data": [[1.699972014E12, 155.0], [1.699972015E12, 152.0], [1.699972016E12, 156.0], [1.699972011E12, 159.0], [1.699972012E12, 156.0], [1.699972013E12, 158.0], [1.699971998E12, 600.0], [1.699971999E12, 195.0], [1.699972E12, 148.0], [1.699971996E12, 167.0], [1.699972017E12, 217.0], [1.699971997E12, 477.0], [1.699972003E12, 147.0], [1.699972004E12, 144.0], [1.699972005E12, 164.0], [1.699972001E12, 135.0], [1.699972002E12, 132.0], [1.699972009E12, 156.0], [1.69997201E12, 162.0], [1.699972006E12, 163.0], [1.699972007E12, 159.0], [1.699972008E12, 148.0]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.699972017E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 132.0, "minX": 1.699971996E12, "maxY": 600.0, "series": [{"data": [[1.699972014E12, 155.0], [1.699972015E12, 152.0], [1.699972016E12, 156.0], [1.699972011E12, 159.0], [1.699972012E12, 156.0], [1.699972013E12, 158.0], [1.699971998E12, 600.0], [1.699971999E12, 195.0], [1.699972E12, 148.0], [1.699971996E12, 167.0], [1.699972017E12, 217.0], [1.699971997E12, 477.0], [1.699972003E12, 147.0], [1.699972004E12, 144.0], [1.699972005E12, 164.0], [1.699972001E12, 135.0], [1.699972002E12, 132.0], [1.699972009E12, 156.0], [1.69997201E12, 162.0], [1.699972006E12, 163.0], [1.699972007E12, 159.0], [1.699972008E12, 148.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.699972017E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 132.0, "minX": 1.699971996E12, "maxY": 600.0, "series": [{"data": [[1.699972014E12, 155.0], [1.699972015E12, 152.0], [1.699972016E12, 156.0], [1.699972011E12, 159.0], [1.699972012E12, 156.0], [1.699972013E12, 158.0], [1.699971998E12, 600.0], [1.699971999E12, 195.0], [1.699972E12, 148.0], [1.699971996E12, 167.0], [1.699972017E12, 217.0], [1.699971997E12, 477.0], [1.699972003E12, 147.0], [1.699972004E12, 144.0], [1.699972005E12, 164.0], [1.699972001E12, 135.0], [1.699972002E12, 132.0], [1.699972009E12, 156.0], [1.69997201E12, 162.0], [1.699972006E12, 163.0], [1.699972007E12, 159.0], [1.699972008E12, 148.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.699972017E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

