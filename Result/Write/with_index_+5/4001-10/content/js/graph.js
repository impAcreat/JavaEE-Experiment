/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 15198.0, "series": [{"data": [[0.0, 5.0], [0.1, 5.0], [0.2, 5.0], [0.3, 5.0], [0.4, 6.0], [0.5, 6.0], [0.6, 6.0], [0.7, 6.0], [0.8, 6.0], [0.9, 6.0], [1.0, 6.0], [1.1, 6.0], [1.2, 6.0], [1.3, 6.0], [1.4, 6.0], [1.5, 6.0], [1.6, 6.0], [1.7, 6.0], [1.8, 6.0], [1.9, 6.0], [2.0, 6.0], [2.1, 6.0], [2.2, 6.0], [2.3, 6.0], [2.4, 6.0], [2.5, 6.0], [2.6, 6.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 6.0], [4.2, 6.0], [4.3, 6.0], [4.4, 6.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 6.0], [5.1, 7.0], [5.2, 7.0], [5.3, 7.0], [5.4, 7.0], [5.5, 7.0], [5.6, 7.0], [5.7, 7.0], [5.8, 7.0], [5.9, 7.0], [6.0, 7.0], [6.1, 7.0], [6.2, 7.0], [6.3, 7.0], [6.4, 7.0], [6.5, 7.0], [6.6, 7.0], [6.7, 7.0], [6.8, 7.0], [6.9, 7.0], [7.0, 7.0], [7.1, 7.0], [7.2, 7.0], [7.3, 7.0], [7.4, 7.0], [7.5, 7.0], [7.6, 7.0], [7.7, 7.0], [7.8, 7.0], [7.9, 7.0], [8.0, 7.0], [8.1, 7.0], [8.2, 7.0], [8.3, 7.0], [8.4, 7.0], [8.5, 7.0], [8.6, 7.0], [8.7, 7.0], [8.8, 7.0], [8.9, 7.0], [9.0, 7.0], [9.1, 7.0], [9.2, 7.0], [9.3, 7.0], [9.4, 7.0], [9.5, 7.0], [9.6, 7.0], [9.7, 7.0], [9.8, 7.0], [9.9, 7.0], [10.0, 7.0], [10.1, 7.0], [10.2, 7.0], [10.3, 7.0], [10.4, 7.0], [10.5, 7.0], [10.6, 7.0], [10.7, 7.0], [10.8, 7.0], [10.9, 7.0], [11.0, 7.0], [11.1, 7.0], [11.2, 7.0], [11.3, 7.0], [11.4, 7.0], [11.5, 7.0], [11.6, 7.0], [11.7, 7.0], [11.8, 7.0], [11.9, 7.0], [12.0, 7.0], [12.1, 7.0], [12.2, 7.0], [12.3, 7.0], [12.4, 7.0], [12.5, 8.0], [12.6, 8.0], [12.7, 8.0], [12.8, 8.0], [12.9, 8.0], [13.0, 8.0], [13.1, 8.0], [13.2, 8.0], [13.3, 8.0], [13.4, 8.0], [13.5, 8.0], [13.6, 8.0], [13.7, 8.0], [13.8, 8.0], [13.9, 8.0], [14.0, 8.0], [14.1, 8.0], [14.2, 8.0], [14.3, 8.0], [14.4, 8.0], [14.5, 8.0], [14.6, 8.0], [14.7, 8.0], [14.8, 8.0], [14.9, 8.0], [15.0, 8.0], [15.1, 8.0], [15.2, 8.0], [15.3, 8.0], [15.4, 8.0], [15.5, 8.0], [15.6, 8.0], [15.7, 8.0], [15.8, 8.0], [15.9, 8.0], [16.0, 8.0], [16.1, 8.0], [16.2, 8.0], [16.3, 8.0], [16.4, 8.0], [16.5, 8.0], [16.6, 8.0], [16.7, 8.0], [16.8, 8.0], [16.9, 8.0], [17.0, 8.0], [17.1, 8.0], [17.2, 8.0], [17.3, 8.0], [17.4, 8.0], [17.5, 8.0], [17.6, 8.0], [17.7, 8.0], [17.8, 8.0], [17.9, 8.0], [18.0, 8.0], [18.1, 8.0], [18.2, 8.0], [18.3, 8.0], [18.4, 8.0], [18.5, 8.0], [18.6, 8.0], [18.7, 9.0], [18.8, 9.0], [18.9, 9.0], [19.0, 9.0], [19.1, 9.0], [19.2, 9.0], [19.3, 9.0], [19.4, 9.0], [19.5, 9.0], [19.6, 9.0], [19.7, 9.0], [19.8, 9.0], [19.9, 9.0], [20.0, 9.0], [20.1, 9.0], [20.2, 9.0], [20.3, 9.0], [20.4, 9.0], [20.5, 9.0], [20.6, 9.0], [20.7, 9.0], [20.8, 9.0], [20.9, 9.0], [21.0, 9.0], [21.1, 9.0], [21.2, 9.0], [21.3, 9.0], [21.4, 9.0], [21.5, 9.0], [21.6, 9.0], [21.7, 9.0], [21.8, 9.0], [21.9, 10.0], [22.0, 10.0], [22.1, 10.0], [22.2, 10.0], [22.3, 10.0], [22.4, 10.0], [22.5, 10.0], [22.6, 10.0], [22.7, 10.0], [22.8, 10.0], [22.9, 10.0], [23.0, 10.0], [23.1, 10.0], [23.2, 10.0], [23.3, 10.0], [23.4, 10.0], [23.5, 10.0], [23.6, 10.0], [23.7, 10.0], [23.8, 11.0], [23.9, 11.0], [24.0, 11.0], [24.1, 11.0], [24.2, 11.0], [24.3, 11.0], [24.4, 11.0], [24.5, 11.0], [24.6, 11.0], [24.7, 11.0], [24.8, 11.0], [24.9, 11.0], [25.0, 11.0], [25.1, 11.0], [25.2, 12.0], [25.3, 12.0], [25.4, 12.0], [25.5, 12.0], [25.6, 12.0], [25.7, 12.0], [25.8, 12.0], [25.9, 12.0], [26.0, 13.0], [26.1, 13.0], [26.2, 13.0], [26.3, 13.0], [26.4, 13.0], [26.5, 13.0], [26.6, 13.0], [26.7, 14.0], [26.8, 14.0], [26.9, 14.0], [27.0, 14.0], [27.1, 15.0], [27.2, 15.0], [27.3, 16.0], [27.4, 16.0], [27.5, 16.0], [27.6, 17.0], [27.7, 18.0], [27.8, 18.0], [27.9, 18.0], [28.0, 18.0], [28.1, 19.0], [28.2, 19.0], [28.3, 20.0], [28.4, 20.0], [28.5, 21.0], [28.6, 22.0], [28.7, 23.0], [28.8, 25.0], [28.9, 26.0], [29.0, 26.0], [29.1, 27.0], [29.2, 28.0], [29.3, 28.0], [29.4, 29.0], [29.5, 30.0], [29.6, 31.0], [29.7, 32.0], [29.8, 34.0], [29.9, 35.0], [30.0, 35.0], [30.1, 36.0], [30.2, 38.0], [30.3, 38.0], [30.4, 40.0], [30.5, 41.0], [30.6, 41.0], [30.7, 42.0], [30.8, 44.0], [30.9, 45.0], [31.0, 46.0], [31.1, 49.0], [31.2, 51.0], [31.3, 52.0], [31.4, 55.0], [31.5, 58.0], [31.6, 59.0], [31.7, 62.0], [31.8, 63.0], [31.9, 66.0], [32.0, 68.0], [32.1, 70.0], [32.2, 74.0], [32.3, 78.0], [32.4, 80.0], [32.5, 83.0], [32.6, 85.0], [32.7, 86.0], [32.8, 88.0], [32.9, 90.0], [33.0, 94.0], [33.1, 98.0], [33.2, 101.0], [33.3, 103.0], [33.4, 108.0], [33.5, 110.0], [33.6, 112.0], [33.7, 118.0], [33.8, 123.0], [33.9, 125.0], [34.0, 129.0], [34.1, 135.0], [34.2, 136.0], [34.3, 141.0], [34.4, 143.0], [34.5, 151.0], [34.6, 153.0], [34.7, 158.0], [34.8, 161.0], [34.9, 162.0], [35.0, 178.0], [35.1, 191.0], [35.2, 194.0], [35.3, 200.0], [35.4, 204.0], [35.5, 213.0], [35.6, 226.0], [35.7, 236.0], [35.8, 249.0], [35.9, 268.0], [36.0, 279.0], [36.1, 285.0], [36.2, 311.0], [36.3, 318.0], [36.4, 352.0], [36.5, 369.0], [36.6, 381.0], [36.7, 418.0], [36.8, 434.0], [36.9, 455.0], [37.0, 467.0], [37.1, 478.0], [37.2, 521.0], [37.3, 559.0], [37.4, 586.0], [37.5, 604.0], [37.6, 643.0], [37.7, 653.0], [37.8, 670.0], [37.9, 695.0], [38.0, 726.0], [38.1, 742.0], [38.2, 753.0], [38.3, 767.0], [38.4, 784.0], [38.5, 808.0], [38.6, 824.0], [38.7, 839.0], [38.8, 844.0], [38.9, 862.0], [39.0, 877.0], [39.1, 883.0], [39.2, 903.0], [39.3, 935.0], [39.4, 942.0], [39.5, 953.0], [39.6, 971.0], [39.7, 1030.0], [39.8, 1053.0], [39.9, 1066.0], [40.0, 1108.0], [40.1, 1141.0], [40.2, 1160.0], [40.3, 1174.0], [40.4, 1190.0], [40.5, 1207.0], [40.6, 1225.0], [40.7, 1238.0], [40.8, 1251.0], [40.9, 1264.0], [41.0, 1300.0], [41.1, 1320.0], [41.2, 1365.0], [41.3, 1383.0], [41.4, 1395.0], [41.5, 1415.0], [41.6, 1440.0], [41.7, 1449.0], [41.8, 1469.0], [41.9, 1492.0], [42.0, 1509.0], [42.1, 1520.0], [42.2, 1588.0], [42.3, 1607.0], [42.4, 1627.0], [42.5, 1649.0], [42.6, 1679.0], [42.7, 1708.0], [42.8, 1723.0], [42.9, 1754.0], [43.0, 1779.0], [43.1, 1792.0], [43.2, 1807.0], [43.3, 1813.0], [43.4, 1831.0], [43.5, 1854.0], [43.6, 1865.0], [43.7, 1906.0], [43.8, 1935.0], [43.9, 1951.0], [44.0, 1960.0], [44.1, 1968.0], [44.2, 1979.0], [44.3, 1999.0], [44.4, 2012.0], [44.5, 2037.0], [44.6, 2053.0], [44.7, 2076.0], [44.8, 2082.0], [44.9, 2092.0], [45.0, 2102.0], [45.1, 2135.0], [45.2, 2171.0], [45.3, 2190.0], [45.4, 2205.0], [45.5, 2208.0], [45.6, 2247.0], [45.7, 2256.0], [45.8, 2273.0], [45.9, 2296.0], [46.0, 2321.0], [46.1, 2343.0], [46.2, 2361.0], [46.3, 2387.0], [46.4, 2407.0], [46.5, 2416.0], [46.6, 2435.0], [46.7, 2454.0], [46.8, 2461.0], [46.9, 2486.0], [47.0, 2516.0], [47.1, 2527.0], [47.2, 2546.0], [47.3, 2564.0], [47.4, 2585.0], [47.5, 2589.0], [47.6, 2618.0], [47.7, 2629.0], [47.8, 2656.0], [47.9, 2688.0], [48.0, 2720.0], [48.1, 2725.0], [48.2, 2741.0], [48.3, 2757.0], [48.4, 2771.0], [48.5, 2791.0], [48.6, 2813.0], [48.7, 2828.0], [48.8, 2855.0], [48.9, 2863.0], [49.0, 2885.0], [49.1, 2913.0], [49.2, 2926.0], [49.3, 2944.0], [49.4, 2966.0], [49.5, 3007.0], [49.6, 3030.0], [49.7, 3064.0], [49.8, 3078.0], [49.9, 3134.0], [50.0, 3144.0], [50.1, 3174.0], [50.2, 3194.0], [50.3, 3223.0], [50.4, 3238.0], [50.5, 3250.0], [50.6, 3266.0], [50.7, 3280.0], [50.8, 3321.0], [50.9, 3332.0], [51.0, 3339.0], [51.1, 3344.0], [51.2, 3424.0], [51.3, 3453.0], [51.4, 3480.0], [51.5, 3494.0], [51.6, 3501.0], [51.7, 3514.0], [51.8, 3522.0], [51.9, 3542.0], [52.0, 3562.0], [52.1, 3581.0], [52.2, 3604.0], [52.3, 3638.0], [52.4, 3680.0], [52.5, 3688.0], [52.6, 3700.0], [52.7, 3748.0], [52.8, 3752.0], [52.9, 3796.0], [53.0, 3812.0], [53.1, 3819.0], [53.2, 3843.0], [53.3, 3873.0], [53.4, 3893.0], [53.5, 3927.0], [53.6, 3957.0], [53.7, 3982.0], [53.8, 4002.0], [53.9, 4013.0], [54.0, 4024.0], [54.1, 4044.0], [54.2, 4050.0], [54.3, 4080.0], [54.4, 4097.0], [54.5, 4115.0], [54.6, 4139.0], [54.7, 4151.0], [54.8, 4172.0], [54.9, 4190.0], [55.0, 4209.0], [55.1, 4232.0], [55.2, 4258.0], [55.3, 4265.0], [55.4, 4278.0], [55.5, 4291.0], [55.6, 4324.0], [55.7, 4342.0], [55.8, 4351.0], [55.9, 4367.0], [56.0, 4385.0], [56.1, 4390.0], [56.2, 4408.0], [56.3, 4447.0], [56.4, 4454.0], [56.5, 4462.0], [56.6, 4487.0], [56.7, 4526.0], [56.8, 4543.0], [56.9, 4560.0], [57.0, 4571.0], [57.1, 4582.0], [57.2, 4606.0], [57.3, 4623.0], [57.4, 4642.0], [57.5, 4667.0], [57.6, 4673.0], [57.7, 4695.0], [57.8, 4715.0], [57.9, 4728.0], [58.0, 4761.0], [58.1, 4776.0], [58.2, 4794.0], [58.3, 4813.0], [58.4, 4856.0], [58.5, 4893.0], [58.6, 4929.0], [58.7, 4989.0], [58.8, 5003.0], [58.9, 5024.0], [59.0, 5040.0], [59.1, 5062.0], [59.2, 5070.0], [59.3, 5077.0], [59.4, 5108.0], [59.5, 5138.0], [59.6, 5163.0], [59.7, 5184.0], [59.8, 5189.0], [59.9, 5212.0], [60.0, 5239.0], [60.1, 5258.0], [60.2, 5277.0], [60.3, 5292.0], [60.4, 5301.0], [60.5, 5326.0], [60.6, 5350.0], [60.7, 5361.0], [60.8, 5396.0], [60.9, 5420.0], [61.0, 5446.0], [61.1, 5460.0], [61.2, 5487.0], [61.3, 5492.0], [61.4, 5528.0], [61.5, 5569.0], [61.6, 5595.0], [61.7, 5605.0], [61.8, 5638.0], [61.9, 5653.0], [62.0, 5664.0], [62.1, 5671.0], [62.2, 5684.0], [62.3, 5708.0], [62.4, 5724.0], [62.5, 5746.0], [62.6, 5755.0], [62.7, 5805.0], [62.8, 5820.0], [62.9, 5827.0], [63.0, 5853.0], [63.1, 5868.0], [63.2, 5874.0], [63.3, 5887.0], [63.4, 5901.0], [63.5, 5916.0], [63.6, 5938.0], [63.7, 5951.0], [63.8, 5962.0], [63.9, 5980.0], [64.0, 6014.0], [64.1, 6055.0], [64.2, 6067.0], [64.3, 6081.0], [64.4, 6097.0], [64.5, 6109.0], [64.6, 6138.0], [64.7, 6166.0], [64.8, 6183.0], [64.9, 6207.0], [65.0, 6222.0], [65.1, 6229.0], [65.2, 6252.0], [65.3, 6269.0], [65.4, 6295.0], [65.5, 6304.0], [65.6, 6311.0], [65.7, 6326.0], [65.8, 6349.0], [65.9, 6360.0], [66.0, 6366.0], [66.1, 6383.0], [66.2, 6400.0], [66.3, 6415.0], [66.4, 6434.0], [66.5, 6456.0], [66.6, 6501.0], [66.7, 6521.0], [66.8, 6543.0], [66.9, 6549.0], [67.0, 6573.0], [67.1, 6592.0], [67.2, 6607.0], [67.3, 6611.0], [67.4, 6621.0], [67.5, 6634.0], [67.6, 6657.0], [67.7, 6664.0], [67.8, 6705.0], [67.9, 6720.0], [68.0, 6740.0], [68.1, 6787.0], [68.2, 6804.0], [68.3, 6829.0], [68.4, 6856.0], [68.5, 6878.0], [68.6, 6900.0], [68.7, 6907.0], [68.8, 6941.0], [68.9, 6959.0], [69.0, 6986.0], [69.1, 6999.0], [69.2, 7023.0], [69.3, 7034.0], [69.4, 7047.0], [69.5, 7052.0], [69.6, 7068.0], [69.7, 7072.0], [69.8, 7102.0], [69.9, 7108.0], [70.0, 7130.0], [70.1, 7143.0], [70.2, 7168.0], [70.3, 7188.0], [70.4, 7214.0], [70.5, 7240.0], [70.6, 7259.0], [70.7, 7274.0], [70.8, 7295.0], [70.9, 7312.0], [71.0, 7330.0], [71.1, 7357.0], [71.2, 7374.0], [71.3, 7397.0], [71.4, 7402.0], [71.5, 7437.0], [71.6, 7458.0], [71.7, 7472.0], [71.8, 7489.0], [71.9, 7515.0], [72.0, 7552.0], [72.1, 7576.0], [72.2, 7578.0], [72.3, 7598.0], [72.4, 7614.0], [72.5, 7642.0], [72.6, 7647.0], [72.7, 7653.0], [72.8, 7667.0], [72.9, 7686.0], [73.0, 7695.0], [73.1, 7714.0], [73.2, 7742.0], [73.3, 7760.0], [73.4, 7775.0], [73.5, 7802.0], [73.6, 7810.0], [73.7, 7823.0], [73.8, 7853.0], [73.9, 7867.0], [74.0, 7878.0], [74.1, 7902.0], [74.2, 7927.0], [74.3, 7932.0], [74.4, 7960.0], [74.5, 7987.0], [74.6, 8011.0], [74.7, 8022.0], [74.8, 8033.0], [74.9, 8054.0], [75.0, 8071.0], [75.1, 8098.0], [75.2, 8121.0], [75.3, 8131.0], [75.4, 8147.0], [75.5, 8172.0], [75.6, 8182.0], [75.7, 8189.0], [75.8, 8217.0], [75.9, 8228.0], [76.0, 8248.0], [76.1, 8284.0], [76.2, 8302.0], [76.3, 8312.0], [76.4, 8322.0], [76.5, 8331.0], [76.6, 8353.0], [76.7, 8369.0], [76.8, 8375.0], [76.9, 8388.0], [77.0, 8422.0], [77.1, 8428.0], [77.2, 8449.0], [77.3, 8472.0], [77.4, 8508.0], [77.5, 8520.0], [77.6, 8541.0], [77.7, 8545.0], [77.8, 8575.0], [77.9, 8601.0], [78.0, 8615.0], [78.1, 8636.0], [78.2, 8663.0], [78.3, 8676.0], [78.4, 8703.0], [78.5, 8737.0], [78.6, 8751.0], [78.7, 8777.0], [78.8, 8798.0], [78.9, 8813.0], [79.0, 8824.0], [79.1, 8840.0], [79.2, 8851.0], [79.3, 8882.0], [79.4, 8900.0], [79.5, 8923.0], [79.6, 8941.0], [79.7, 8950.0], [79.8, 8967.0], [79.9, 9000.0], [80.0, 9013.0], [80.1, 9019.0], [80.2, 9035.0], [80.3, 9041.0], [80.4, 9080.0], [80.5, 9087.0], [80.6, 9109.0], [80.7, 9122.0], [80.8, 9129.0], [80.9, 9159.0], [81.0, 9184.0], [81.1, 9195.0], [81.2, 9239.0], [81.3, 9260.0], [81.4, 9272.0], [81.5, 9284.0], [81.6, 9296.0], [81.7, 9325.0], [81.8, 9344.0], [81.9, 9367.0], [82.0, 9385.0], [82.1, 9394.0], [82.2, 9430.0], [82.3, 9442.0], [82.4, 9451.0], [82.5, 9466.0], [82.6, 9485.0], [82.7, 9504.0], [82.8, 9519.0], [82.9, 9530.0], [83.0, 9550.0], [83.1, 9589.0], [83.2, 9615.0], [83.3, 9657.0], [83.4, 9672.0], [83.5, 9695.0], [83.6, 9704.0], [83.7, 9730.0], [83.8, 9758.0], [83.9, 9768.0], [84.0, 9779.0], [84.1, 9799.0], [84.2, 9816.0], [84.3, 9842.0], [84.4, 9852.0], [84.5, 9858.0], [84.6, 9875.0], [84.7, 9878.0], [84.8, 9901.0], [84.9, 9906.0], [85.0, 9923.0], [85.1, 9931.0], [85.2, 9949.0], [85.3, 9973.0], [85.4, 9995.0], [85.5, 10004.0], [85.6, 10015.0], [85.7, 10043.0], [85.8, 10066.0], [85.9, 10080.0], [86.0, 10090.0], [86.1, 10103.0], [86.2, 10121.0], [86.3, 10132.0], [86.4, 10152.0], [86.5, 10179.0], [86.6, 10202.0], [86.7, 10212.0], [86.8, 10227.0], [86.9, 10247.0], [87.0, 10267.0], [87.1, 10289.0], [87.2, 10311.0], [87.3, 10332.0], [87.4, 10353.0], [87.5, 10357.0], [87.6, 10370.0], [87.7, 10397.0], [87.8, 10428.0], [87.9, 10442.0], [88.0, 10459.0], [88.1, 10493.0], [88.2, 10497.0], [88.3, 10520.0], [88.4, 10540.0], [88.5, 10553.0], [88.6, 10570.0], [88.7, 10585.0], [88.8, 10594.0], [88.9, 10607.0], [89.0, 10644.0], [89.1, 10650.0], [89.2, 10673.0], [89.3, 10704.0], [89.4, 10715.0], [89.5, 10721.0], [89.6, 10747.0], [89.7, 10753.0], [89.8, 10761.0], [89.9, 10767.0], [90.0, 10790.0], [90.1, 10812.0], [90.2, 10833.0], [90.3, 10876.0], [90.4, 10891.0], [90.5, 10909.0], [90.6, 10923.0], [90.7, 10942.0], [90.8, 10953.0], [90.9, 10966.0], [91.0, 10989.0], [91.1, 11004.0], [91.2, 11010.0], [91.3, 11027.0], [91.4, 11041.0], [91.5, 11060.0], [91.6, 11070.0], [91.7, 11107.0], [91.8, 11119.0], [91.9, 11133.0], [92.0, 11147.0], [92.1, 11159.0], [92.2, 11171.0], [92.3, 11179.0], [92.4, 11211.0], [92.5, 11216.0], [92.6, 11227.0], [92.7, 11250.0], [92.8, 11268.0], [92.9, 11281.0], [93.0, 11311.0], [93.1, 11362.0], [93.2, 11374.0], [93.3, 11391.0], [93.4, 11396.0], [93.5, 11424.0], [93.6, 11437.0], [93.7, 11492.0], [93.8, 11512.0], [93.9, 11533.0], [94.0, 11539.0], [94.1, 11587.0], [94.2, 11618.0], [94.3, 11640.0], [94.4, 11665.0], [94.5, 11709.0], [94.6, 11724.0], [94.7, 11747.0], [94.8, 11773.0], [94.9, 11800.0], [95.0, 11826.0], [95.1, 11838.0], [95.2, 11865.0], [95.3, 11879.0], [95.4, 11937.0], [95.5, 11953.0], [95.6, 11963.0], [95.7, 12011.0], [95.8, 12020.0], [95.9, 12026.0], [96.0, 12067.0], [96.1, 12116.0], [96.2, 12146.0], [96.3, 12149.0], [96.4, 12156.0], [96.5, 12182.0], [96.6, 12212.0], [96.7, 12233.0], [96.8, 12254.0], [96.9, 12266.0], [97.0, 12273.0], [97.1, 12312.0], [97.2, 12321.0], [97.3, 12340.0], [97.4, 12350.0], [97.5, 12382.0], [97.6, 12400.0], [97.7, 12434.0], [97.8, 12470.0], [97.9, 12504.0], [98.0, 12527.0], [98.1, 12545.0], [98.2, 12568.0], [98.3, 12573.0], [98.4, 12586.0], [98.5, 12626.0], [98.6, 12629.0], [98.7, 12657.0], [98.8, 12695.0], [98.9, 12729.0], [99.0, 12754.0], [99.1, 12765.0], [99.2, 12883.0], [99.3, 12934.0], [99.4, 13036.0], [99.5, 13075.0], [99.6, 13190.0], [99.7, 13200.0], [99.8, 13419.0], [99.9, 13744.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1328.0, "series": [{"data": [[0.0, 1328.0], [100.0, 84.0], [200.0, 34.0], [300.0, 19.0], [400.0, 21.0], [500.0, 13.0], [600.0, 19.0], [700.0, 22.0], [800.0, 27.0], [900.0, 20.0], [1000.0, 12.0], [1100.0, 20.0], [1200.0, 21.0], [1300.0, 17.0], [1400.0, 21.0], [1500.0, 12.0], [1600.0, 18.0], [1700.0, 19.0], [1800.0, 21.0], [1900.0, 25.0], [2000.0, 27.0], [2100.0, 14.0], [2200.0, 23.0], [2300.0, 18.0], [2400.0, 23.0], [2500.0, 24.0], [2600.0, 17.0], [2800.0, 20.0], [2700.0, 22.0], [2900.0, 19.0], [3000.0, 13.0], [3100.0, 17.0], [3200.0, 20.0], [3300.0, 16.0], [3400.0, 18.0], [3500.0, 24.0], [3700.0, 14.0], [3600.0, 16.0], [3800.0, 20.0], [3900.0, 14.0], [4000.0, 25.0], [4100.0, 20.0], [4200.0, 26.0], [4300.0, 25.0], [4400.0, 17.0], [4600.0, 21.0], [4500.0, 23.0], [4800.0, 12.0], [4700.0, 20.0], [5000.0, 24.0], [5100.0, 19.0], [4900.0, 10.0], [5200.0, 22.0], [5300.0, 17.0], [5400.0, 20.0], [5600.0, 24.0], [5500.0, 14.0], [5800.0, 27.0], [5700.0, 17.0], [6000.0, 18.0], [6100.0, 18.0], [5900.0, 24.0], [6200.0, 23.0], [6300.0, 30.0], [6500.0, 21.0], [6600.0, 27.0], [6400.0, 16.0], [6800.0, 16.0], [6700.0, 16.0], [6900.0, 21.0], [7000.0, 27.0], [7100.0, 24.0], [7300.0, 23.0], [7400.0, 20.0], [7200.0, 17.0], [7500.0, 18.0], [7600.0, 28.0], [7900.0, 20.0], [7700.0, 18.0], [7800.0, 24.0], [8000.0, 21.0], [8100.0, 25.0], [8200.0, 17.0], [8300.0, 31.0], [8700.0, 18.0], [8500.0, 21.0], [8600.0, 19.0], [8400.0, 17.0], [8800.0, 23.0], [9000.0, 28.0], [9100.0, 22.0], [9200.0, 19.0], [8900.0, 20.0], [9400.0, 21.0], [9500.0, 19.0], [9600.0, 17.0], [9300.0, 21.0], [9700.0, 22.0], [10000.0, 26.0], [9800.0, 25.0], [9900.0, 28.0], [10100.0, 19.0], [10200.0, 23.0], [10500.0, 24.0], [10700.0, 31.0], [10600.0, 17.0], [10300.0, 23.0], [10400.0, 21.0], [11000.0, 24.0], [11100.0, 27.0], [10900.0, 25.0], [10800.0, 16.0], [11200.0, 25.0], [11700.0, 17.0], [11400.0, 15.0], [11500.0, 14.0], [11300.0, 18.0], [11600.0, 13.0], [11800.0, 18.0], [12200.0, 20.0], [11900.0, 13.0], [12000.0, 16.0], [12100.0, 20.0], [12500.0, 24.0], [12300.0, 21.0], [12600.0, 13.0], [12400.0, 12.0], [12700.0, 13.0], [13000.0, 8.0], [13300.0, 1.0], [13100.0, 6.0], [12800.0, 4.0], [13200.0, 3.0], [12900.0, 4.0], [13400.0, 3.0], [13600.0, 1.0], [13700.0, 1.0], [14100.0, 1.0], [14200.0, 1.0], [13900.0, 1.0], [15100.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 15100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 193.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2322.0, "series": [{"data": [[0.0, 1486.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 193.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2322.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.040139616055841, "minX": 1.69997368E12, "maxY": 1824.5070422535214, "series": [{"data": [[1.699973698E12, 325.10884353741505], [1.699973697E12, 479.5679012345682], [1.69997368E12, 9.43055555555556], [1.699973699E12, 171.22360248447217], [1.6999737E12, 45.88888888888887], [1.699973682E12, 25.171814671814683], [1.699973681E12, 6.040139616055841], [1.699973685E12, 1008.358108108108], [1.699973683E12, 259.1346153846153], [1.699973684E12, 635.4635761589402], [1.699973687E12, 1706.5772357723579], [1.699973688E12, 1824.5070422535214], [1.699973686E12, 1343.4563758389268], [1.69997369E12, 1532.5942028985507], [1.699973689E12, 1677.6184210526314], [1.699973693E12, 1079.55294117647], [1.699973691E12, 1389.080536912753], [1.699973692E12, 1239.58], [1.699973695E12, 790.0827586206897], [1.699973696E12, 639.1082802547774], [1.699973694E12, 928.5681818181815]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.6999737E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7.907103825136614, "minX": 1.0, "maxY": 13744.0, "series": [{"data": [[2.0, 368.6176470588235], [3.0, 7.951456310679614], [4.0, 164.0745341614907], [5.0, 7.907103825136614], [6.0, 149.98882681564248], [7.0, 82.33532934131736], [8.0, 108.64800000000001], [9.0, 167.38271604938274], [10.0, 271.63829787234044], [11.0, 376.38888888888886], [12.0, 1110.7499999999998], [13.0, 913.0714285714286], [14.0, 2497.4], [15.0, 1340.7000000000003], [16.0, 2138.166666666667], [17.0, 1884.2857142857142], [18.0, 1607.0], [19.0, 66.66666666666667], [20.0, 60.2], [21.0, 2384.2727272727275], [22.0, 6545.0], [23.0, 6199.0], [24.0, 6246.5], [25.0, 4403.666666666667], [26.0, 133.0], [27.0, 28.333333333333332], [28.0, 3128.25], [29.0, 2114.1666666666665], [30.0, 2747.0714285714284], [31.0, 71.66666666666667], [33.0, 2629.6], [32.0, 4890.2], [34.0, 63.0], [35.0, 8534.666666666666], [37.0, 1780.7142857142858], [36.0, 4256.0], [38.0, 4084.3333333333335], [39.0, 3094.5], [41.0, 6307.25], [40.0, 58.333333333333336], [42.0, 2514.8], [43.0, 12254.0], [45.0, 40.333333333333336], [44.0, 12233.0], [46.0, 4212.5], [47.0, 31.0], [49.0, 44.0], [48.0, 5035.6], [51.0, 42.0], [50.0, 5292.2], [52.0, 5201.0], [53.0, 3251.5], [55.0, 2356.833333333333], [54.0, 4290.666666666667], [57.0, 1219.3636363636365], [56.0, 161.0], [58.0, 3647.5714285714284], [59.0, 3219.25], [61.0, 12323.5], [63.0, 6251.0], [62.0, 13744.0], [64.0, 4310.333333333333], [66.0, 4188.666666666666], [67.0, 3212.25], [65.0, 12156.0], [68.0, 2291.333333333333], [71.0, 6316.25], [70.0, 13190.0], [72.0, 118.0], [75.0, 4258.666666666666], [74.0, 6255.166666666667], [76.0, 2940.0], [79.0, 12148.0], [78.0, 12186.0], [77.0, 12267.0], [81.0, 4154.333333333334], [82.0, 12883.0], [80.0, 12331.0], [86.0, 3192.0], [84.0, 6362.5], [87.0, 6506.5], [85.0, 13360.0], [88.0, 161.66666666666666], [90.0, 9191.5], [95.0, 1689.25], [94.0, 12134.0], [93.0, 12142.0], [92.0, 12585.0], [96.0, 4211.0], [97.0, 153.0], [98.0, 12589.0], [101.0, 6143.0], [102.0, 12218.0], [100.0, 12709.0], [106.0, 196.0], [107.0, 8448.0], [105.0, 12765.0], [104.0, 12330.0], [108.0, 2717.0], [109.0, 3153.0], [111.0, 4172.0], [110.0, 6470.5], [113.0, 8766.666666666666], [115.0, 12570.0], [114.0, 12389.0], [119.0, 12261.0], [118.0, 11942.0], [117.0, 12695.5], [123.0, 4239.0], [122.0, 2676.2], [121.0, 4009.3333333333335], [120.0, 12487.0], [124.0, 4107.333333333334], [125.0, 4269.333333333333], [127.0, 12026.0], [126.0, 12564.0], [133.0, 2690.2], [132.0, 5945.5], [134.0, 7637.5], [135.0, 3267.5], [131.0, 11800.0], [130.0, 13190.0], [129.0, 12029.0], [128.0, 12188.0], [136.0, 143.5], [137.0, 130.5], [140.0, 4419.333333333334], [143.0, 7980.666666666667], [141.0, 12271.0], [139.0, 11865.0], [138.0, 11932.666666666666], [144.0, 4166.0], [146.0, 3036.25], [145.0, 2515.2], [149.0, 6709.5], [148.0, 6035.5], [151.0, 12110.0], [150.0, 11828.0], [147.0, 12081.0], [158.0, 11838.0], [157.0, 11902.0], [156.0, 11734.0], [155.0, 12022.0], [154.0, 12021.0], [153.0, 12019.0], [152.0, 12011.0], [167.0, 1705.888888888889], [166.0, 3244.5], [165.0, 4270.0], [164.0, 11593.0], [163.0, 11777.0], [162.0, 11608.0], [161.0, 11715.333333333334], [168.0, 6447.0], [175.0, 12645.0], [174.0, 11751.0], [171.0, 11953.0], [170.0, 12063.5], [182.0, 304.0], [181.0, 5990.0], [183.0, 5799.5], [180.0, 11995.0], [179.0, 11826.0], [178.0, 11747.0], [177.0, 11737.0], [176.0, 12116.0], [185.0, 5874.0], [188.0, 2119.1666666666665], [187.0, 6119.5], [190.0, 13302.0], [189.0, 12255.0], [186.0, 12057.0], [184.0, 12143.5], [195.0, 21.0], [199.0, 5767.5], [198.0, 6041.0], [197.0, 11665.0], [196.0, 11745.5], [194.0, 11812.0], [193.0, 12254.0], [192.0, 12083.0], [200.0, 118.0], [207.0, 12550.0], [206.0, 11378.0], [205.0, 13667.0], [203.0, 12314.0], [202.0, 11428.0], [201.0, 11454.5], [213.0, 3030.5], [212.0, 2008.5], [215.0, 12148.0], [214.0, 11869.0], [211.0, 11350.0], [210.0, 11525.0], [209.0, 11472.5], [208.0, 11943.0], [223.0, 4491.666666666667], [222.0, 11281.0], [221.0, 12235.0], [219.0, 11274.5], [217.0, 11681.0], [216.0, 11218.0], [225.0, 5741.5], [226.0, 5892.0], [228.0, 3996.0], [231.0, 11475.0], [229.0, 11268.0], [227.0, 12545.0], [224.0, 11254.0], [235.0, 5943.0], [238.0, 5703.5], [239.0, 11231.0], [237.0, 11209.0], [236.0, 11492.0], [234.0, 11304.0], [232.0, 13421.0], [241.0, 4577.2], [240.0, 135.0], [245.0, 3845.3333333333335], [246.0, 6041.0], [247.0, 5623.5], [244.0, 11584.5], [242.0, 11232.0], [249.0, 4459.333333333334], [255.0, 158.0], [254.0, 11311.0], [253.0, 12423.0], [252.0, 11493.0], [251.0, 11165.0], [250.0, 11314.0], [248.0, 12130.0], [270.0, 10989.0], [256.0, 8162.333333333334], [257.0, 11057.0], [259.0, 11070.0], [258.0, 11061.0], [264.0, 5914.0], [267.0, 7660.333333333333], [271.0, 5865.0], [269.0, 11268.0], [268.0, 11381.0], [265.0, 11010.0], [263.0, 11171.0], [262.0, 11165.0], [261.0, 11041.0], [260.0, 12626.0], [286.0, 11004.0], [278.0, 5906.0], [277.0, 11126.0], [276.0, 11258.0], [279.0, 585.0], [280.0, 5698.5], [282.0, 5663.0], [287.0, 5657.0], [285.0, 11274.0], [284.0, 10996.0], [275.0, 11216.0], [274.0, 12015.0], [273.0, 11722.0], [272.0, 11054.0], [281.0, 11207.0], [303.0, 8085.333333333333], [288.0, 5794.0], [291.0, 11271.5], [289.0, 10876.0], [300.0, 5846.0], [301.0, 11535.0], [299.0, 11421.0], [298.0, 11952.0], [297.0, 11065.0], [296.0, 11011.0], [295.0, 10886.0], [294.0, 11391.0], [293.0, 10885.0], [292.0, 10889.0], [316.0, 4231.333333333334], [312.0, 7753.666666666667], [305.0, 4016.6666666666665], [304.0, 10813.0], [307.0, 11508.0], [310.0, 11159.0], [309.0, 10802.0], [308.0, 10984.0], [314.0, 5573.0], [313.0, 5800.5], [315.0, 5815.5], [319.0, 5617.5], [318.0, 10755.0], [317.0, 10849.0], [334.0, 11533.0], [327.0, 5510.5], [323.0, 528.0], [322.0, 11012.0], [321.0, 10761.0], [320.0, 10992.0], [326.0, 5814.0], [325.0, 10967.0], [324.0, 10763.5], [335.0, 11061.0], [329.0, 10734.0], [328.0, 10908.0], [333.0, 10937.0], [332.0, 10717.0], [331.0, 11246.0], [330.0, 10747.0], [348.0, 11457.0], [336.0, 678.0], [339.0, 5524.0], [338.0, 10704.0], [337.0, 11053.0], [342.0, 7624.666666666667], [340.0, 11173.0], [343.0, 5799.5], [347.0, 5951.5], [350.0, 10644.0], [349.0, 11872.0], [346.0, 10994.0], [344.0, 10652.0], [366.0, 10750.0], [356.0, 3270.25], [357.0, 11763.0], [358.0, 6095.5], [365.0, 5832.5], [367.0, 5974.0], [364.0, 11346.0], [359.0, 10719.0], [353.0, 11374.0], [352.0, 11252.0], [355.0, 11114.0], [354.0, 11028.0], [362.0, 11008.0], [361.0, 10585.0], [360.0, 10592.0], [382.0, 5786.25], [370.0, 5692.5], [369.0, 6066.0], [368.0, 10786.0], [375.0, 10942.0], [374.0, 10869.0], [373.0, 10717.0], [372.0, 10594.0], [371.0, 5631.0], [383.0, 10553.0], [380.0, 10540.0], [379.0, 10909.0], [378.0, 11005.0], [377.0, 11396.0], [376.0, 10704.0], [398.0, 7502.666666666667], [390.0, 4053.3333333333335], [389.0, 10532.0], [388.0, 10644.0], [394.0, 5844.5], [399.0, 11495.0], [396.0, 10429.0], [387.0, 10495.0], [386.0, 10493.0], [385.0, 10473.0], [384.0, 11048.0], [395.0, 10833.0], [393.0, 10644.0], [392.0, 10493.0], [391.0, 11144.0], [415.0, 10332.0], [411.0, 5590.0], [413.0, 5717.5], [414.0, 10353.0], [412.0, 10520.0], [403.0, 10459.0], [402.0, 10397.0], [401.0, 11713.0], [400.0, 11227.0], [410.0, 10370.0], [409.0, 11640.0], [408.0, 10751.0], [407.0, 10721.0], [406.0, 10487.5], [404.0, 11119.0], [431.0, 10282.0], [417.0, 5505.0], [416.0, 5813.5], [422.0, 10281.0], [421.0, 10507.0], [420.0, 10359.0], [425.0, 4086.0], [424.0, 10366.5], [430.0, 10263.0], [429.0, 10891.0], [428.0, 11656.0], [419.0, 11107.0], [418.0, 10555.0], [427.0, 10284.0], [426.0, 10332.0], [444.0, 5585.0], [433.0, 4162.666666666666], [432.0, 6190.5], [434.0, 5398.5], [435.0, 10945.0], [436.0, 5811.0], [438.0, 10874.5], [443.0, 7489.666666666667], [442.0, 643.0], [445.0, 3820.3333333333335], [447.0, 10597.0], [441.0, 11123.0], [440.0, 10574.0], [446.0, 10570.0], [462.0, 11533.0], [449.0, 6527.0], [455.0, 5696.5], [448.0, 10300.0], [454.0, 10176.0], [453.0, 10179.0], [452.0, 10419.0], [456.0, 4152.666666666666], [458.0, 4189.666666666666], [457.0, 10488.0], [463.0, 10983.0], [461.0, 10767.0], [460.0, 10369.0], [451.0, 12573.0], [450.0, 11060.0], [459.0, 10246.0], [478.0, 7427.333333333333], [477.0, 981.0], [479.0, 10503.0], [476.0, 10089.0], [475.0, 10247.0], [474.0, 10712.0], [473.0, 11955.0], [472.0, 10214.0], [471.0, 10119.0], [465.0, 10126.0], [467.0, 10731.0], [466.0, 10289.0], [470.0, 10202.0], [469.0, 10220.0], [468.0, 10548.0], [494.0, 10083.0], [480.0, 5481.5], [481.0, 5683.5], [483.0, 10077.0], [482.0, 11166.0], [486.0, 797.0], [485.0, 11362.0], [484.0, 10055.0], [487.0, 10306.0], [489.0, 4008.6666666666665], [488.0, 5645.0], [491.0, 5495.5], [490.0, 10000.0], [495.0, 10311.0], [493.0, 10267.0], [492.0, 10544.0], [510.0, 10812.0], [500.0, 4330.333333333334], [501.0, 5532.5], [511.0, 9933.0], [509.0, 9926.0], [508.0, 9923.0], [503.0, 10190.0], [499.0, 10004.0], [498.0, 10530.0], [497.0, 10342.0], [496.0, 11557.0], [502.0, 10196.0], [507.0, 10439.0], [506.0, 9995.0], [505.0, 10072.0], [504.0, 9978.0], [518.0, 12224.0], [514.0, 11154.0], [512.0, 10939.0], [516.0, 9963.0], [526.0, 10121.0], [536.0, 10229.0], [538.0, 10456.0], [540.0, 10066.0], [528.0, 9853.0], [542.0, 9816.0], [522.0, 2886.2], [520.0, 5889.5], [524.0, 3940.0], [530.0, 4013.0], [534.0, 10664.0], [532.0, 9904.5], [546.0, 769.0], [570.0, 9913.0], [544.0, 10644.0], [556.0, 9767.0], [554.0, 10080.0], [552.0, 11774.0], [562.0, 3172.25], [560.0, 3755.3333333333335], [564.0, 4207.666666666666], [566.0, 9989.0], [574.0, 9669.0], [572.0, 9709.5], [568.0, 10011.0], [550.0, 9925.0], [548.0, 10643.0], [578.0, 9681.0], [604.0, 9704.0], [576.0, 9648.0], [580.0, 10341.0], [582.0, 9773.0], [600.0, 9546.0], [584.0, 2398.285714285714], [586.0, 5519.5], [588.0, 9873.0], [590.0, 9758.0], [602.0, 10357.0], [592.0, 9695.0], [594.0, 11114.0], [596.0, 9589.0], [598.0, 10015.0], [606.0, 10318.0], [610.0, 1289.0], [608.0, 5502.5], [612.0, 9523.0], [614.0, 9583.0], [632.0, 9444.0], [634.0, 9438.0], [618.0, 5182.5], [620.0, 9876.0], [622.0, 9510.0], [616.0, 2626.0], [624.0, 9755.0], [630.0, 9723.0], [638.0, 9621.0], [636.0, 9702.0], [644.0, 5272.5], [668.0, 4070.0], [640.0, 3943.0], [654.0, 10113.0], [652.0, 9832.0], [650.0, 9431.0], [648.0, 10010.0], [642.0, 4113.666666666666], [666.0, 3272.75], [664.0, 5132.5], [646.0, 9393.0], [670.0, 5217.0], [656.0, 9395.0], [658.0, 11009.0], [660.0, 9411.0], [662.0, 9615.0], [676.0, 10602.0], [698.0, 1493.0], [672.0, 9385.0], [684.0, 10377.0], [682.0, 9271.0], [680.0, 9900.0], [678.0, 5546.5], [700.0, 5085.0], [696.0, 5177.0], [688.0, 9602.0], [690.0, 10205.5], [702.0, 5391.5], [704.0, 4739.6], [732.0, 9654.0], [718.0, 9296.0], [716.0, 9197.0], [714.0, 9151.0], [712.0, 9110.0], [706.0, 5282.5], [710.0, 9239.0], [728.0, 9852.0], [720.0, 9011.0], [724.0, 9034.0], [726.0, 9035.0], [734.0, 9000.0], [730.0, 9809.0], [760.0, 8842.0], [764.0, 5399.0], [762.0, 5369.0], [766.0, 8819.0], [742.0, 9697.0], [740.0, 9472.5], [738.0, 8959.0], [736.0, 9304.0], [750.0, 10565.5], [748.0, 9195.0], [746.0, 9901.0], [744.0, 9372.0], [758.0, 9159.0], [756.0, 9315.0], [754.0, 9035.0], [752.0, 8909.0], [772.0, 1418.0], [792.0, 4026.3333333333335], [770.0, 5389.0], [774.0, 8891.0], [776.0, 5439.0], [778.0, 9260.0], [782.0, 9018.0], [794.0, 9441.0], [790.0, 5190.5], [796.0, 5512.0], [784.0, 9257.0], [786.0, 8957.0], [788.0, 8923.0], [798.0, 9041.0], [804.0, 8663.0], [826.0, 8595.0], [830.0, 8777.0], [800.0, 4931.0], [806.0, 5396.0], [802.0, 8870.0], [824.0, 8544.0], [808.0, 5349.5], [812.0, 8604.0], [814.0, 8758.5], [822.0, 8620.0], [820.0, 4575.4], [816.0, 8586.0], [818.0, 8882.0], [828.0, 8730.0], [838.0, 8476.0], [848.0, 5300.0], [836.0, 5197.0], [856.0, 9049.0], [858.0, 8542.0], [860.0, 9039.0], [862.0, 8548.5], [832.0, 8508.0], [834.0, 8634.0], [846.0, 9686.5], [844.0, 8353.0], [842.0, 8517.0], [840.0, 10715.0], [850.0, 5097.5], [852.0, 3843.0], [854.0, 5361.5], [866.0, 8768.0], [890.0, 4888.0], [864.0, 8536.0], [870.0, 5769.0], [868.0, 8382.0], [888.0, 10755.0], [878.0, 5115.5], [876.0, 8321.0], [874.0, 8212.0], [872.0, 8283.5], [884.0, 6010.666666666667], [886.0, 8172.0], [880.0, 8441.0], [882.0, 9093.0], [894.0, 8652.0], [892.0, 8967.0], [922.0, 2296.0], [926.0, 4738.5], [906.0, 5480.0], [904.0, 8147.0], [908.0, 8307.0], [896.0, 8181.0], [910.0, 9174.0], [916.0, 3954.3333333333335], [918.0, 9181.0], [914.0, 5058.5], [920.0, 8295.0], [900.0, 8840.0], [898.0, 8503.0], [924.0, 9063.0], [912.0, 8464.0], [932.0, 8012.0], [928.0, 1521.0], [942.0, 5101.0], [940.0, 7960.0], [938.0, 8322.0], [936.0, 8405.0], [944.0, 5512.0], [952.0, 5333.0], [934.0, 8798.0], [930.0, 8033.0], [950.0, 4843.5], [948.0, 8023.0], [946.0, 7988.0], [954.0, 6083.5], [956.0, 8153.0], [958.0, 8187.0], [964.0, 9008.0], [990.0, 7649.0], [962.0, 7896.0], [960.0, 7854.0], [974.0, 8107.0], [970.0, 8248.0], [966.0, 5298.0], [984.0, 7738.0], [986.0, 7878.0], [982.0, 7869.0], [976.0, 7878.0], [978.0, 8452.0], [980.0, 7923.0], [994.0, 3277.0], [996.0, 5354.5], [992.0, 3735.6666666666665], [998.0, 7614.0], [1016.0, 7740.0], [1018.0, 7792.0], [1020.0, 7987.0], [1000.0, 8226.0], [1002.0, 8132.0], [1004.0, 8545.0], [1006.0, 7581.0], [1022.0, 3804.0], [1014.0, 7570.0], [1012.0, 8472.0], [1010.0, 8189.0], [1008.0, 7601.0], [1036.0, 7660.0], [1028.0, 3873.666666666667], [1024.0, 7530.0], [1032.0, 7577.0], [1076.0, 8067.0], [1072.0, 7301.0], [1080.0, 7677.5], [1068.0, 4741.5], [1064.0, 7556.0], [1060.0, 7386.0], [1056.0, 7399.0], [1084.0, 4920.5], [1052.0, 3881.0], [1048.0, 7402.0], [1044.0, 7872.0], [1040.0, 7748.0], [1092.0, 4720.5], [1096.0, 7277.0], [1088.0, 7266.0], [1116.0, 4854.0], [1108.0, 5071.0], [1112.0, 7162.0], [1104.0, 6174.5], [1100.0, 5242.0], [1132.0, 3218.75], [1128.0, 7334.0], [1124.0, 7488.0], [1120.0, 7972.5], [1148.0, 5099.5], [1140.0, 5133.5], [1144.0, 10018.0], [1136.0, 7097.5], [1156.0, 7179.0], [1160.0, 5106.5], [1152.0, 7749.0], [1180.0, 7171.0], [1176.0, 7449.0], [1172.0, 7050.0], [1164.0, 4956.0], [1200.0, 7586.0], [1188.0, 4124.0], [1184.0, 6849.0], [1208.0, 6999.0], [1212.0, 6748.5], [1204.0, 7913.0], [1192.0, 7493.0], [1196.0, 7071.0], [1168.0, 2399.5], [1216.0, 6720.0], [1268.0, 6549.0], [1276.0, 7274.0], [1244.0, 3846.333333333333], [1240.0, 7517.5], [1232.0, 6717.0], [1220.0, 7357.0], [1224.0, 6728.0], [1228.0, 7754.0], [1260.0, 7055.0], [1248.0, 8164.0], [1252.0, 6793.0], [1256.0, 6521.0], [1272.0, 6907.0], [1264.0, 8217.0], [1288.0, 4779.5], [1280.0, 4782.5], [1308.0, 6618.0], [1304.0, 6366.0], [1296.0, 6300.0], [1284.0, 3153.2], [1336.0, 6568.0], [1332.0, 6293.0], [1328.0, 7468.0], [1292.0, 6531.0], [1312.0, 5215.666666666667], [1316.0, 4011.0], [1324.0, 4328.5], [1320.0, 6229.0], [1352.0, 4545.0], [1356.0, 5327.666666666667], [1344.0, 3656.25], [1372.0, 6671.0], [1348.0, 4603.0], [1392.0, 2565.5], [1396.0, 4597.5], [1404.0, 3660.333333333333], [1400.0, 5853.0], [1388.0, 4481.0], [1380.0, 3968.0], [1376.0, 6020.0], [1384.0, 5951.0], [1368.0, 5503.0], [1364.0, 8052.0], [1360.0, 6843.0], [1464.0, 6750.0], [1456.0, 5492.0], [1436.0, 4204.0], [1424.0, 4308.0], [1428.0, 4624.0], [1432.0, 5889.0], [1448.0, 4139.5], [1440.0, 6201.0], [1444.0, 5745.0], [1468.0, 5827.0], [1460.0, 3902.8], [1408.0, 5825.0], [1412.0, 5866.0], [1416.0, 6207.0], [1420.0, 5745.0], [1452.0, 5634.0], [1480.0, 4505.5], [1528.0, 4436.0], [1476.0, 5788.0], [1472.0, 5503.0], [1520.0, 5641.5], [1484.0, 5701.0], [1524.0, 5655.0], [1500.0, 3988.5], [1496.0, 5616.0], [1492.0, 5638.0], [1488.0, 5870.0], [1508.0, 4398.0], [1532.0, 5961.0], [1504.0, 5361.0], [1512.0, 3600.2], [1516.0, 5975.0], [1544.0, 5258.0], [1560.0, 4305.0], [1552.0, 5212.0], [1556.0, 6269.0], [1588.0, 2944.0], [1584.0, 5845.0], [1548.0, 5241.0], [1540.0, 5708.0], [1536.0, 5652.0], [1564.0, 5306.0], [1592.0, 5569.0], [1596.0, 6064.0], [1580.0, 5066.0], [1576.0, 5301.0], [1572.0, 5415.0], [1568.0, 5163.0], [1628.0, 5605.0], [1612.0, 4773.0], [1608.0, 5449.0], [1604.0, 5184.0], [1652.0, 4991.0], [1620.0, 3888.0], [1616.0, 5756.0], [1624.0, 3854.0], [1600.0, 4981.0], [1644.0, 4649.0], [1640.0, 4733.0], [1632.0, 4671.0], [1636.0, 4673.0], [1660.0, 4177.0], [1656.0, 3786.5], [1676.0, 4454.0], [1664.0, 4239.666666666667], [1672.0, 5427.0], [1668.0, 4716.0], [1712.0, 4278.0], [1716.0, 4575.0], [1720.0, 4859.0], [1724.0, 4339.0], [1696.0, 4412.0], [1692.0, 3924.0], [1680.0, 4408.0], [1700.0, 4453.5], [1704.0, 3982.6666666666665], [1708.0, 4265.666666666667], [1784.0, 3876.6666666666665], [1736.0, 4416.0], [1732.0, 3496.4], [1728.0, 4784.0], [1760.0, 4178.0], [1764.0, 4075.0], [1788.0, 3578.0], [1780.0, 4020.0], [1776.0, 4003.0], [1740.0, 4539.5], [1772.0, 4923.0], [1748.0, 5347.0], [1744.0, 5750.0], [1752.0, 4053.0], [1756.0, 4367.0], [1804.0, 3813.0], [1796.0, 3699.5], [1792.0, 4466.333333333333], [1820.0, 3748.0], [1800.0, 4209.0], [1840.0, 3927.0], [1844.0, 3829.0], [1852.0, 5297.0], [1824.0, 4390.0], [1828.0, 3894.0], [1812.0, 3957.0], [1808.0, 3874.0], [1816.0, 3929.5], [1832.0, 3683.0], [1836.0, 4161.0], [1856.0, 3604.0], [1880.0, 3863.0], [1860.0, 4060.0], [1864.0, 3720.0], [1868.0, 3893.0], [1872.0, 3784.0], [1876.0, 3590.0], [1892.0, 3412.0], [1085.0, 4967.0], [1037.0, 5329.0], [1033.0, 7470.0], [1029.0, 7853.0], [1025.0, 8302.0], [1057.0, 7399.0], [1061.0, 7375.0], [1065.0, 7295.0], [1069.0, 7845.0], [1077.0, 7306.0], [1081.0, 8176.0], [1073.0, 4744.5], [1045.0, 7413.0], [1041.0, 8312.0], [1049.0, 7652.0], [1053.0, 4781.0], [1089.0, 7262.0], [1141.0, 3459.0], [1097.0, 5251.5], [1093.0, 4525.5], [1117.0, 7130.0], [1109.0, 3842.333333333333], [1105.0, 7387.0], [1113.0, 7137.0], [1101.0, 4768.0], [1129.0, 8683.0], [1125.0, 7477.0], [1121.0, 7188.0], [1149.0, 7911.0], [1145.0, 7118.0], [1133.0, 4614.0], [1137.0, 7657.0], [1157.0, 6986.0], [1161.0, 3622.333333333333], [1153.0, 7458.0], [1165.0, 2230.0], [1201.0, 6804.0], [1213.0, 3747.666666666667], [1169.0, 3854.4285714285716], [1173.0, 7240.0], [1177.0, 6950.0], [1181.0, 7016.0], [1185.0, 7283.0], [1189.0, 7138.0], [1193.0, 7068.0], [1197.0, 6941.0], [1209.0, 6877.0], [1205.0, 6749.0], [1273.0, 4929.0], [1217.0, 4614.0], [1257.0, 5449.0], [1265.0, 7226.0], [1249.0, 6567.0], [1253.0, 7072.0], [1277.0, 6425.0], [1229.0, 4739.5], [1225.0, 6657.0], [1221.0, 7047.0], [1245.0, 4103.666666666667], [1241.0, 6757.0], [1237.0, 6617.5], [1233.0, 8730.0], [1261.0, 6972.0], [1285.0, 6391.0], [1341.0, 4391.0], [1281.0, 6600.0], [1289.0, 4808.0], [1293.0, 6404.0], [1329.0, 6261.0], [1333.0, 6151.0], [1301.0, 5040.0], [1297.0, 6349.0], [1305.0, 7107.0], [1309.0, 6248.0], [1317.0, 4828.5], [1321.0, 7036.0], [1325.0, 3889.666666666667], [1313.0, 2411.0], [1393.0, 5942.0], [1345.0, 4262.5], [1373.0, 4946.0], [1353.0, 6089.0], [1397.0, 4155.5], [1357.0, 6364.0], [1401.0, 4626.5], [1377.0, 6371.0], [1405.0, 6592.0], [1381.0, 3871.0], [1389.0, 4125.333333333333], [1385.0, 6943.0], [1365.0, 6829.0], [1361.0, 6075.0], [1369.0, 4744.0], [1413.0, 7071.0], [1421.0, 4346.5], [1465.0, 4527.0], [1429.0, 3839.0], [1433.0, 6400.0], [1417.0, 6404.0], [1409.0, 5805.0], [1437.0, 5724.0], [1425.0, 6109.0], [1469.0, 4375.0], [1441.0, 6084.0], [1457.0, 4344.5], [1461.0, 5604.0], [1449.0, 4874.0], [1453.0, 5825.0], [1481.0, 5446.0], [1525.0, 6081.0], [1521.0, 5487.0], [1485.0, 5590.0], [1529.0, 5959.0], [1493.0, 4070.0], [1489.0, 5747.0], [1473.0, 8023.0], [1477.0, 5681.0], [1501.0, 5596.0], [1497.0, 5420.0], [1505.0, 5925.0], [1509.0, 5458.0], [1513.0, 5274.0], [1517.0, 5664.0], [1533.0, 5243.0], [1537.0, 5316.0], [1553.0, 4896.5], [1585.0, 5350.0], [1549.0, 5669.0], [1541.0, 6066.0], [1565.0, 5147.0], [1561.0, 5138.0], [1557.0, 5128.0], [1589.0, 5237.5], [1597.0, 2810.5], [1569.0, 5457.0], [1573.0, 5361.0], [1577.0, 5051.0], [1581.0, 5069.0], [1601.0, 4294.5], [1609.0, 4768.0], [1649.0, 4670.5], [1613.0, 4788.0], [1605.0, 5040.0], [1653.0, 6067.0], [1621.0, 3599.3333333333335], [1617.0, 5077.0], [1625.0, 5280.0], [1629.0, 4715.0], [1637.0, 3812.0], [1645.0, 4821.0], [1641.0, 4626.0], [1633.0, 4666.0], [1661.0, 3565.3333333333335], [1665.0, 3266.0], [1673.0, 4054.0], [1721.0, 3478.0], [1669.0, 4705.0], [1677.0, 4461.0], [1713.0, 4299.0], [1689.0, 4462.5], [1685.0, 4952.0], [1681.0, 4390.0], [1693.0, 4325.0], [1701.0, 5154.0], [1705.0, 4451.0], [1709.0, 4936.0], [1781.0, 4097.0], [1733.0, 4011.0], [1753.0, 3732.5], [1729.0, 4220.0], [1761.0, 4595.0], [1765.0, 4062.0], [1789.0, 5820.0], [1777.0, 4044.0], [1741.0, 4695.0], [1737.0, 4538.0], [1785.0, 3749.5], [1769.0, 4093.5], [1773.0, 4776.0], [1745.0, 4667.0], [1757.0, 3933.0], [1801.0, 3871.0], [1793.0, 4291.0], [1821.0, 4813.0], [1817.0, 5003.0], [1797.0, 4288.0], [1805.0, 3809.0], [1841.0, 4231.0], [1845.0, 5184.0], [1849.0, 3786.5], [1853.0, 3581.0], [1825.0, 4227.0], [1829.0, 4108.0], [1813.0, 3497.3333333333335], [1809.0, 4264.0], [1833.0, 5131.0], [1837.0, 3775.0], [1885.0, 3855.5], [1857.0, 3555.75], [1881.0, 3560.0], [1877.0, 3499.0], [1861.0, 3799.0], [1865.0, 3945.6666666666665], [1889.0, 4215.5], [1873.0, 3634.5], [519.0, 5511.0], [517.0, 6388.5], [515.0, 5439.5], [513.0, 9925.0], [527.0, 9878.0], [525.0, 9995.0], [537.0, 11821.0], [539.0, 10494.0], [541.0, 9799.0], [543.0, 10139.0], [521.0, 10525.0], [523.0, 3897.0], [531.0, 1141.0], [535.0, 9840.0], [533.0, 10136.0], [529.0, 5483.0], [545.0, 9795.0], [575.0, 9992.0], [559.0, 6891.333333333333], [557.0, 10647.0], [555.0, 10498.0], [553.0, 10132.0], [561.0, 3186.0], [563.0, 3227.5], [565.0, 10206.0], [567.0, 10080.0], [573.0, 9845.0], [569.0, 10152.0], [551.0, 9750.0], [549.0, 9794.0], [547.0, 10149.0], [579.0, 5524.5], [581.0, 969.0], [577.0, 9851.0], [583.0, 2947.0], [585.0, 2887.2], [589.0, 10014.0], [591.0, 10577.0], [601.0, 5563.0], [605.0, 5390.0], [603.0, 9600.0], [607.0, 9556.0], [593.0, 10123.0], [595.0, 9730.0], [597.0, 9672.0], [599.0, 9908.0], [611.0, 9812.0], [615.0, 9504.0], [635.0, 9447.0], [609.0, 9859.0], [613.0, 9938.0], [633.0, 9390.0], [619.0, 10387.0], [621.0, 9453.0], [623.0, 11040.0], [617.0, 3279.5], [639.0, 3505.5], [625.0, 9453.0], [629.0, 9817.5], [627.0, 9676.0], [631.0, 9779.0], [643.0, 10664.0], [641.0, 5758.5], [655.0, 9905.0], [653.0, 9466.0], [651.0, 10134.0], [649.0, 10017.0], [665.0, 948.0], [647.0, 10688.0], [645.0, 9806.0], [669.0, 3284.0], [671.0, 9753.0], [657.0, 9430.0], [659.0, 9509.0], [661.0, 9448.0], [663.0, 10790.0], [667.0, 5377.5], [675.0, 9285.0], [673.0, 5244.5], [677.0, 9261.0], [687.0, 9233.0], [685.0, 9498.0], [683.0, 9489.0], [681.0, 9529.0], [701.0, 3157.25], [699.0, 4971.4], [697.0, 3321.75], [679.0, 9276.0], [703.0, 1742.0], [691.0, 9949.0], [695.0, 9359.0], [693.0, 9567.0], [707.0, 9361.0], [705.0, 3207.75], [719.0, 9189.0], [717.0, 9772.0], [715.0, 9863.0], [709.0, 9432.5], [711.0, 9367.0], [729.0, 9858.0], [735.0, 9657.0], [723.0, 9172.5], [721.0, 9014.0], [725.0, 9272.0], [727.0, 9442.0], [733.0, 8956.0], [731.0, 9290.0], [743.0, 9017.0], [765.0, 5142.5], [763.0, 3626.5], [761.0, 1165.0], [767.0, 8813.0], [741.0, 9122.0], [737.0, 9020.0], [751.0, 8908.0], [747.0, 9589.0], [745.0, 9344.0], [759.0, 9085.0], [757.0, 8923.0], [755.0, 10103.0], [753.0, 10090.0], [771.0, 9019.0], [769.0, 6521.666666666667], [773.0, 9671.0], [775.0, 9087.0], [777.0, 8891.0], [779.0, 8835.0], [781.0, 9230.5], [783.0, 8877.0], [793.0, 4088.0], [791.0, 3787.0], [795.0, 5482.5], [797.0, 8670.0], [799.0, 8740.0], [785.0, 8751.0], [787.0, 10353.0], [789.0, 8950.0], [803.0, 9531.0], [805.0, 9080.0], [801.0, 8642.0], [807.0, 8800.0], [825.0, 8941.0], [827.0, 8869.0], [809.0, 9662.0], [811.0, 8788.0], [815.0, 8842.0], [821.0, 2882.2], [823.0, 8903.0], [831.0, 4469.666666666666], [817.0, 8676.0], [829.0, 8543.0], [839.0, 4902.5], [859.0, 8601.0], [837.0, 8427.0], [857.0, 8737.0], [863.0, 8551.0], [847.0, 3738.3333333333335], [833.0, 9283.0], [835.0, 8847.0], [843.0, 8358.0], [841.0, 8418.0], [849.0, 3482.0], [851.0, 9950.0], [853.0, 9191.0], [855.0, 3877.3333333333335], [867.0, 4986.0], [865.0, 5377.5], [869.0, 8423.0], [889.0, 8183.0], [877.0, 8235.0], [875.0, 8565.0], [873.0, 8373.0], [879.0, 8448.0], [883.0, 2251.0], [885.0, 5045.0], [887.0, 8615.0], [895.0, 4952.0], [881.0, 8523.0], [893.0, 8942.0], [891.0, 9004.0], [911.0, 8325.0], [897.0, 4856.0], [905.0, 8520.0], [907.0, 8356.0], [909.0, 9294.0], [913.0, 5096.0], [919.0, 8326.0], [917.0, 8827.0], [915.0, 4980.5], [921.0, 8022.0], [903.0, 8411.0], [901.0, 8127.0], [899.0, 8537.0], [923.0, 8750.5], [925.0, 8671.0], [927.0, 7984.0], [931.0, 8122.0], [953.0, 4799.5], [941.0, 8447.0], [939.0, 8762.0], [937.0, 7931.0], [943.0, 8206.0], [935.0, 7932.0], [933.0, 8898.0], [929.0, 8087.0], [951.0, 4740.0], [949.0, 4880.0], [947.0, 8388.0], [945.0, 8802.0], [955.0, 5576.5], [957.0, 5254.5], [959.0, 8325.0], [961.0, 7927.0], [985.0, 7686.0], [965.0, 3957.0], [963.0, 7930.0], [975.0, 7772.0], [973.0, 8025.5], [971.0, 8098.0], [969.0, 7807.5], [967.0, 5062.0], [981.0, 5004.5], [983.0, 4950.5], [991.0, 4776.5], [977.0, 8133.0], [979.0, 8189.0], [989.0, 7696.0], [987.0, 7802.0], [997.0, 4664.0], [1019.0, 8821.0], [995.0, 3921.333333333333], [999.0, 8054.0], [1017.0, 9408.0], [1001.0, 5345.5], [1003.0, 8703.0], [1005.0, 7661.0], [1007.0, 8048.0], [1021.0, 4636.5], [1023.0, 3659.666666666667], [1015.0, 9547.0], [1013.0, 8331.0], [1011.0, 7551.0], [1009.0, 8222.0], [1078.0, 7308.0], [1082.0, 8851.0], [1026.0, 4752.5], [1034.0, 5071.5], [1030.0, 8059.0], [1038.0, 8021.0], [1066.0, 8748.0], [1062.0, 8310.0], [1058.0, 8824.0], [1070.0, 7439.0], [1086.0, 4647.5], [1050.0, 7653.0], [1046.0, 7815.0], [1042.0, 7775.0], [1054.0, 7902.0], [1094.0, 7552.0], [1098.0, 4861.5], [1118.0, 7152.0], [1090.0, 7258.0], [1110.0, 7130.0], [1114.0, 7689.0], [1106.0, 5220.0], [1102.0, 4901.0], [1134.0, 3856.0], [1130.0, 4886.5], [1126.0, 7867.0], [1122.0, 7866.0], [1146.0, 7515.0], [1142.0, 7044.0], [1138.0, 1906.0], [1158.0, 4480.5], [1206.0, 4758.5], [1154.0, 7039.0], [1182.0, 7605.0], [1178.0, 7014.0], [1174.0, 7488.0], [1166.0, 7154.5], [1186.0, 6835.0], [1214.0, 5040.5], [1210.0, 4402.0], [1202.0, 3335.6], [1190.0, 4944.5], [1194.0, 4892.5], [1198.0, 6787.0], [1170.0, 2389.0], [1218.0, 7102.0], [1230.0, 4794.0], [1242.0, 6605.0], [1238.0, 7104.0], [1234.0, 7833.0], [1246.0, 6657.0], [1222.0, 6644.0], [1226.0, 6664.0], [1262.0, 4561.5], [1258.0, 5049.5], [1278.0, 6415.0], [1250.0, 6543.0], [1254.0, 6941.0], [1274.0, 6547.0], [1270.0, 6683.5], [1266.0, 6697.0], [1338.0, 6760.5], [1290.0, 3583.333333333333], [1286.0, 6384.0], [1310.0, 6249.0], [1302.0, 6312.0], [1298.0, 6664.0], [1342.0, 4397.0], [1334.0, 6261.0], [1294.0, 8221.0], [1318.0, 6310.0], [1326.0, 6348.0], [1314.0, 4514.75], [1354.0, 7372.0], [1346.0, 8196.0], [1374.0, 6194.0], [1350.0, 6162.5], [1358.0, 6456.0], [1394.0, 5982.0], [1402.0, 6252.0], [1398.0, 6611.0], [1406.0, 2558.0], [1386.0, 4847.5], [1390.0, 4232.0], [1378.0, 5969.0], [1382.0, 5903.0], [1366.0, 6304.0], [1362.0, 6555.0], [1370.0, 4382.0], [1462.0, 5606.0], [1426.0, 5938.0], [1430.0, 4627.0], [1434.0, 6311.0], [1470.0, 6621.0], [1442.0, 6324.0], [1446.0, 6005.0], [1466.0, 5669.0], [1458.0, 4068.5], [1438.0, 6302.0], [1410.0, 6856.0], [1414.0, 5747.0], [1422.0, 5806.0], [1450.0, 4690.5], [1454.0, 6509.0], [1478.0, 5677.0], [1482.0, 4624.5], [1474.0, 5643.0], [1522.0, 3774.0], [1486.0, 5488.0], [1526.0, 5278.0], [1498.0, 5425.0], [1494.0, 5400.0], [1490.0, 5717.0], [1502.0, 6102.0], [1530.0, 5415.0], [1510.0, 5490.0], [1514.0, 5980.0], [1518.0, 5290.0], [1538.0, 5724.0], [1586.0, 5181.0], [1554.0, 3517.5], [1558.0, 5212.0], [1546.0, 5601.5], [1542.0, 5189.0], [1566.0, 5871.0], [1562.0, 5487.0], [1590.0, 4291.5], [1594.0, 3805.4], [1578.0, 5055.0], [1598.0, 5073.0], [1574.0, 5232.0], [1606.0, 5024.0], [1610.0, 4806.0], [1658.0, 4462.0], [1614.0, 3490.6666666666665], [1602.0, 4813.0], [1650.0, 4606.0], [1654.0, 4668.0], [1618.0, 5540.0], [1622.0, 3959.0], [1626.0, 4878.0], [1630.0, 5000.0], [1642.0, 4623.0], [1638.0, 4957.0], [1634.0, 4655.0], [1662.0, 4200.5], [1678.0, 4744.0], [1714.0, 5653.0], [1670.0, 4462.0], [1666.0, 4562.5], [1674.0, 4451.0], [1718.0, 4454.0], [1722.0, 4432.75], [1726.0, 4199.333333333333], [1690.0, 5230.0], [1694.0, 3877.3333333333335], [1698.0, 4245.666666666667], [1702.0, 4214.0], [1706.0, 4367.0], [1710.0, 3676.0], [1782.0, 4287.0], [1730.0, 4707.0], [1734.0, 3631.0], [1762.0, 4875.0], [1742.0, 4265.0], [1738.0, 6062.0], [1786.0, 3782.6666666666665], [1766.0, 3787.5], [1770.0, 4348.0], [1774.0, 4577.0], [1750.0, 4041.8], [1746.0, 4139.0], [1754.0, 4179.0], [1758.0, 4411.0], [1802.0, 4172.0], [1850.0, 4040.0], [1794.0, 4014.0], [1822.0, 5472.0], [1818.0, 3974.0], [1798.0, 4073.0], [1806.0, 4127.0], [1842.0, 3577.0], [1846.0, 3682.0], [1826.0, 3996.0], [1830.0, 3688.0], [1854.0, 3752.0], [1814.0, 3965.75], [1810.0, 4013.0], [1834.0, 3680.0], [1858.0, 3739.2], [1862.0, 3684.5], [1886.0, 3814.0], [1882.0, 3492.0], [1878.0, 4543.0], [1866.0, 3562.0], [1870.0, 3532.0], [1874.0, 3534.0], [1890.0, 3463.6666666666665], [1075.0, 5808.333333333333], [1035.0, 4524.333333333333], [1031.0, 7774.0], [1027.0, 8025.0], [1059.0, 7989.0], [1063.0, 7374.0], [1067.0, 7498.0], [1071.0, 7796.0], [1083.0, 4845.5], [1079.0, 2105.0], [1039.0, 7694.0], [1047.0, 3445.25], [1043.0, 8556.0], [1051.0, 5701.5], [1055.0, 9876.0], [1095.0, 4756.5], [1115.0, 2969.2], [1091.0, 7689.0], [1107.0, 7646.0], [1111.0, 7136.0], [1099.0, 7193.0], [1103.0, 4874.0], [1131.0, 4810.0], [1127.0, 7458.0], [1123.0, 7644.0], [1151.0, 7024.5], [1147.0, 7050.0], [1143.0, 8259.0], [1135.0, 2204.0], [1139.0, 5505.0], [1163.0, 7390.0], [1203.0, 4827.0], [1159.0, 7015.0], [1167.0, 4012.0], [1171.0, 6981.5], [1175.0, 6902.0], [1179.0, 6988.0], [1183.0, 8541.0], [1215.0, 7397.0], [1187.0, 6879.0], [1191.0, 7214.0], [1195.0, 6817.0], [1199.0, 6791.0], [1207.0, 7024.0], [1267.0, 7489.0], [1231.0, 4032.333333333333], [1271.0, 6583.0], [1275.0, 6545.0], [1279.0, 6415.0], [1251.0, 6573.0], [1255.0, 8121.0], [1227.0, 6658.0], [1223.0, 6883.0], [1219.0, 6705.0], [1243.0, 6582.0], [1235.0, 6878.0], [1247.0, 3877.0], [1259.0, 4244.666666666667], [1263.0, 6488.0], [1295.0, 6326.0], [1331.0, 6259.0], [1283.0, 4389.6], [1287.0, 6634.0], [1291.0, 3342.0], [1339.0, 7327.0], [1335.0, 6180.0], [1343.0, 3999.666666666667], [1299.0, 6453.0], [1303.0, 6865.0], [1307.0, 7196.5], [1315.0, 4097.666666666667], [1319.0, 6365.0], [1323.0, 6767.5], [1327.0, 6906.0], [1351.0, 3643.333333333333], [1355.0, 2656.0], [1371.0, 4194.0], [1375.0, 6382.0], [1347.0, 6295.0], [1395.0, 5879.0], [1359.0, 6450.0], [1399.0, 5962.0], [1403.0, 4108.5], [1407.0, 6269.0], [1379.0, 6611.0], [1383.0, 5901.0], [1391.0, 4133.0], [1367.0, 3698.333333333333], [1363.0, 6091.0], [1415.0, 5745.0], [1435.0, 4346.333333333333], [1431.0, 5809.0], [1419.0, 6840.0], [1411.0, 5884.0], [1423.0, 6475.0], [1439.0, 7930.0], [1427.0, 4323.0], [1471.0, 4779.0], [1447.0, 5952.0], [1443.0, 5566.0], [1467.0, 4346.5], [1463.0, 4315.0], [1459.0, 2757.0], [1455.0, 6078.0], [1451.0, 6021.0], [1487.0, 5842.0], [1531.0, 5746.0], [1479.0, 4083.0], [1527.0, 4682.0], [1523.0, 6625.0], [1491.0, 7029.0], [1495.0, 2786.0], [1503.0, 3997.5], [1475.0, 6112.0], [1499.0, 6108.0], [1507.0, 4721.0], [1511.0, 5273.0], [1515.0, 5296.0], [1535.0, 5334.0], [1543.0, 5871.0], [1587.0, 6353.0], [1555.0, 4419.0], [1551.0, 5398.5], [1547.0, 5204.0], [1539.0, 5326.0], [1567.0, 6621.0], [1563.0, 5194.0], [1595.0, 3946.6666666666665], [1591.0, 5170.0], [1599.0, 4032.5], [1571.0, 5223.5], [1575.0, 5062.0], [1579.0, 5072.0], [1583.0, 5166.0], [1607.0, 5595.0], [1611.0, 4764.0], [1603.0, 5026.0], [1615.0, 4849.0], [1651.0, 4615.0], [1619.0, 4903.0], [1623.0, 4721.0], [1627.0, 4893.0], [1631.0, 4673.0], [1647.0, 4605.5], [1643.0, 5189.0], [1639.0, 5070.0], [1663.0, 3743.5], [1635.0, 5755.0], [1659.0, 4560.0], [1655.0, 3891.0], [1671.0, 6138.0], [1667.0, 4464.0], [1675.0, 4462.0], [1679.0, 4914.0], [1715.0, 4258.0], [1719.0, 4390.0], [1727.0, 4669.0], [1691.0, 4519.0], [1687.0, 5308.0], [1683.0, 4456.5], [1695.0, 3529.6666666666665], [1699.0, 4363.0], [1703.0, 5297.0], [1711.0, 5598.0], [1783.0, 3994.0], [1731.0, 4571.0], [1735.0, 4273.0], [1763.0, 4061.5], [1779.0, 4021.0], [1743.0, 5108.0], [1787.0, 3804.3333333333335], [1767.0, 4195.0], [1771.0, 4050.0], [1775.0, 4009.0], [1747.0, 4576.0], [1751.0, 3765.0], [1755.0, 4543.0], [1759.0, 4180.0], [1799.0, 3873.0], [1795.0, 4216.0], [1823.0, 5022.0], [1819.0, 4256.0], [1803.0, 3956.0], [1843.0, 4994.0], [1847.0, 3679.0], [1851.0, 4297.0], [1855.0, 4507.0], [1827.0, 4309.0], [1811.0, 4503.0], [1815.0, 3634.5], [1831.0, 4460.5], [1835.0, 3876.5], [1839.0, 3685.0], [1883.0, 4549.0], [1887.0, 3464.0], [1879.0, 3483.0], [1859.0, 3611.0], [1863.0, 4205.0], [1867.0, 3525.0], [1875.0, 3628.0], [1891.0, 3510.0], [1.0, 1561.625]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[627.7370657335682, 4274.999250187455]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1892.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 29072.0, "minX": 1.69997368E12, "maxY": 267921.0, "series": [{"data": [[1.699973698E12, 68810.0], [1.699973697E12, 75791.0], [1.69997368E12, 134729.0], [1.699973699E12, 75250.0], [1.6999737E12, 42122.0], [1.699973682E12, 242407.0], [1.699973681E12, 267921.0], [1.699973685E12, 69258.0], [1.699973683E12, 72953.0], [1.699973684E12, 70633.0], [1.699973687E12, 57549.0], [1.699973688E12, 66455.0], [1.699973686E12, 69722.0], [1.69997369E12, 64541.0], [1.699973689E12, 71109.0], [1.699973693E12, 79513.0], [1.699973691E12, 69779.0], [1.699973692E12, 70182.0], [1.699973695E12, 67789.0], [1.699973696E12, 73393.0], [1.699973694E12, 61725.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.699973698E12, 47495.0], [1.699973697E12, 52301.0], [1.69997368E12, 92969.0], [1.699973699E12, 51905.0], [1.6999737E12, 29072.0], [1.699973682E12, 167297.0], [1.699973681E12, 184836.0], [1.699973685E12, 47798.0], [1.699973683E12, 50333.0], [1.699973684E12, 48738.0], [1.699973687E12, 39714.0], [1.699973688E12, 45865.0], [1.699973686E12, 48117.0], [1.69997369E12, 44531.0], [1.699973689E12, 49069.0], [1.699973693E12, 54863.0], [1.699973691E12, 48174.0], [1.699973692E12, 48432.0], [1.699973695E12, 46764.0], [1.699973696E12, 50628.0], [1.699973694E12, 42585.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.6999737E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8.645724258289682, "minX": 1.69997368E12, "maxY": 12615.466666666665, "series": [{"data": [[1.699973698E12, 11080.700680272099], [1.699973697E12, 10506.043209876543], [1.69997368E12, 26.87152777777777], [1.699973699E12, 12018.25465838509], [1.6999737E12, 12615.466666666665], [1.699973682E12, 31.984555984555996], [1.699973681E12, 8.645724258289682], [1.699973685E12, 1976.4594594594591], [1.699973683E12, 400.02564102564105], [1.699973684E12, 1174.1456953642385], [1.699973687E12, 3395.4471544715443], [1.699973688E12, 4089.7605633802837], [1.699973686E12, 2647.6979865771823], [1.69997369E12, 5634.681159420287], [1.699973689E12, 4806.315789473682], [1.699973693E12, 7721.335294117646], [1.699973691E12, 6268.805369127516], [1.699973692E12, 6998.793333333331], [1.699973695E12, 9059.524137931036], [1.699973696E12, 9735.56050955414], [1.699973694E12, 8348.265151515152]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.6999737E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8.595113438045376, "minX": 1.69997368E12, "maxY": 12615.300000000005, "series": [{"data": [[1.699973698E12, 11080.632653061231], [1.699973697E12, 10505.981481481482], [1.69997368E12, 26.562499999999993], [1.699973699E12, 12017.944099378883], [1.6999737E12, 12615.300000000005], [1.699973682E12, 31.95173745173744], [1.699973681E12, 8.595113438045376], [1.699973685E12, 1976.4054054054047], [1.699973683E12, 399.9230769230767], [1.699973684E12, 1174.0927152317875], [1.699973687E12, 3395.373983739838], [1.699973688E12, 4089.6338028169007], [1.699973686E12, 2647.6241610738257], [1.69997369E12, 5634.615942028986], [1.699973689E12, 4806.21710526316], [1.699973693E12, 7721.017647058823], [1.699973691E12, 6268.704697986577], [1.699973692E12, 6998.773333333333], [1.699973695E12, 9059.489655172412], [1.699973696E12, 9735.45859872611], [1.699973694E12, 8348.189393939389]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.6999737E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.598639455782313, "minX": 1.69997368E12, "maxY": 7.444444444444449, "series": [{"data": [[1.699973698E12, 0.598639455782313], [1.699973697E12, 0.7037037037037035], [1.69997368E12, 7.444444444444449], [1.699973699E12, 1.8012422360248448], [1.6999737E12, 1.3444444444444443], [1.699973682E12, 0.9440154440154446], [1.699973681E12, 1.5410122164048876], [1.699973685E12, 1.114864864864865], [1.699973683E12, 1.2756410256410255], [1.699973684E12, 0.9668874172185429], [1.699973687E12, 0.804878048780488], [1.699973688E12, 0.9507042253521123], [1.699973686E12, 0.8120805369127514], [1.69997369E12, 0.9637681159420287], [1.699973689E12, 1.2171052631578945], [1.699973693E12, 0.6705882352941178], [1.699973691E12, 0.8255033557046982], [1.699973692E12, 0.6800000000000005], [1.699973695E12, 1.096551724137931], [1.699973696E12, 0.726114649681529], [1.699973694E12, 1.1060606060606069]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.6999737E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.69997368E12, "maxY": 15198.0, "series": [{"data": [[1.699973698E12, 12626.0], [1.699973697E12, 12573.0], [1.69997368E12, 200.0], [1.699973699E12, 15198.0], [1.6999737E12, 14211.0], [1.699973682E12, 461.0], [1.699973681E12, 52.0], [1.699973685E12, 3205.0], [1.699973683E12, 1169.0], [1.699973684E12, 2072.0], [1.699973687E12, 5013.0], [1.699973688E12, 5820.0], [1.699973686E12, 4049.0], [1.69997369E12, 8023.0], [1.699973689E12, 6547.0], [1.699973693E12, 10018.0], [1.699973691E12, 8196.0], [1.699973692E12, 10049.0], [1.699973695E12, 11860.0], [1.699973696E12, 11114.0], [1.699973694E12, 10755.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.699973698E12, 11593.6], [1.699973697E12, 11212.6], [1.69997368E12, 87.10000000000002], [1.699973699E12, 12740.0], [1.6999737E12, 13171.300000000001], [1.699973682E12, 92.0], [1.699973681E12, 11.0], [1.699973685E12, 2527.2], [1.699973683E12, 829.4000000000001], [1.699973684E12, 1701.6000000000004], [1.699973687E12, 4073.8], [1.699973688E12, 4722.000000000003], [1.699973686E12, 3280.0], [1.69997369E12, 6301.900000000001], [1.699973689E12, 5578.500000000001], [1.699973693E12, 8446.9], [1.699973691E12, 6906.0], [1.699973692E12, 7771.1], [1.699973695E12, 9741.800000000001], [1.699973696E12, 10322.6], [1.699973694E12, 8959.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.699973698E12, 12597.68], [1.699973697E12, 12408.570000000002], [1.69997368E12, 186.11], [1.699973699E12, 14248.779999999993], [1.6999737E12, 14211.0], [1.699973682E12, 238.14999999999918], [1.699973681E12, 35.0], [1.699973685E12, 3170.209999999999], [1.699973683E12, 1158.17], [1.699973684E12, 2044.4399999999994], [1.699973687E12, 4931.4000000000015], [1.699973688E12, 5670.359999999998], [1.699973686E12, 3942.5], [1.69997369E12, 7650.549999999986], [1.699973689E12, 6373.16], [1.699973693E12, 10007.35], [1.699973691E12, 8124.0], [1.699973692E12, 9376.310000000012], [1.699973695E12, 11333.29999999999], [1.699973696E12, 11071.08], [1.699973694E12, 10696.919999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.699973698E12, 11921.6], [1.699973697E12, 11704.449999999999], [1.69997368E12, 129.55], [1.699973699E12, 13191.8], [1.6999737E12, 13491.550000000001], [1.699973682E12, 149.19999999999982], [1.699973681E12, 16.0], [1.699973685E12, 2727.0499999999993], [1.699973683E12, 880.4000000000001], [1.699973684E12, 1821.0000000000002], [1.699973687E12, 4313.4], [1.699973688E12, 5019.15], [1.699973686E12, 3509.0], [1.69997369E12, 6625.5], [1.699973689E12, 5784.0], [1.699973693E12, 8822.35], [1.699973691E12, 7420.0], [1.699973692E12, 8140.349999999999], [1.699973695E12, 10054.899999999998], [1.699973696E12, 10637.0], [1.699973694E12, 9098.6]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.699973698E12, 10429.0], [1.699973697E12, 9750.0], [1.69997368E12, 5.0], [1.699973699E12, 11133.0], [1.6999737E12, 12098.0], [1.699973682E12, 5.0], [1.699973681E12, 5.0], [1.699973685E12, 1255.0], [1.699973683E12, 16.0], [1.699973684E12, 566.0], [1.699973687E12, 2720.0], [1.699973688E12, 3412.0], [1.699973686E12, 1944.0], [1.69997369E12, 4981.0], [1.699973689E12, 4139.0], [1.699973693E12, 6947.0], [1.699973691E12, 5492.0], [1.699973692E12, 6248.0], [1.699973695E12, 8352.0], [1.699973696E12, 9082.0], [1.699973694E12, 7649.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.699973698E12, 11005.0], [1.699973697E12, 10369.5], [1.69997368E12, 9.5], [1.699973699E12, 11953.0], [1.6999737E12, 12529.0], [1.699973682E12, 9.0], [1.699973681E12, 7.0], [1.699973685E12, 1951.0], [1.699973683E12, 347.0], [1.699973684E12, 1162.0], [1.699973687E12, 3302.0], [1.699973688E12, 4038.0], [1.699973686E12, 2588.0], [1.69997369E12, 5496.5], [1.699973689E12, 4700.0], [1.699973693E12, 7607.5], [1.699973691E12, 6201.0], [1.699973692E12, 6891.5], [1.699973695E12, 8959.0], [1.699973696E12, 9696.0], [1.699973694E12, 8289.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.6999737E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 90.0, "maxY": 12529.0, "series": [{"data": [[518.0, 9.0], [132.0, 8289.5], [573.0, 7.0], [142.0, 4038.0], [138.0, 5496.5], [151.0, 1162.0], [148.0, 1951.0], [149.0, 4770.5], [150.0, 6891.5], [145.0, 8959.0], [147.0, 11005.0], [156.0, 347.0], [152.0, 4700.0], [157.0, 9696.0], [162.0, 10369.5], [161.0, 11953.0], [170.0, 7607.5], [288.0, 9.5], [90.0, 12529.0], [123.0, 3302.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 573.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 90.0, "maxY": 12529.0, "series": [{"data": [[518.0, 9.0], [132.0, 8289.5], [573.0, 7.0], [142.0, 4038.0], [138.0, 5496.0], [151.0, 1162.0], [148.0, 1950.5], [149.0, 4770.5], [150.0, 6891.5], [145.0, 8959.0], [147.0, 11005.0], [156.0, 347.0], [152.0, 4700.0], [157.0, 9696.0], [162.0, 10369.5], [161.0, 11953.0], [170.0, 7607.5], [288.0, 9.0], [90.0, 12529.0], [123.0, 3302.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 573.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 19.0, "minX": 1.69997368E12, "maxY": 631.0, "series": [{"data": [[1.699973687E12, 479.0], [1.699973688E12, 19.0], [1.699973686E12, 499.0], [1.69997368E12, 306.0], [1.699973682E12, 631.0], [1.699973681E12, 566.0], [1.699973685E12, 501.0], [1.699973683E12, 500.0], [1.699973684E12, 500.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.699973688E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 90.0, "minX": 1.69997368E12, "maxY": 573.0, "series": [{"data": [[1.699973698E12, 147.0], [1.699973697E12, 162.0], [1.69997368E12, 288.0], [1.699973699E12, 161.0], [1.6999737E12, 90.0], [1.699973682E12, 518.0], [1.699973681E12, 573.0], [1.699973685E12, 148.0], [1.699973683E12, 156.0], [1.699973684E12, 151.0], [1.699973687E12, 123.0], [1.699973688E12, 142.0], [1.699973686E12, 149.0], [1.69997369E12, 138.0], [1.699973689E12, 152.0], [1.699973693E12, 170.0], [1.699973691E12, 149.0], [1.699973692E12, 150.0], [1.699973695E12, 145.0], [1.699973696E12, 157.0], [1.699973694E12, 132.0]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.6999737E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 90.0, "minX": 1.69997368E12, "maxY": 573.0, "series": [{"data": [[1.699973698E12, 147.0], [1.699973697E12, 162.0], [1.69997368E12, 288.0], [1.699973699E12, 161.0], [1.6999737E12, 90.0], [1.699973682E12, 518.0], [1.699973681E12, 573.0], [1.699973685E12, 148.0], [1.699973683E12, 156.0], [1.699973684E12, 151.0], [1.699973687E12, 123.0], [1.699973688E12, 142.0], [1.699973686E12, 149.0], [1.69997369E12, 138.0], [1.699973689E12, 152.0], [1.699973693E12, 170.0], [1.699973691E12, 149.0], [1.699973692E12, 150.0], [1.699973695E12, 145.0], [1.699973696E12, 157.0], [1.699973694E12, 132.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.6999737E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 90.0, "minX": 1.69997368E12, "maxY": 573.0, "series": [{"data": [[1.699973698E12, 147.0], [1.699973697E12, 162.0], [1.69997368E12, 288.0], [1.699973699E12, 161.0], [1.6999737E12, 90.0], [1.699973682E12, 518.0], [1.699973681E12, 573.0], [1.699973685E12, 148.0], [1.699973683E12, 156.0], [1.699973684E12, 151.0], [1.699973687E12, 123.0], [1.699973688E12, 142.0], [1.699973686E12, 149.0], [1.69997369E12, 138.0], [1.699973689E12, 152.0], [1.699973693E12, 170.0], [1.699973691E12, 149.0], [1.699973692E12, 150.0], [1.699973695E12, 145.0], [1.699973696E12, 157.0], [1.699973694E12, 132.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.6999737E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

