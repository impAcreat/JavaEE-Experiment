/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 16931.0, "series": [{"data": [[0.0, 5.0], [0.1, 5.0], [0.2, 5.0], [0.3, 5.0], [0.4, 6.0], [0.5, 6.0], [0.6, 6.0], [0.7, 6.0], [0.8, 6.0], [0.9, 6.0], [1.0, 6.0], [1.1, 6.0], [1.2, 6.0], [1.3, 6.0], [1.4, 6.0], [1.5, 6.0], [1.6, 6.0], [1.7, 6.0], [1.8, 6.0], [1.9, 6.0], [2.0, 6.0], [2.1, 6.0], [2.2, 6.0], [2.3, 6.0], [2.4, 6.0], [2.5, 6.0], [2.6, 6.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 7.0], [3.6, 7.0], [3.7, 7.0], [3.8, 7.0], [3.9, 7.0], [4.0, 7.0], [4.1, 7.0], [4.2, 7.0], [4.3, 7.0], [4.4, 7.0], [4.5, 7.0], [4.6, 7.0], [4.7, 7.0], [4.8, 7.0], [4.9, 7.0], [5.0, 7.0], [5.1, 7.0], [5.2, 7.0], [5.3, 7.0], [5.4, 7.0], [5.5, 7.0], [5.6, 7.0], [5.7, 7.0], [5.8, 7.0], [5.9, 7.0], [6.0, 7.0], [6.1, 7.0], [6.2, 7.0], [6.3, 7.0], [6.4, 7.0], [6.5, 7.0], [6.6, 7.0], [6.7, 7.0], [6.8, 7.0], [6.9, 7.0], [7.0, 7.0], [7.1, 7.0], [7.2, 7.0], [7.3, 7.0], [7.4, 7.0], [7.5, 7.0], [7.6, 7.0], [7.7, 7.0], [7.8, 7.0], [7.9, 7.0], [8.0, 7.0], [8.1, 7.0], [8.2, 7.0], [8.3, 7.0], [8.4, 7.0], [8.5, 7.0], [8.6, 7.0], [8.7, 7.0], [8.8, 7.0], [8.9, 7.0], [9.0, 7.0], [9.1, 7.0], [9.2, 7.0], [9.3, 7.0], [9.4, 7.0], [9.5, 7.0], [9.6, 7.0], [9.7, 8.0], [9.8, 8.0], [9.9, 8.0], [10.0, 8.0], [10.1, 8.0], [10.2, 8.0], [10.3, 8.0], [10.4, 8.0], [10.5, 8.0], [10.6, 8.0], [10.7, 8.0], [10.8, 8.0], [10.9, 8.0], [11.0, 8.0], [11.1, 8.0], [11.2, 8.0], [11.3, 8.0], [11.4, 8.0], [11.5, 8.0], [11.6, 8.0], [11.7, 8.0], [11.8, 8.0], [11.9, 8.0], [12.0, 8.0], [12.1, 8.0], [12.2, 8.0], [12.3, 8.0], [12.4, 8.0], [12.5, 8.0], [12.6, 8.0], [12.7, 8.0], [12.8, 8.0], [12.9, 8.0], [13.0, 8.0], [13.1, 8.0], [13.2, 8.0], [13.3, 8.0], [13.4, 8.0], [13.5, 8.0], [13.6, 8.0], [13.7, 8.0], [13.8, 8.0], [13.9, 8.0], [14.0, 8.0], [14.1, 8.0], [14.2, 8.0], [14.3, 8.0], [14.4, 8.0], [14.5, 8.0], [14.6, 8.0], [14.7, 8.0], [14.8, 8.0], [14.9, 8.0], [15.0, 8.0], [15.1, 8.0], [15.2, 8.0], [15.3, 8.0], [15.4, 8.0], [15.5, 8.0], [15.6, 8.0], [15.7, 8.0], [15.8, 8.0], [15.9, 9.0], [16.0, 9.0], [16.1, 9.0], [16.2, 9.0], [16.3, 9.0], [16.4, 9.0], [16.5, 9.0], [16.6, 9.0], [16.7, 9.0], [16.8, 9.0], [16.9, 9.0], [17.0, 9.0], [17.1, 9.0], [17.2, 9.0], [17.3, 9.0], [17.4, 9.0], [17.5, 9.0], [17.6, 9.0], [17.7, 9.0], [17.8, 9.0], [17.9, 9.0], [18.0, 9.0], [18.1, 9.0], [18.2, 9.0], [18.3, 9.0], [18.4, 9.0], [18.5, 9.0], [18.6, 9.0], [18.7, 9.0], [18.8, 9.0], [18.9, 9.0], [19.0, 9.0], [19.1, 9.0], [19.2, 9.0], [19.3, 9.0], [19.4, 9.0], [19.5, 9.0], [19.6, 9.0], [19.7, 9.0], [19.8, 9.0], [19.9, 10.0], [20.0, 10.0], [20.1, 10.0], [20.2, 10.0], [20.3, 10.0], [20.4, 10.0], [20.5, 10.0], [20.6, 10.0], [20.7, 10.0], [20.8, 10.0], [20.9, 10.0], [21.0, 10.0], [21.1, 10.0], [21.2, 10.0], [21.3, 10.0], [21.4, 10.0], [21.5, 10.0], [21.6, 10.0], [21.7, 10.0], [21.8, 10.0], [21.9, 10.0], [22.0, 10.0], [22.1, 11.0], [22.2, 11.0], [22.3, 11.0], [22.4, 11.0], [22.5, 11.0], [22.6, 11.0], [22.7, 11.0], [22.8, 11.0], [22.9, 11.0], [23.0, 11.0], [23.1, 11.0], [23.2, 11.0], [23.3, 11.0], [23.4, 12.0], [23.5, 12.0], [23.6, 12.0], [23.7, 12.0], [23.8, 12.0], [23.9, 12.0], [24.0, 13.0], [24.1, 13.0], [24.2, 13.0], [24.3, 13.0], [24.4, 13.0], [24.5, 13.0], [24.6, 13.0], [24.7, 14.0], [24.8, 14.0], [24.9, 14.0], [25.0, 15.0], [25.1, 15.0], [25.2, 16.0], [25.3, 17.0], [25.4, 17.0], [25.5, 18.0], [25.6, 21.0], [25.7, 22.0], [25.8, 23.0], [25.9, 24.0], [26.0, 26.0], [26.1, 27.0], [26.2, 32.0], [26.3, 33.0], [26.4, 35.0], [26.5, 37.0], [26.6, 43.0], [26.7, 45.0], [26.8, 48.0], [26.9, 50.0], [27.0, 52.0], [27.1, 54.0], [27.2, 58.0], [27.3, 63.0], [27.4, 66.0], [27.5, 67.0], [27.6, 70.0], [27.7, 70.0], [27.8, 74.0], [27.9, 77.0], [28.0, 81.0], [28.1, 83.0], [28.2, 87.0], [28.3, 91.0], [28.4, 95.0], [28.5, 97.0], [28.6, 99.0], [28.7, 99.0], [28.8, 108.0], [28.9, 117.0], [29.0, 129.0], [29.1, 139.0], [29.2, 147.0], [29.3, 158.0], [29.4, 166.0], [29.5, 176.0], [29.6, 189.0], [29.7, 205.0], [29.8, 229.0], [29.9, 236.0], [30.0, 249.0], [30.1, 261.0], [30.2, 302.0], [30.3, 317.0], [30.4, 356.0], [30.5, 394.0], [30.6, 416.0], [30.7, 454.0], [30.8, 493.0], [30.9, 513.0], [31.0, 544.0], [31.1, 597.0], [31.2, 609.0], [31.3, 618.0], [31.4, 631.0], [31.5, 654.0], [31.6, 669.0], [31.7, 692.0], [31.8, 721.0], [31.9, 744.0], [32.0, 762.0], [32.1, 784.0], [32.2, 788.0], [32.3, 808.0], [32.4, 837.0], [32.5, 871.0], [32.6, 912.0], [32.7, 929.0], [32.8, 936.0], [32.9, 966.0], [33.0, 977.0], [33.1, 998.0], [33.2, 1015.0], [33.3, 1040.0], [33.4, 1059.0], [33.5, 1091.0], [33.6, 1112.0], [33.7, 1142.0], [33.8, 1150.0], [33.9, 1176.0], [34.0, 1195.0], [34.1, 1236.0], [34.2, 1263.0], [34.3, 1296.0], [34.4, 1306.0], [34.5, 1326.0], [34.6, 1361.0], [34.7, 1379.0], [34.8, 1423.0], [34.9, 1442.0], [35.0, 1470.0], [35.1, 1499.0], [35.2, 1538.0], [35.3, 1573.0], [35.4, 1579.0], [35.5, 1634.0], [35.6, 1640.0], [35.7, 1678.0], [35.8, 1694.0], [35.9, 1713.0], [36.0, 1732.0], [36.1, 1751.0], [36.2, 1758.0], [36.3, 1776.0], [36.4, 1784.0], [36.5, 1813.0], [36.6, 1834.0], [36.7, 1868.0], [36.8, 1876.0], [36.9, 1886.0], [37.0, 1910.0], [37.1, 1958.0], [37.2, 1980.0], [37.3, 1991.0], [37.4, 2011.0], [37.5, 2036.0], [37.6, 2043.0], [37.7, 2064.0], [37.8, 2098.0], [37.9, 2120.0], [38.0, 2160.0], [38.1, 2184.0], [38.2, 2207.0], [38.3, 2247.0], [38.4, 2266.0], [38.5, 2288.0], [38.6, 2308.0], [38.7, 2324.0], [38.8, 2357.0], [38.9, 2377.0], [39.0, 2393.0], [39.1, 2402.0], [39.2, 2439.0], [39.3, 2461.0], [39.4, 2487.0], [39.5, 2513.0], [39.6, 2557.0], [39.7, 2588.0], [39.8, 2631.0], [39.9, 2666.0], [40.0, 2680.0], [40.1, 2692.0], [40.2, 2706.0], [40.3, 2726.0], [40.4, 2765.0], [40.5, 2777.0], [40.6, 2807.0], [40.7, 2830.0], [40.8, 2849.0], [40.9, 2890.0], [41.0, 2905.0], [41.1, 2922.0], [41.2, 2948.0], [41.3, 2965.0], [41.4, 2984.0], [41.5, 3013.0], [41.6, 3044.0], [41.7, 3073.0], [41.8, 3094.0], [41.9, 3114.0], [42.0, 3137.0], [42.1, 3149.0], [42.2, 3170.0], [42.3, 3192.0], [42.4, 3210.0], [42.5, 3218.0], [42.6, 3249.0], [42.7, 3283.0], [42.8, 3307.0], [42.9, 3336.0], [43.0, 3349.0], [43.1, 3396.0], [43.2, 3416.0], [43.3, 3442.0], [43.4, 3479.0], [43.5, 3486.0], [43.6, 3502.0], [43.7, 3513.0], [43.8, 3533.0], [43.9, 3550.0], [44.0, 3579.0], [44.1, 3596.0], [44.2, 3623.0], [44.3, 3641.0], [44.4, 3667.0], [44.5, 3705.0], [44.6, 3714.0], [44.7, 3739.0], [44.8, 3760.0], [44.9, 3809.0], [45.0, 3830.0], [45.1, 3853.0], [45.2, 3881.0], [45.3, 3908.0], [45.4, 3954.0], [45.5, 3991.0], [45.6, 4020.0], [45.7, 4030.0], [45.8, 4042.0], [45.9, 4050.0], [46.0, 4087.0], [46.1, 4121.0], [46.2, 4132.0], [46.3, 4162.0], [46.4, 4189.0], [46.5, 4232.0], [46.6, 4247.0], [46.7, 4296.0], [46.8, 4327.0], [46.9, 4338.0], [47.0, 4341.0], [47.1, 4360.0], [47.2, 4386.0], [47.3, 4388.0], [47.4, 4403.0], [47.5, 4436.0], [47.6, 4451.0], [47.7, 4470.0], [47.8, 4489.0], [47.9, 4514.0], [48.0, 4553.0], [48.1, 4560.0], [48.2, 4566.0], [48.3, 4593.0], [48.4, 4616.0], [48.5, 4669.0], [48.6, 4687.0], [48.7, 4708.0], [48.8, 4730.0], [48.9, 4782.0], [49.0, 4794.0], [49.1, 4817.0], [49.2, 4832.0], [49.3, 4849.0], [49.4, 4872.0], [49.5, 4901.0], [49.6, 4932.0], [49.7, 4942.0], [49.8, 4953.0], [49.9, 4989.0], [50.0, 5010.0], [50.1, 5030.0], [50.2, 5051.0], [50.3, 5082.0], [50.4, 5090.0], [50.5, 5101.0], [50.6, 5111.0], [50.7, 5131.0], [50.8, 5154.0], [50.9, 5179.0], [51.0, 5196.0], [51.1, 5202.0], [51.2, 5223.0], [51.3, 5246.0], [51.4, 5258.0], [51.5, 5278.0], [51.6, 5291.0], [51.7, 5303.0], [51.8, 5316.0], [51.9, 5338.0], [52.0, 5353.0], [52.1, 5393.0], [52.2, 5407.0], [52.3, 5421.0], [52.4, 5436.0], [52.5, 5458.0], [52.6, 5469.0], [52.7, 5488.0], [52.8, 5498.0], [52.9, 5516.0], [53.0, 5539.0], [53.1, 5569.0], [53.2, 5583.0], [53.3, 5599.0], [53.4, 5614.0], [53.5, 5622.0], [53.6, 5635.0], [53.7, 5655.0], [53.8, 5669.0], [53.9, 5691.0], [54.0, 5702.0], [54.1, 5722.0], [54.2, 5742.0], [54.3, 5768.0], [54.4, 5775.0], [54.5, 5793.0], [54.6, 5808.0], [54.7, 5823.0], [54.8, 5849.0], [54.9, 5869.0], [55.0, 5893.0], [55.1, 5911.0], [55.2, 5932.0], [55.3, 5956.0], [55.4, 5996.0], [55.5, 6014.0], [55.6, 6044.0], [55.7, 6066.0], [55.8, 6085.0], [55.9, 6101.0], [56.0, 6102.0], [56.1, 6123.0], [56.2, 6167.0], [56.3, 6207.0], [56.4, 6212.0], [56.5, 6226.0], [56.6, 6243.0], [56.7, 6259.0], [56.8, 6266.0], [56.9, 6293.0], [57.0, 6304.0], [57.1, 6318.0], [57.2, 6333.0], [57.3, 6347.0], [57.4, 6363.0], [57.5, 6375.0], [57.6, 6381.0], [57.7, 6401.0], [57.8, 6419.0], [57.9, 6444.0], [58.0, 6458.0], [58.1, 6466.0], [58.2, 6479.0], [58.3, 6520.0], [58.4, 6529.0], [58.5, 6541.0], [58.6, 6557.0], [58.7, 6580.0], [58.8, 6594.0], [58.9, 6605.0], [59.0, 6612.0], [59.1, 6626.0], [59.2, 6666.0], [59.3, 6680.0], [59.4, 6697.0], [59.5, 6735.0], [59.6, 6751.0], [59.7, 6766.0], [59.8, 6788.0], [59.9, 6813.0], [60.0, 6816.0], [60.1, 6844.0], [60.2, 6875.0], [60.3, 6906.0], [60.4, 6918.0], [60.5, 6960.0], [60.6, 6975.0], [60.7, 7005.0], [60.8, 7026.0], [60.9, 7045.0], [61.0, 7064.0], [61.1, 7108.0], [61.2, 7115.0], [61.3, 7141.0], [61.4, 7153.0], [61.5, 7177.0], [61.6, 7199.0], [61.7, 7223.0], [61.8, 7248.0], [61.9, 7274.0], [62.0, 7298.0], [62.1, 7317.0], [62.2, 7336.0], [62.3, 7350.0], [62.4, 7362.0], [62.5, 7392.0], [62.6, 7417.0], [62.7, 7437.0], [62.8, 7446.0], [62.9, 7486.0], [63.0, 7498.0], [63.1, 7536.0], [63.2, 7545.0], [63.3, 7566.0], [63.4, 7584.0], [63.5, 7612.0], [63.6, 7629.0], [63.7, 7640.0], [63.8, 7659.0], [63.9, 7692.0], [64.0, 7701.0], [64.1, 7731.0], [64.2, 7755.0], [64.3, 7776.0], [64.4, 7785.0], [64.5, 7813.0], [64.6, 7833.0], [64.7, 7846.0], [64.8, 7862.0], [64.9, 7885.0], [65.0, 7895.0], [65.1, 7928.0], [65.2, 7959.0], [65.3, 7964.0], [65.4, 7971.0], [65.5, 7981.0], [65.6, 8003.0], [65.7, 8023.0], [65.8, 8039.0], [65.9, 8078.0], [66.0, 8095.0], [66.1, 8107.0], [66.2, 8114.0], [66.3, 8153.0], [66.4, 8181.0], [66.5, 8205.0], [66.6, 8218.0], [66.7, 8254.0], [66.8, 8269.0], [66.9, 8285.0], [67.0, 8304.0], [67.1, 8367.0], [67.2, 8385.0], [67.3, 8401.0], [67.4, 8431.0], [67.5, 8447.0], [67.6, 8464.0], [67.7, 8498.0], [67.8, 8512.0], [67.9, 8545.0], [68.0, 8554.0], [68.1, 8579.0], [68.2, 8599.0], [68.3, 8632.0], [68.4, 8658.0], [68.5, 8682.0], [68.6, 8697.0], [68.7, 8724.0], [68.8, 8728.0], [68.9, 8740.0], [69.0, 8745.0], [69.1, 8776.0], [69.2, 8798.0], [69.3, 8815.0], [69.4, 8837.0], [69.5, 8856.0], [69.6, 8870.0], [69.7, 8880.0], [69.8, 8897.0], [69.9, 8918.0], [70.0, 8928.0], [70.1, 8941.0], [70.2, 8956.0], [70.3, 8979.0], [70.4, 8999.0], [70.5, 9014.0], [70.6, 9036.0], [70.7, 9060.0], [70.8, 9093.0], [70.9, 9117.0], [71.0, 9170.0], [71.1, 9185.0], [71.2, 9225.0], [71.3, 9242.0], [71.4, 9269.0], [71.5, 9280.0], [71.6, 9298.0], [71.7, 9328.0], [71.8, 9342.0], [71.9, 9354.0], [72.0, 9370.0], [72.1, 9385.0], [72.2, 9403.0], [72.3, 9419.0], [72.4, 9448.0], [72.5, 9481.0], [72.6, 9507.0], [72.7, 9524.0], [72.8, 9539.0], [72.9, 9560.0], [73.0, 9568.0], [73.1, 9600.0], [73.2, 9619.0], [73.3, 9639.0], [73.4, 9654.0], [73.5, 9668.0], [73.6, 9674.0], [73.7, 9712.0], [73.8, 9720.0], [73.9, 9755.0], [74.0, 9769.0], [74.1, 9788.0], [74.2, 9805.0], [74.3, 9832.0], [74.4, 9849.0], [74.5, 9873.0], [74.6, 9883.0], [74.7, 9897.0], [74.8, 9905.0], [74.9, 9930.0], [75.0, 9939.0], [75.1, 9958.0], [75.2, 9986.0], [75.3, 10006.0], [75.4, 10026.0], [75.5, 10043.0], [75.6, 10063.0], [75.7, 10076.0], [75.8, 10095.0], [75.9, 10105.0], [76.0, 10128.0], [76.1, 10134.0], [76.2, 10148.0], [76.3, 10162.0], [76.4, 10183.0], [76.5, 10218.0], [76.6, 10225.0], [76.7, 10238.0], [76.8, 10263.0], [76.9, 10293.0], [77.0, 10301.0], [77.1, 10311.0], [77.2, 10319.0], [77.3, 10344.0], [77.4, 10363.0], [77.5, 10376.0], [77.6, 10392.0], [77.7, 10414.0], [77.8, 10433.0], [77.9, 10449.0], [78.0, 10461.0], [78.1, 10480.0], [78.2, 10510.0], [78.3, 10540.0], [78.4, 10556.0], [78.5, 10580.0], [78.6, 10590.0], [78.7, 10609.0], [78.8, 10625.0], [78.9, 10654.0], [79.0, 10677.0], [79.1, 10699.0], [79.2, 10720.0], [79.3, 10740.0], [79.4, 10754.0], [79.5, 10775.0], [79.6, 10797.0], [79.7, 10830.0], [79.8, 10859.0], [79.9, 10864.0], [80.0, 10890.0], [80.1, 10895.0], [80.2, 10902.0], [80.3, 10935.0], [80.4, 10946.0], [80.5, 10958.0], [80.6, 10969.0], [80.7, 11000.0], [80.8, 11006.0], [80.9, 11021.0], [81.0, 11033.0], [81.1, 11066.0], [81.2, 11082.0], [81.3, 11108.0], [81.4, 11114.0], [81.5, 11142.0], [81.6, 11152.0], [81.7, 11159.0], [81.8, 11181.0], [81.9, 11223.0], [82.0, 11246.0], [82.1, 11264.0], [82.2, 11292.0], [82.3, 11304.0], [82.4, 11320.0], [82.5, 11330.0], [82.6, 11338.0], [82.7, 11363.0], [82.8, 11370.0], [82.9, 11389.0], [83.0, 11405.0], [83.1, 11416.0], [83.2, 11425.0], [83.3, 11437.0], [83.4, 11456.0], [83.5, 11462.0], [83.6, 11470.0], [83.7, 11494.0], [83.8, 11521.0], [83.9, 11546.0], [84.0, 11565.0], [84.1, 11585.0], [84.2, 11593.0], [84.3, 11603.0], [84.4, 11620.0], [84.5, 11635.0], [84.6, 11641.0], [84.7, 11680.0], [84.8, 11685.0], [84.9, 11693.0], [85.0, 11714.0], [85.1, 11720.0], [85.2, 11725.0], [85.3, 11748.0], [85.4, 11761.0], [85.5, 11771.0], [85.6, 11786.0], [85.7, 11804.0], [85.8, 11835.0], [85.9, 11858.0], [86.0, 11878.0], [86.1, 11891.0], [86.2, 11903.0], [86.3, 11939.0], [86.4, 11964.0], [86.5, 11992.0], [86.6, 12011.0], [86.7, 12038.0], [86.8, 12049.0], [86.9, 12065.0], [87.0, 12078.0], [87.1, 12085.0], [87.2, 12097.0], [87.3, 12135.0], [87.4, 12151.0], [87.5, 12180.0], [87.6, 12188.0], [87.7, 12200.0], [87.8, 12235.0], [87.9, 12251.0], [88.0, 12264.0], [88.1, 12283.0], [88.2, 12309.0], [88.3, 12325.0], [88.4, 12343.0], [88.5, 12360.0], [88.6, 12388.0], [88.7, 12404.0], [88.8, 12410.0], [88.9, 12441.0], [89.0, 12450.0], [89.1, 12483.0], [89.2, 12487.0], [89.3, 12510.0], [89.4, 12518.0], [89.5, 12541.0], [89.6, 12564.0], [89.7, 12582.0], [89.8, 12596.0], [89.9, 12633.0], [90.0, 12656.0], [90.1, 12676.0], [90.2, 12716.0], [90.3, 12726.0], [90.4, 12744.0], [90.5, 12767.0], [90.6, 12770.0], [90.7, 12794.0], [90.8, 12811.0], [90.9, 12822.0], [91.0, 12837.0], [91.1, 12877.0], [91.2, 12904.0], [91.3, 12921.0], [91.4, 12941.0], [91.5, 12972.0], [91.6, 12980.0], [91.7, 13016.0], [91.8, 13031.0], [91.9, 13043.0], [92.0, 13056.0], [92.1, 13072.0], [92.2, 13088.0], [92.3, 13107.0], [92.4, 13113.0], [92.5, 13130.0], [92.6, 13144.0], [92.7, 13170.0], [92.8, 13176.0], [92.9, 13193.0], [93.0, 13228.0], [93.1, 13258.0], [93.2, 13277.0], [93.3, 13305.0], [93.4, 13321.0], [93.5, 13348.0], [93.6, 13373.0], [93.7, 13399.0], [93.8, 13414.0], [93.9, 13441.0], [94.0, 13450.0], [94.1, 13473.0], [94.2, 13509.0], [94.3, 13558.0], [94.4, 13607.0], [94.5, 13672.0], [94.6, 13693.0], [94.7, 13704.0], [94.8, 13726.0], [94.9, 13750.0], [95.0, 13771.0], [95.1, 13785.0], [95.2, 13789.0], [95.3, 13807.0], [95.4, 13812.0], [95.5, 13845.0], [95.6, 13861.0], [95.7, 13880.0], [95.8, 13909.0], [95.9, 13930.0], [96.0, 13935.0], [96.1, 13966.0], [96.2, 13972.0], [96.3, 13986.0], [96.4, 14002.0], [96.5, 14027.0], [96.6, 14042.0], [96.7, 14051.0], [96.8, 14060.0], [96.9, 14093.0], [97.0, 14107.0], [97.1, 14147.0], [97.2, 14164.0], [97.3, 14175.0], [97.4, 14185.0], [97.5, 14210.0], [97.6, 14212.0], [97.7, 14232.0], [97.8, 14253.0], [97.9, 14286.0], [98.0, 14299.0], [98.1, 14338.0], [98.2, 14368.0], [98.3, 14392.0], [98.4, 14415.0], [98.5, 14437.0], [98.6, 14453.0], [98.7, 14493.0], [98.8, 14539.0], [98.9, 14564.0], [99.0, 14593.0], [99.1, 14649.0], [99.2, 14719.0], [99.3, 14802.0], [99.4, 14860.0], [99.5, 14933.0], [99.6, 15043.0], [99.7, 15118.0], [99.8, 15204.0], [99.9, 15742.0], [100.0, 16931.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1292.0, "series": [{"data": [[0.0, 1292.0], [100.0, 43.0], [200.0, 24.0], [300.0, 14.0], [400.0, 14.0], [500.0, 15.0], [600.0, 25.0], [700.0, 26.0], [800.0, 11.0], [900.0, 27.0], [1000.0, 18.0], [1100.0, 21.0], [1200.0, 16.0], [1300.0, 17.0], [1400.0, 17.0], [1500.0, 15.0], [1600.0, 18.0], [1700.0, 26.0], [1800.0, 23.0], [1900.0, 17.0], [2000.0, 22.0], [2100.0, 17.0], [2200.0, 15.0], [2300.0, 24.0], [2400.0, 18.0], [2500.0, 12.0], [2600.0, 19.0], [2700.0, 20.0], [2800.0, 16.0], [2900.0, 24.0], [3000.0, 17.0], [3100.0, 22.0], [3200.0, 17.0], [3300.0, 21.0], [3400.0, 18.0], [3500.0, 25.0], [3600.0, 15.0], [3700.0, 19.0], [3800.0, 15.0], [3900.0, 14.0], [4000.0, 22.0], [4100.0, 17.0], [4200.0, 14.0], [4300.0, 29.0], [4400.0, 23.0], [4500.0, 20.0], [4600.0, 16.0], [4700.0, 16.0], [4800.0, 20.0], [4900.0, 21.0], [5100.0, 28.0], [5000.0, 22.0], [5200.0, 28.0], [5300.0, 21.0], [5600.0, 29.0], [5400.0, 30.0], [5500.0, 23.0], [5800.0, 24.0], [5700.0, 26.0], [6100.0, 19.0], [5900.0, 15.0], [6000.0, 21.0], [6200.0, 30.0], [6300.0, 32.0], [6400.0, 26.0], [6500.0, 26.0], [6600.0, 26.0], [6800.0, 20.0], [6900.0, 20.0], [6700.0, 18.0], [7100.0, 24.0], [7000.0, 17.0], [7300.0, 24.0], [7400.0, 20.0], [7200.0, 19.0], [7600.0, 23.0], [7500.0, 21.0], [7700.0, 23.0], [7900.0, 25.0], [7800.0, 24.0], [8000.0, 21.0], [8100.0, 20.0], [8700.0, 28.0], [8200.0, 21.0], [8400.0, 20.0], [8300.0, 14.0], [8500.0, 22.0], [8600.0, 18.0], [8900.0, 26.0], [8800.0, 27.0], [9000.0, 18.0], [9200.0, 22.0], [9100.0, 15.0], [9300.0, 25.0], [9700.0, 23.0], [9400.0, 18.0], [9600.0, 26.0], [9500.0, 23.0], [9800.0, 26.0], [10000.0, 24.0], [9900.0, 24.0], [10100.0, 26.0], [10200.0, 26.0], [10500.0, 23.0], [10400.0, 24.0], [10600.0, 20.0], [10300.0, 29.0], [10700.0, 22.0], [11000.0, 25.0], [10900.0, 24.0], [10800.0, 25.0], [11100.0, 26.0], [11200.0, 20.0], [11700.0, 33.0], [11300.0, 32.0], [11600.0, 32.0], [11400.0, 33.0], [11500.0, 23.0], [11800.0, 22.0], [12000.0, 29.0], [11900.0, 18.0], [12100.0, 22.0], [12200.0, 21.0], [12500.0, 27.0], [12600.0, 14.0], [12300.0, 23.0], [12700.0, 27.0], [12400.0, 25.0], [13000.0, 26.0], [12900.0, 22.0], [13300.0, 20.0], [12800.0, 20.0], [13200.0, 16.0], [13100.0, 30.0], [13700.0, 26.0], [13600.0, 13.0], [13800.0, 23.0], [13400.0, 20.0], [13500.0, 10.0], [13900.0, 27.0], [14100.0, 24.0], [14000.0, 26.0], [14200.0, 24.0], [14300.0, 15.0], [14500.0, 14.0], [14400.0, 17.0], [14600.0, 7.0], [14800.0, 6.0], [14700.0, 5.0], [15100.0, 5.0], [15200.0, 1.0], [15000.0, 4.0], [14900.0, 7.0], [15300.0, 1.0], [15700.0, 3.0], [15600.0, 1.0], [15500.0, 1.0], [15800.0, 1.0], [16000.0, 1.0], [16900.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 16900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 193.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2920.0, "series": [{"data": [[0.0, 1387.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 193.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2920.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.05773672055427, "minX": 1.699971875E12, "maxY": 2269.5850340136058, "series": [{"data": [[1.699971886E12, 1994.0674846625761], [1.699971887E12, 1833.1257861635224], [1.699971888E12, 1684.5942028985507], [1.699971883E12, 1987.05925925926], [1.699971884E12, 2269.5850340136058], [1.699971885E12, 2160.6235294117637], [1.699971891E12, 1225.0509554140133], [1.699971892E12, 1066.5999999999997], [1.699971893E12, 896.5833333333337], [1.699971889E12, 1539.6118421052631], [1.69997189E12, 1383.6250000000007], [1.699971875E12, 11.464285714285719], [1.699971876E12, 5.05773672055427], [1.699971897E12, 243.59375000000014], [1.699971898E12, 82.23926380368101], [1.699971877E12, 6.8080495356037165], [1.699971894E12, 727.6202531645575], [1.699971895E12, 564.136094674556], [1.699971896E12, 401.5961538461539], [1.699971881E12, 1255.0000000000002], [1.699971882E12, 1617.1496598639455], [1.699971878E12, 148.60576923076923], [1.699971879E12, 555.264900662252], [1.69997188E12, 903.9536423841059]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.699971898E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8.722222222222216, "minX": 1.0, "maxY": 15529.0, "series": [{"data": [[2.0, 9.625], [3.0, 248.60169491525423], [4.0, 8.722222222222216], [5.0, 92.0529411764706], [6.0, 156.0564102564103], [7.0, 93.54255319148936], [8.0, 9.260869565217392], [9.0, 378.4875], [10.0, 318.89130434782606], [11.0, 809.3888888888888], [12.0, 1779.5], [13.0, 1806.5], [14.0, 22.666666666666668], [15.0, 4159.285714285714], [16.0, 18.5], [17.0, 4885.833333333333], [18.0, 2455.8333333333335], [19.0, 2961.4], [20.0, 4878.333333333333], [21.0, 2898.4], [22.0, 4935.0], [23.0, 2397.5], [24.0, 4831.333333333333], [25.0, 4855.333333333333], [26.0, 2153.5714285714284], [27.0, 3625.0], [28.0, 68.0], [29.0, 7186.0], [30.0, 5284.666666666667], [31.0, 14163.0], [33.0, 7226.0], [32.0, 4873.0], [34.0, 7073.0], [35.0, 7592.0], [37.0, 7050.5], [36.0, 4732.333333333333], [39.0, 2554.6666666666665], [38.0, 2927.4], [40.0, 48.666666666666664], [41.0, 7123.25], [42.0, 4873.333333333333], [43.0, 24.0], [45.0, 3610.5], [44.0, 5684.2], [46.0, 4965.0], [47.0, 3759.0], [48.0, 4864.666666666667], [49.0, 7149.0], [51.0, 4824.666666666667], [50.0, 14693.0], [53.0, 14057.0], [52.0, 15101.0], [55.0, 7265.75], [54.0, 97.0], [57.0, 15080.0], [56.0, 15122.0], [59.0, 15504.0], [58.0, 14758.0], [61.0, 7839.0], [60.0, 14092.0], [63.0, 14363.0], [62.0, 14365.0], [67.0, 14515.0], [66.0, 13980.0], [64.0, 14923.0], [70.0, 14954.0], [69.0, 14002.0], [68.0, 14164.0], [72.0, 83.0], [73.0, 7291.75], [75.0, 15529.0], [74.0, 14211.0], [79.0, 7435.5], [78.0, 4921.333333333333], [77.0, 15049.0], [76.0, 14363.0], [80.0, 3550.75], [83.0, 14471.0], [82.0, 14185.0], [81.0, 14171.0], [84.0, 4861.0], [86.0, 154.0], [87.0, 14932.5], [85.0, 13992.0], [91.0, 14620.0], [90.0, 14017.0], [89.0, 13966.0], [88.0, 14381.0], [93.0, 7048.0], [94.0, 7003.5], [95.0, 14921.0], [92.0, 14175.0], [98.0, 7216.5], [99.0, 14416.0], [97.0, 14420.5], [103.0, 7065.0], [102.0, 14100.0], [101.0, 13896.0], [100.0, 15315.0], [104.0, 102.0], [107.0, 14051.0], [106.0, 13920.0], [105.0, 13997.5], [111.0, 14040.0], [109.0, 14223.0], [108.0, 14956.0], [114.0, 14212.0], [113.0, 14293.0], [119.0, 14161.0], [118.0, 14879.0], [117.0, 13845.0], [116.0, 14186.0], [120.0, 99.0], [123.0, 121.83333333333333], [122.0, 6998.0], [121.0, 14023.0], [125.0, 2973.4], [124.0, 3556.5], [127.0, 3513.5], [126.0, 6974.0], [131.0, 7359.5], [132.0, 7316.5], [133.0, 4765.0], [134.0, 7417.0], [130.0, 13938.0], [129.0, 13966.0], [128.0, 14952.0], [139.0, 4652.333333333333], [142.0, 9683.0], [143.0, 14054.0], [140.0, 13841.0], [138.0, 13801.0], [137.0, 14005.0], [136.0, 13807.0], [151.0, 9233.666666666666], [149.0, 14169.0], [148.0, 13772.0], [147.0, 14212.0], [146.0, 13909.0], [145.0, 14104.5], [154.0, 3560.25], [155.0, 2962.2], [157.0, 3761.25], [156.0, 4811.333333333333], [159.0, 14299.0], [153.0, 13785.0], [152.0, 13789.0], [167.0, 13758.0], [166.0, 15204.0], [165.0, 13668.0], [164.0, 13750.0], [163.0, 14125.0], [161.0, 14008.0], [172.0, 143.0], [171.0, 237.0], [170.0, 6946.0], [169.0, 5524.333333333333], [168.0, 7248.0], [175.0, 13772.0], [174.0, 13807.0], [173.0, 13744.333333333334], [183.0, 6978.0], [182.0, 7314.0], [181.0, 14457.0], [180.0, 13823.0], [179.0, 14391.0], [178.0, 14002.0], [177.0, 14092.0], [176.0, 13528.0], [184.0, 7265.0], [186.0, 6942.0], [185.0, 7100.5], [190.0, 8233.4], [187.0, 13720.0], [199.0, 13473.0], [198.0, 13788.0], [197.0, 13964.0], [196.0, 13456.0], [195.0, 13458.0], [194.0, 14368.0], [193.0, 13557.0], [192.0, 13695.0], [201.0, 7962.5], [203.0, 4944.0], [204.0, 4502.333333333333], [206.0, 7503.5], [207.0, 13247.0], [205.0, 15138.0], [202.0, 13771.0], [200.0, 13607.0], [215.0, 13222.0], [214.0, 13228.0], [213.0, 13209.0], [212.0, 13277.0], [211.0, 13364.0], [210.0, 13861.0], [209.0, 13280.0], [208.0, 14286.0], [218.0, 7376.0], [223.0, 13681.0], [222.0, 13258.0], [221.0, 13778.0], [220.0, 13173.0], [219.0, 13450.0], [217.0, 13330.0], [228.0, 8949.333333333334], [227.0, 163.0], [231.0, 13681.0], [230.0, 13348.0], [229.0, 13177.0], [226.0, 13155.0], [225.0, 13193.0], [224.0, 13430.0], [239.0, 6591.5], [238.0, 13560.0], [236.0, 13364.0], [235.0, 13101.0], [234.0, 14608.0], [233.0, 13880.0], [232.0, 13147.0], [240.0, 3628.5], [241.0, 96.0], [244.0, 6659.5], [247.0, 14289.0], [246.0, 13142.0], [245.0, 13107.0], [243.0, 13988.0], [242.0, 13476.5], [248.0, 6906.0], [252.0, 6753.5], [255.0, 7114.5], [254.0, 13072.0], [253.0, 13217.0], [251.0, 13176.0], [250.0, 14564.0], [249.0, 13175.0], [258.0, 2415.333333333333], [256.0, 4697.0], [259.0, 4628.666666666667], [270.0, 13385.0], [269.0, 13083.5], [260.0, 3551.75], [261.0, 14315.0], [262.0, 257.0], [263.0, 7070.25], [257.0, 6943.5], [267.0, 6734.0], [266.0, 13037.0], [265.0, 13056.0], [264.0, 13497.0], [271.0, 13441.0], [286.0, 6819.5], [283.0, 4453.0], [284.0, 7685.5], [285.0, 13406.0], [282.0, 13447.0], [281.0, 13190.0], [280.0, 13043.0], [279.0, 13170.0], [273.0, 13179.0], [272.0, 13450.0], [275.0, 14042.0], [274.0, 13170.0], [278.0, 13016.0], [277.0, 13947.0], [276.0, 13038.0], [302.0, 6837.5], [301.0, 3627.5], [303.0, 13766.0], [300.0, 12906.0], [299.0, 14583.0], [298.0, 12889.0], [297.0, 13369.0], [296.0, 13263.0], [295.0, 13253.0], [289.0, 13698.0], [288.0, 13672.0], [291.0, 13496.0], [290.0, 13726.0], [294.0, 13178.0], [293.0, 13563.0], [292.0, 13001.0], [319.0, 12815.0], [308.0, 7599.5], [309.0, 13934.0], [311.0, 12980.0], [305.0, 13331.0], [304.0, 13122.0], [307.0, 12974.0], [306.0, 13058.0], [310.0, 12850.0], [316.0, 3111.6], [315.0, 6693.5], [318.0, 12807.0], [317.0, 13016.0], [314.0, 13088.0], [313.0, 13130.0], [312.0, 13113.0], [334.0, 12753.0], [330.0, 4577.0], [332.0, 6789.0], [331.0, 6728.5], [335.0, 12746.0], [333.0, 13149.0], [329.0, 12837.0], [328.0, 14046.0], [327.0, 13097.0], [321.0, 12980.0], [320.0, 13935.0], [323.0, 13424.0], [322.0, 13457.0], [326.0, 13251.0], [324.0, 12822.0], [350.0, 12888.0], [336.0, 6689.5], [340.0, 583.3333333333334], [341.0, 12769.5], [343.0, 12974.0], [342.0, 13966.0], [338.0, 4719.333333333333], [337.0, 12933.0], [339.0, 12774.0], [351.0, 13228.0], [345.0, 13860.0], [344.0, 13509.0], [349.0, 12723.0], [348.0, 12716.0], [347.0, 12826.0], [346.0, 13092.0], [366.0, 13336.0], [367.0, 4932.0], [365.0, 12905.0], [364.0, 12647.0], [363.0, 13506.0], [362.0, 12822.0], [361.0, 13390.0], [360.0, 12751.0], [359.0, 14226.0], [352.0, 13132.0], [354.0, 12997.0], [353.0, 12867.0], [358.0, 12960.0], [357.0, 12726.0], [356.0, 12887.0], [381.0, 12782.0], [368.0, 4535.666666666667], [375.0, 12578.0], [374.0, 12805.0], [373.0, 14593.0], [372.0, 13809.0], [369.0, 4855.333333333334], [371.0, 6719.0], [370.0, 13812.0], [379.0, 6629.0], [383.0, 6627.0], [382.0, 3036.4], [380.0, 12633.0], [378.0, 12839.0], [376.0, 12744.0], [398.0, 4902.666666666667], [386.0, 6502.0], [385.0, 12768.0], [384.0, 13446.0], [387.0, 12505.0], [391.0, 12794.0], [390.0, 13076.0], [388.0, 12638.0], [394.0, 8585.666666666666], [393.0, 413.5], [396.0, 4749.0], [397.0, 6929.0], [395.0, 7122.5], [399.0, 6702.5], [392.0, 12929.0], [413.0, 12672.0], [412.0, 6468.5], [403.0, 12483.0], [402.0, 12473.0], [401.0, 13426.0], [400.0, 13980.0], [415.0, 8679.0], [411.0, 12706.0], [410.0, 12656.0], [409.0, 13571.0], [408.0, 12726.0], [407.0, 12486.0], [406.0, 13321.0], [405.0, 12470.0], [404.0, 12721.0], [428.0, 6734.0], [417.0, 6514.5], [419.0, 12897.0], [418.0, 14026.0], [416.0, 6668.0], [421.0, 984.0], [420.0, 13931.0], [423.0, 12588.0], [422.0, 12683.5], [431.0, 4710.666666666667], [430.0, 13202.0], [427.0, 12345.0], [426.0, 12450.0], [425.0, 12404.0], [424.0, 13787.0], [446.0, 12279.0], [435.0, 3271.8], [437.0, 6534.5], [436.0, 12355.0], [439.0, 12388.0], [432.0, 12343.0], [434.0, 12388.0], [433.0, 12360.0], [438.0, 13428.0], [447.0, 12455.0], [445.0, 12725.5], [444.0, 12320.0], [443.0, 13112.0], [441.0, 12323.0], [440.0, 12525.0], [462.0, 12418.0], [451.0, 7172.5], [450.0, 6778.25], [453.0, 6875.0], [452.0, 12336.0], [455.0, 6605.5], [448.0, 12692.0], [454.0, 12716.0], [457.0, 4638.333333333334], [458.0, 3699.25], [459.0, 14069.0], [463.0, 12393.0], [456.0, 12252.0], [461.0, 12765.0], [460.0, 12233.0], [478.0, 12141.0], [467.0, 540.5], [470.0, 6677.5], [469.0, 12299.0], [468.0, 12199.5], [471.0, 12172.0], [464.0, 13986.0], [466.0, 12643.0], [465.0, 12441.0], [479.0, 12529.0], [477.0, 12919.0], [476.0, 12447.0], [475.0, 12402.0], [473.0, 13060.0], [472.0, 12161.0], [494.0, 3099.0], [480.0, 719.5], [481.0, 12718.0], [483.0, 12458.0], [482.0, 12668.0], [487.0, 13063.0], [486.0, 12726.0], [485.0, 13929.0], [484.0, 12135.0], [495.0, 12103.0], [493.0, 12078.0], [492.0, 12077.0], [491.0, 13413.0], [490.0, 12083.0], [489.0, 13615.0], [488.0, 13972.0], [509.0, 12277.0], [496.0, 6333.5], [499.0, 8481.666666666666], [497.0, 12251.0], [508.0, 12278.0], [502.0, 6561.0], [501.0, 6439.0], [500.0, 12735.0], [503.0, 4559.0], [506.0, 6724.0], [505.0, 12264.0], [504.0, 12541.0], [511.0, 12276.0], [510.0, 12028.0], [542.0, 12085.0], [524.0, 3342.2], [522.0, 12425.0], [520.0, 12372.0], [528.0, 6474.5], [540.0, 12041.0], [538.0, 12904.0], [536.0, 12200.0], [518.0, 11999.0], [516.0, 12344.0], [514.0, 12565.0], [512.0, 13345.0], [534.0, 12193.0], [532.0, 11934.0], [530.0, 12309.0], [572.0, 11860.0], [556.0, 6316.5], [554.0, 3684.25], [552.0, 12151.0], [558.0, 1156.0], [546.0, 11941.0], [544.0, 11891.0], [550.0, 12063.0], [548.0, 11869.0], [574.0, 11746.0], [560.0, 11879.0], [570.0, 12357.0], [568.0, 11786.0], [564.0, 12811.0], [562.0, 12097.0], [604.0, 12189.0], [586.0, 6251.0], [588.0, 9434.666666666666], [592.0, 825.0], [596.0, 6441.0], [594.0, 12079.0], [600.0, 6301.5], [590.0, 11752.0], [578.0, 11720.0], [576.0, 11770.0], [582.0, 11837.5], [580.0, 11714.0], [606.0, 11910.0], [602.0, 12134.5], [598.0, 12335.0], [634.0, 12799.0], [612.0, 6283.5], [614.0, 6727.0], [632.0, 11693.0], [618.0, 8016.666666666667], [620.0, 6508.5], [622.0, 4733.333333333334], [610.0, 12205.0], [628.0, 6394.5], [624.0, 11545.0], [638.0, 11941.0], [636.0, 11658.0], [670.0, 11698.0], [656.0, 3720.75], [664.0, 4452.333333333334], [646.0, 12506.0], [644.0, 11635.0], [666.0, 4662.333333333334], [668.0, 11429.0], [662.0, 11408.0], [660.0, 11890.0], [658.0, 11416.0], [654.0, 11458.0], [652.0, 11507.0], [650.0, 12260.0], [648.0, 13373.0], [702.0, 11389.0], [676.0, 8196.0], [688.0, 6414.5], [700.0, 11322.0], [696.0, 11292.0], [678.0, 11565.0], [672.0, 6589.5], [674.0, 11367.0], [684.0, 6199.5], [682.0, 11358.0], [680.0, 11687.0], [686.0, 8010.0], [690.0, 1008.0], [692.0, 5661.666666666667], [694.0, 11409.0], [732.0, 11142.0], [724.0, 3312.2], [710.0, 1106.0], [708.0, 11256.0], [706.0, 11257.0], [704.0, 12038.0], [718.0, 11389.0], [716.0, 11547.0], [714.0, 11870.5], [712.0, 11231.0], [726.0, 3073.833333333333], [734.0, 11683.0], [730.0, 11756.0], [728.0, 11419.0], [722.0, 11903.0], [720.0, 12101.0], [766.0, 11246.0], [752.0, 8724.333333333334], [740.0, 6339.5], [736.0, 12011.0], [742.0, 13015.5], [762.0, 6469.5], [748.0, 6227.5], [746.0, 11114.0], [744.0, 11274.0], [750.0, 11626.0], [756.0, 1142.0], [758.0, 3631.0], [764.0, 11277.0], [754.0, 11338.0], [796.0, 11004.0], [780.0, 6935.0], [778.0, 11206.0], [776.0, 10897.0], [782.0, 11072.0], [770.0, 12611.0], [768.0, 11580.0], [774.0, 11358.5], [772.0, 10958.0], [798.0, 4932.0], [794.0, 11112.0], [792.0, 11024.5], [790.0, 11005.0], [788.0, 11294.0], [786.0, 11247.0], [784.0, 11166.5], [826.0, 6270.5], [800.0, 4812.0], [806.0, 6299.5], [802.0, 11095.0], [808.0, 4725.666666666666], [810.0, 11168.0], [812.0, 6409.5], [814.0, 11018.0], [830.0, 10699.0], [828.0, 10702.0], [824.0, 11022.0], [822.0, 13071.0], [820.0, 11437.0], [818.0, 11021.0], [862.0, 5264.666666666666], [832.0, 7998.666666666667], [842.0, 6138.0], [840.0, 10754.0], [846.0, 11036.0], [844.0, 11737.0], [848.0, 6334.5], [850.0, 11891.0], [860.0, 11365.0], [858.0, 12050.0], [856.0, 10637.0], [838.0, 11022.0], [836.0, 10893.0], [834.0, 12521.0], [854.0, 11765.0], [852.0, 11592.0], [890.0, 6455.5], [868.0, 3858.75], [892.0, 3868.5], [894.0, 1777.5], [888.0, 10949.0], [870.0, 10801.0], [886.0, 10510.0], [884.0, 11014.0], [882.0, 10691.0], [878.0, 10542.0], [864.0, 10725.0], [876.0, 10517.0], [874.0, 10864.0], [924.0, 11505.0], [896.0, 4643.333333333334], [898.0, 10785.0], [902.0, 12090.5], [900.0, 10689.0], [912.0, 1457.0], [916.0, 6279.5], [926.0, 6166.0], [922.0, 11467.0], [920.0, 10630.0], [914.0, 10964.0], [910.0, 11436.0], [906.0, 10494.0], [904.0, 10457.0], [954.0, 6334.0], [930.0, 5958.5], [934.0, 5074.333333333334], [932.0, 11238.5], [940.0, 6181.5], [936.0, 10292.0], [942.0, 10797.0], [928.0, 10686.0], [958.0, 10392.0], [956.0, 10535.0], [952.0, 10388.0], [950.0, 10344.0], [948.0, 11178.0], [946.0, 10792.0], [944.0, 11033.0], [984.0, 7939.0], [960.0, 6291.0], [962.0, 10224.0], [966.0, 10368.5], [964.0, 11804.0], [974.0, 11836.0], [972.0, 10210.0], [970.0, 10328.0], [968.0, 10336.0], [976.0, 5961.0], [978.0, 6456.0], [980.0, 4513.0], [982.0, 6638.5], [986.0, 6491.5], [988.0, 1784.0], [1022.0, 11331.0], [1018.0, 5856.0], [998.0, 10246.0], [996.0, 10117.0], [994.0, 10444.0], [1006.0, 9333.0], [1004.0, 10336.0], [1002.0, 10575.0], [1000.0, 10212.0], [992.0, 6362.5], [1012.0, 2246.5], [1020.0, 9951.0], [1014.0, 10015.0], [1010.0, 10160.0], [1008.0, 10102.0], [1036.0, 4607.333333333334], [1028.0, 7304.0], [1024.0, 10475.0], [1032.0, 10183.0], [1056.0, 6023.0], [1084.0, 10420.0], [1080.0, 10196.0], [1076.0, 5908.5], [1072.0, 9785.0], [1060.0, 9893.0], [1064.0, 9807.0], [1068.0, 9930.0], [1044.0, 9873.0], [1040.0, 10982.0], [1048.0, 10558.0], [1052.0, 9862.0], [1100.0, 10013.0], [1088.0, 5789.0], [1092.0, 6719.5], [1096.0, 9659.0], [1136.0, 12088.0], [1140.0, 6052.0], [1144.0, 10175.0], [1148.0, 6033.5], [1120.0, 10460.0], [1124.0, 2034.5], [1128.0, 4665.666666666666], [1132.0, 10355.0], [1104.0, 10795.0], [1108.0, 9645.0], [1112.0, 10218.0], [1116.0, 10293.0], [1160.0, 4751.666666666666], [1156.0, 6298.5], [1164.0, 9838.0], [1200.0, 10114.0], [1204.0, 3910.0], [1180.0, 5763.5], [1176.0, 9341.0], [1172.0, 9565.0], [1184.0, 9721.5], [1188.0, 10545.0], [1212.0, 10070.0], [1208.0, 9229.0], [1196.0, 7494.666666666667], [1192.0, 9268.0], [1220.0, 4423.25], [1272.0, 9093.0], [1216.0, 9173.0], [1224.0, 10006.0], [1244.0, 9407.0], [1240.0, 9269.0], [1236.0, 10080.0], [1232.0, 9110.0], [1248.0, 9139.0], [1252.0, 9528.0], [1256.0, 9769.0], [1260.0, 8987.0], [1276.0, 8906.0], [1268.0, 8954.0], [1264.0, 9863.0], [1228.0, 9115.5], [1280.0, 8877.0], [1328.0, 6664.0], [1340.0, 2317.0], [1304.0, 9517.0], [1300.0, 9290.0], [1296.0, 9113.0], [1284.0, 9046.0], [1288.0, 8951.0], [1292.0, 8928.0], [1308.0, 8806.0], [1316.0, 4648.666666666666], [1320.0, 9937.0], [1324.0, 5518.0], [1336.0, 8665.0], [1332.0, 9314.0], [1312.0, 8838.0], [1356.0, 8703.0], [1344.0, 6070.5], [1348.0, 9524.0], [1352.0, 4755.0], [1396.0, 8799.0], [1392.0, 8554.5], [1400.0, 8824.0], [1380.0, 5697.5], [1384.0, 9790.0], [1388.0, 4159.5], [1376.0, 5506.5], [1404.0, 5940.25], [1360.0, 8586.0], [1364.0, 8704.0], [1372.0, 8760.0], [1420.0, 8416.0], [1412.0, 5703.5], [1464.0, 5952.5], [1460.0, 4783.0], [1456.0, 8236.0], [1416.0, 8391.0], [1428.0, 8303.0], [1424.0, 9142.0], [1432.0, 8547.0], [1408.0, 8772.0], [1436.0, 8254.0], [1448.0, 8431.0], [1444.0, 8417.0], [1440.0, 9414.0], [1480.0, 8744.0], [1492.0, 4355.5], [1488.0, 8078.0], [1524.0, 4274.0], [1520.0, 6483.0], [1484.0, 7970.0], [1476.0, 8856.0], [1472.0, 8023.0], [1496.0, 8290.0], [1504.0, 8218.0], [1508.0, 7895.0], [1512.0, 7969.0], [1516.0, 7859.0], [1532.0, 8020.0], [1528.0, 7885.0], [1592.0, 5379.0], [1552.0, 6207.0], [1556.0, 7629.0], [1588.0, 7719.0], [1568.0, 7628.0], [1572.0, 7577.0], [1576.0, 7729.0], [1596.0, 7773.5], [1584.0, 5439.0], [1548.0, 7876.0], [1536.0, 8106.0], [1564.0, 7632.0], [1580.0, 4913.666666666667], [1604.0, 7928.0], [1652.0, 7678.0], [1648.0, 7253.0], [1612.0, 7614.0], [1656.0, 5369.0], [1660.0, 7586.0], [1600.0, 7972.0], [1608.0, 8116.0], [1628.0, 8367.0], [1624.0, 8112.0], [1620.0, 7764.0], [1616.0, 7526.0], [1644.0, 5807.666666666667], [1636.0, 5841.5], [1632.0, 7336.0], [1640.0, 8588.0], [1716.0, 7670.0], [1712.0, 7138.0], [1724.0, 7260.0], [1720.0, 6902.0], [1700.0, 6309.666666666667], [1704.0, 7039.0], [1708.0, 7301.0], [1680.0, 5473.0], [1684.0, 7960.0], [1692.0, 5334.5], [1688.0, 7964.0], [1664.0, 7176.0], [1668.0, 7223.0], [1672.0, 7339.0], [1676.0, 7125.0], [1728.0, 7887.0], [1784.0, 5262.0], [1732.0, 5683.0], [1736.0, 5148.0], [1776.0, 8736.0], [1748.0, 4566.666666666667], [1744.0, 7546.0], [1752.0, 6786.0], [1756.0, 6840.0], [1764.0, 6613.0], [1760.0, 7427.0], [1788.0, 6669.0], [1780.0, 3176.0], [1768.0, 5138.0], [1772.0, 6671.0], [1796.0, 7087.0], [1852.0, 6860.0], [1840.0, 6300.0], [1804.0, 7762.0], [1844.0, 5148.5], [1816.0, 3398.0], [1812.0, 6679.5], [1808.0, 6502.5], [1792.0, 6528.0], [1820.0, 6466.0], [1828.0, 4661.2], [1832.0, 6985.0], [1836.0, 6477.0], [1824.0, 6333.0], [1868.0, 6347.0], [1912.0, 6328.0], [1908.0, 6252.0], [1904.0, 6019.0], [1888.0, 4781.5], [1916.0, 6056.0], [1872.0, 6207.0], [1856.0, 6422.0], [1860.0, 6875.0], [1864.0, 6218.0], [1884.0, 6580.0], [1900.0, 4987.0], [1896.0, 6339.0], [1892.0, 6936.0], [1932.0, 6019.0], [1972.0, 5230.333333333333], [1920.0, 4456.000000000001], [1928.0, 6234.0], [1924.0, 6529.0], [1976.0, 6096.0], [1952.0, 6844.0], [1956.0, 5911.0], [1980.0, 5688.0], [1936.0, 5988.0], [1940.0, 5860.0], [1944.0, 4756.0], [1948.0, 6266.0], [1960.0, 4762.0], [1964.0, 5748.0], [1992.0, 4899.0], [1996.0, 5146.5], [2012.0, 4717.0], [1984.0, 5745.0], [1988.0, 5759.0], [2044.0, 4524.333333333333], [2040.0, 5441.0], [2036.0, 6121.0], [2032.0, 6362.0], [2024.0, 5620.5], [2020.0, 7397.0], [2016.0, 5609.0], [2028.0, 5660.0], [2008.0, 3654.0], [2004.0, 6208.0], [2000.0, 5701.0], [2056.0, 4927.5], [2152.0, 4630.0], [2088.0, 4980.0], [2080.0, 5421.0], [2096.0, 6912.0], [2048.0, 5545.0], [2104.0, 5501.0], [2120.0, 4531.5], [2144.0, 6034.0], [2072.0, 5469.0], [2064.0, 5932.0], [2168.0, 3965.0], [2160.0, 4945.0], [2112.0, 5436.0], [2128.0, 5101.0], [2136.0, 5458.0], [2200.0, 5006.0], [2280.0, 5846.5], [2176.0, 5125.0], [2224.0, 5198.0], [2216.0, 4828.0], [2192.0, 4953.0], [2184.0, 5030.0], [2208.0, 4784.0], [2256.0, 4617.0], [2264.0, 4559.0], [2272.0, 4783.0], [2288.0, 5178.0], [2240.0, 5258.0], [2248.0, 4592.0], [2296.0, 4451.0], [2304.0, 4750.0], [2312.0, 4361.0], [2320.0, 4296.0], [2145.0, 5149.0], [2049.0, 6099.0], [2065.0, 5321.0], [2073.0, 5353.0], [2153.0, 5040.333333333333], [2161.0, 4951.0], [2169.0, 4950.0], [2113.0, 5178.333333333333], [2121.0, 5255.0], [2137.0, 5032.0], [2081.0, 4705.0], [2097.0, 5345.0], [2105.0, 5304.0], [2201.0, 4868.0], [2297.0, 4794.0], [2233.0, 5500.333333333333], [2225.0, 5287.0], [2217.0, 5090.0], [2193.0, 4849.0], [2185.0, 6800.0], [2273.0, 5249.0], [2281.0, 4685.25], [2289.0, 4393.0], [2241.0, 4686.0], [2209.0, 5303.0], [2249.0, 6250.0], [2257.0, 4940.0], [2305.0, 5361.0], [2313.0, 4580.5], [2321.0, 4285.0], [1029.0, 10105.0], [1037.0, 6005.0], [1025.0, 9958.0], [1053.0, 10043.0], [1049.0, 10219.0], [1045.0, 9883.0], [1041.0, 10101.0], [1033.0, 5967.0], [1081.0, 9905.0], [1085.0, 9999.0], [1077.0, 3812.6], [1073.0, 6280.0], [1061.0, 5925.5], [1057.0, 10365.0], [1065.0, 9809.0], [1069.0, 10849.0], [1141.0, 5873.5], [1137.0, 11321.0], [1145.0, 10658.0], [1121.0, 9695.0], [1149.0, 9937.0], [1125.0, 7247.333333333333], [1129.0, 6671.0], [1101.0, 6186.5], [1097.0, 9645.0], [1105.0, 5857.0], [1089.0, 9658.0], [1117.0, 9567.0], [1113.0, 9963.0], [1109.0, 9617.0], [1153.0, 9764.0], [1157.0, 4621.0], [1181.0, 9369.0], [1177.0, 9546.0], [1173.0, 9880.0], [1169.0, 9752.0], [1205.0, 9985.0], [1201.0, 9328.0], [1165.0, 9668.0], [1161.0, 9412.0], [1209.0, 9692.0], [1197.0, 5999.0], [1189.0, 9392.0], [1185.0, 9354.0], [1213.0, 9939.0], [1273.0, 9170.0], [1249.0, 9107.0], [1253.0, 10319.0], [1257.0, 10272.0], [1277.0, 8906.0], [1269.0, 10654.0], [1265.0, 10220.0], [1217.0, 11833.0], [1221.0, 9542.0], [1225.0, 9924.0], [1229.0, 10162.0], [1245.0, 9899.0], [1241.0, 9378.0], [1237.0, 9370.0], [1233.0, 9225.0], [1261.0, 9003.0], [1329.0, 5719.0], [1341.0, 8844.0], [1321.0, 4055.0], [1317.0, 8745.0], [1325.0, 9012.0], [1293.0, 8824.0], [1289.0, 9385.0], [1285.0, 9010.0], [1281.0, 9991.0], [1305.0, 8875.0], [1301.0, 8921.0], [1297.0, 9729.0], [1313.0, 9225.0], [1333.0, 10476.0], [1405.0, 6064.5], [1357.0, 8615.0], [1353.0, 8786.0], [1393.0, 8498.0], [1345.0, 4666.0], [1349.0, 9202.0], [1377.0, 6091.0], [1381.0, 8550.0], [1385.0, 9481.0], [1389.0, 5589.0], [1401.0, 8447.0], [1397.0, 8551.0], [1369.0, 9638.5], [1365.0, 8599.0], [1361.0, 9579.0], [1421.0, 5866.0], [1457.0, 8199.0], [1413.0, 8697.0], [1417.0, 5682.0], [1465.0, 5557.5], [1469.0, 6471.666666666667], [1461.0, 3816.2], [1425.0, 9331.0], [1433.0, 8367.0], [1437.0, 8256.0], [1449.0, 5422.5], [1453.0, 8183.5], [1441.0, 5738.5], [1445.0, 8979.0], [1473.0, 8512.0], [1521.0, 4184.4], [1493.0, 5474.0], [1489.0, 8815.0], [1497.0, 7906.0], [1477.0, 11721.0], [1481.0, 7969.0], [1501.0, 8052.0], [1525.0, 8030.0], [1505.0, 8235.0], [1509.0, 7846.0], [1513.0, 7833.0], [1517.0, 8153.0], [1533.0, 7787.0], [1549.0, 2837.5], [1585.0, 3360.0], [1553.0, 4571.666666666667], [1589.0, 9036.0], [1593.0, 7486.0], [1597.0, 5571.5], [1561.0, 6826.0], [1557.0, 8637.0], [1537.0, 8485.0], [1541.0, 7782.0], [1545.0, 7695.0], [1565.0, 7630.0], [1569.0, 8715.0], [1581.0, 7566.0], [1613.0, 3072.3333333333335], [1605.0, 5140.0], [1601.0, 8695.0], [1629.0, 7362.0], [1649.0, 7395.0], [1657.0, 5941.0], [1653.0, 7699.0], [1633.0, 8941.0], [1661.0, 7435.0], [1609.0, 7788.0], [1621.0, 7350.0], [1637.0, 3149.0], [1641.0, 6138.0], [1645.0, 2916.0], [1713.0, 7144.0], [1677.0, 5101.333333333333], [1717.0, 8856.0], [1697.0, 4521.75], [1701.0, 6964.0], [1705.0, 7108.0], [1709.0, 6953.0], [1681.0, 7157.0], [1685.0, 8385.0], [1689.0, 7215.0], [1693.0, 5059.0], [1673.0, 7147.0], [1669.0, 7115.0], [1665.0, 7334.0], [1725.0, 6973.0], [1733.0, 7199.0], [1729.0, 7551.0], [1737.0, 6918.0], [1757.0, 7290.0], [1753.0, 6676.0], [1749.0, 6692.0], [1745.0, 6749.0], [1761.0, 4312.666666666667], [1769.0, 7040.0], [1773.0, 6541.0], [1781.0, 5608.333333333333], [1777.0, 7933.0], [1741.0, 7114.0], [1789.0, 6604.0], [1785.0, 6533.0], [1797.0, 6447.0], [1805.0, 4926.666666666667], [1793.0, 4080.8], [1821.0, 6367.0], [1817.0, 6479.5], [1813.0, 7417.0], [1809.0, 7136.0], [1801.0, 5107.25], [1845.0, 5108.0], [1841.0, 7380.0], [1825.0, 4811.666666666667], [1853.0, 6650.0], [1849.0, 6417.5], [1833.0, 6386.0], [1829.0, 6573.0], [1865.0, 5530.0], [1857.0, 7987.0], [1917.0, 4785.5], [1905.0, 4795.5], [1869.0, 6461.0], [1909.0, 6847.0], [1913.0, 6602.0], [1873.0, 6829.0], [1877.0, 5381.0], [1885.0, 3553.5], [1881.0, 6323.5], [1897.0, 4877.0], [1901.0, 7446.0], [1889.0, 4749.5], [1893.0, 6214.0], [1949.0, 6648.0], [1945.0, 3608.5], [1973.0, 4852.5], [1977.0, 4724.0], [1937.0, 6601.0], [1941.0, 6066.0], [1969.0, 6059.5], [1933.0, 5898.0], [1929.0, 6307.0], [1925.0, 6249.0], [1921.0, 6389.0], [1965.0, 6818.0], [1961.0, 6173.0], [1957.0, 5808.0], [1953.0, 7763.0], [2041.0, 6312.0], [2033.0, 5506.0], [2013.0, 4339.0], [1985.0, 5742.0], [2017.0, 4658.5], [2021.0, 6458.0], [2025.0, 6721.0], [2029.0, 5656.0], [2045.0, 6453.0], [1997.0, 5989.0], [1993.0, 5657.0], [1989.0, 5930.0], [2001.0, 4834.0], [2005.0, 5621.0], [2009.0, 4961.666666666667], [2066.0, 6059.0], [2074.0, 3774.0], [2058.0, 5050.333333333333], [2050.0, 4330.666666666667], [2106.0, 5202.0], [2090.0, 6025.0], [2082.0, 5258.0], [2146.0, 5400.0], [2162.0, 4953.0], [2170.0, 5002.0], [2154.0, 4518.0], [2138.0, 6210.0], [2130.0, 5463.5], [2178.0, 5453.0], [2202.0, 4885.0], [2234.0, 4959.0], [2226.0, 4782.0], [2218.0, 4942.0], [2194.0, 4957.0], [2186.0, 6132.0], [2210.0, 4835.0], [2258.0, 4884.0], [2266.0, 4560.5], [2274.0, 4615.0], [2290.0, 4941.5], [2242.0, 5498.0], [2298.0, 5697.0], [2306.0, 4386.5], [2314.0, 4448.0], [2322.0, 4332.0], [2075.0, 6642.0], [2147.0, 4989.0], [2099.0, 4918.666666666667], [2067.0, 5483.0], [2059.0, 5415.0], [2051.0, 6673.0], [2155.0, 4549.6], [2171.0, 4719.0], [2131.0, 4862.0], [2123.0, 6250.0], [2115.0, 5353.0], [2139.0, 5457.0], [2091.0, 4629.5], [2083.0, 5395.0], [2107.0, 5516.0], [2195.0, 4860.0], [2179.0, 4866.0], [2235.0, 4669.0], [2219.0, 4832.0], [2203.0, 4759.0], [2187.0, 5100.0], [2275.0, 4481.666666666667], [2283.0, 4596.5], [2291.0, 4501.0], [2299.0, 4410.0], [2243.0, 5291.0], [2211.0, 5051.0], [2251.0, 4692.0], [2267.0, 5407.0], [2259.0, 6078.0], [2315.0, 4625.5], [2307.0, 4337.0], [2323.0, 4489.0], [543.0, 12735.0], [525.0, 2931.166666666667], [523.0, 3707.0], [521.0, 12247.0], [531.0, 6743.5], [529.0, 11992.0], [541.0, 12767.0], [539.0, 11964.0], [537.0, 11939.0], [527.0, 12716.0], [513.0, 12023.0], [517.0, 12200.0], [515.0, 12046.0], [519.0, 12085.0], [535.0, 12199.0], [533.0, 12368.0], [573.0, 11773.0], [549.0, 6730.0], [551.0, 6832.5], [555.0, 3583.75], [559.0, 12184.5], [547.0, 12407.0], [545.0, 11888.0], [557.0, 11796.0], [553.0, 3709.75], [575.0, 12060.0], [563.0, 11765.0], [561.0, 12126.0], [571.0, 11921.0], [567.0, 12061.5], [565.0, 11761.0], [605.0, 11616.0], [585.0, 6805.75], [583.0, 6482.0], [591.0, 11719.0], [579.0, 13867.0], [577.0, 12065.0], [589.0, 4750.666666666666], [607.0, 11802.0], [603.0, 11685.0], [599.0, 13672.0], [597.0, 11856.0], [595.0, 12235.0], [593.0, 11723.5], [637.0, 11591.0], [613.0, 6815.5], [615.0, 6542.0], [621.0, 4611.666666666666], [617.0, 11612.0], [623.0, 11891.0], [611.0, 12186.0], [609.0, 12188.0], [639.0, 11470.0], [627.0, 11638.0], [635.0, 12365.0], [633.0, 11716.0], [631.0, 11658.5], [629.0, 12017.0], [667.0, 11877.0], [643.0, 5363.4], [655.0, 6213.5], [641.0, 11706.0], [653.0, 11640.0], [651.0, 11826.0], [663.0, 4641.666666666666], [665.0, 6304.0], [647.0, 12870.0], [645.0, 11598.0], [671.0, 11354.0], [669.0, 11660.0], [661.0, 11412.0], [657.0, 11786.0], [701.0, 11567.0], [689.0, 6467.0], [697.0, 6518.5], [691.0, 8030.333333333333], [695.0, 4742.0], [703.0, 11735.0], [699.0, 11352.5], [693.0, 11646.0], [687.0, 11878.0], [679.0, 11463.0], [677.0, 11479.0], [683.0, 11450.0], [681.0, 11336.0], [735.0, 6302.5], [711.0, 8397.666666666666], [729.0, 1249.5], [733.0, 11172.0], [731.0, 11335.0], [715.0, 6408.0], [719.0, 11976.0], [705.0, 11684.0], [709.0, 11330.0], [707.0, 11240.0], [717.0, 11223.0], [723.0, 6528.0], [721.0, 11377.0], [725.0, 3935.0], [727.0, 6137.0], [767.0, 6329.0], [741.0, 1369.0], [739.0, 8605.666666666666], [737.0, 11679.0], [761.0, 7969.333333333333], [743.0, 11139.0], [765.0, 11407.0], [763.0, 11748.0], [747.0, 6272.0], [745.0, 11118.0], [749.0, 11624.0], [753.0, 6351.5], [755.0, 11049.0], [757.0, 8201.333333333334], [759.0, 11755.0], [797.0, 11104.0], [773.0, 1495.75], [771.0, 11320.0], [769.0, 12303.0], [775.0, 11152.0], [793.0, 6285.0], [795.0, 6162.5], [799.0, 11094.0], [789.0, 10885.0], [787.0, 11777.0], [785.0, 11437.0], [781.0, 10950.0], [779.0, 11155.0], [777.0, 10890.0], [827.0, 5990.5], [801.0, 4878.333333333334], [805.0, 10816.0], [803.0, 10859.0], [809.0, 5990.0], [813.0, 10756.0], [811.0, 10735.0], [815.0, 6216.0], [823.0, 6502.5], [831.0, 1313.0], [829.0, 11292.0], [825.0, 11448.0], [807.0, 11010.0], [821.0, 12582.0], [819.0, 10748.0], [817.0, 10861.0], [861.0, 3633.4], [833.0, 6397.5], [841.0, 3530.4], [843.0, 10746.0], [847.0, 11480.0], [845.0, 10740.0], [863.0, 4768.333333333334], [859.0, 10583.0], [857.0, 11107.0], [839.0, 11066.0], [835.0, 10935.0], [855.0, 10624.0], [853.0, 10807.0], [851.0, 10609.0], [849.0, 10619.0], [891.0, 6181.5], [889.0, 5194.666666666666], [867.0, 7805.333333333333], [865.0, 10942.0], [869.0, 10858.0], [871.0, 4471.333333333334], [873.0, 6532.25], [877.0, 11000.0], [875.0, 10985.0], [879.0, 11329.0], [893.0, 6108.5], [895.0, 10965.5], [887.0, 10530.0], [885.0, 10512.0], [883.0, 10569.0], [881.0, 10709.0], [925.0, 4823.333333333334], [909.0, 7943.0], [907.0, 10461.0], [905.0, 10596.0], [911.0, 11080.0], [897.0, 10480.0], [903.0, 10480.0], [899.0, 10932.0], [921.0, 6234.0], [923.0, 6039.0], [927.0, 10352.0], [919.0, 10582.0], [917.0, 10380.0], [915.0, 10864.0], [913.0, 11009.0], [953.0, 4936.333333333334], [931.0, 2144.5], [933.0, 5979.5], [935.0, 11442.0], [937.0, 4892.666666666666], [939.0, 7880.0], [943.0, 10795.0], [929.0, 10588.0], [941.0, 10645.0], [945.0, 4952.0], [955.0, 6253.5], [959.0, 10863.0], [957.0, 10301.0], [949.0, 6355.0], [947.0, 10960.0], [951.0, 10323.0], [989.0, 5996.75], [971.0, 6266.5], [967.0, 6474.0], [963.0, 12049.0], [961.0, 10900.0], [975.0, 10227.0], [973.0, 11317.0], [969.0, 6079.0], [991.0, 10510.0], [977.0, 10239.0], [987.0, 10130.0], [985.0, 10445.0], [981.0, 10159.0], [979.0, 10263.0], [1017.0, 10191.5], [1001.0, 4766.0], [1007.0, 11382.0], [995.0, 10443.0], [993.0, 10096.0], [999.0, 10299.0], [997.0, 11145.0], [1003.0, 10892.0], [1009.0, 5895.0], [1011.0, 4314.25], [1013.0, 7901.0], [1015.0, 10287.0], [1021.0, 9950.0], [1019.0, 10030.0], [1038.0, 4895.666666666666], [1026.0, 10625.0], [1030.0, 10239.0], [1034.0, 4290.5], [1082.0, 10056.0], [1078.0, 5819.5], [1074.0, 3841.0], [1058.0, 6518.5], [1062.0, 11150.0], [1066.0, 10238.0], [1046.0, 5805.0], [1042.0, 9849.0], [1050.0, 9825.0], [1054.0, 10621.0], [1142.0, 9702.0], [1138.0, 6194.0], [1090.0, 10311.0], [1102.0, 5801.5], [1098.0, 9937.0], [1094.0, 9661.5], [1146.0, 9448.0], [1150.0, 5861.5], [1122.0, 9620.0], [1126.0, 9788.0], [1130.0, 9926.0], [1134.0, 6049.25], [1106.0, 2726.0], [1110.0, 9670.0], [1114.0, 9593.0], [1118.0, 9552.0], [1158.0, 3721.8], [1162.0, 4783.333333333334], [1154.0, 9473.0], [1166.0, 5897.0], [1202.0, 4523.0], [1206.0, 5950.5], [1178.0, 9805.0], [1174.0, 9547.0], [1170.0, 10969.0], [1182.0, 9539.0], [1190.0, 5858.0], [1214.0, 9322.0], [1186.0, 9352.0], [1210.0, 11603.0], [1194.0, 9311.5], [1226.0, 5673.5], [1218.0, 9175.0], [1222.0, 9185.0], [1246.0, 10148.0], [1242.0, 9151.0], [1234.0, 9871.0], [1278.0, 8856.0], [1250.0, 9060.0], [1254.0, 9358.0], [1258.0, 9626.0], [1262.0, 9538.0], [1274.0, 8872.0], [1270.0, 10142.0], [1266.0, 10449.0], [1230.0, 9586.0], [1282.0, 10414.0], [1314.0, 4970.0], [1306.0, 5562.0], [1302.0, 9193.0], [1298.0, 8920.0], [1310.0, 9062.0], [1286.0, 8866.0], [1290.0, 9032.0], [1294.0, 8809.0], [1318.0, 9174.0], [1322.0, 9290.0], [1326.0, 8898.0], [1334.0, 8658.0], [1330.0, 8724.0], [1342.0, 6371.0], [1398.0, 9053.0], [1406.0, 5780.0], [1346.0, 9014.0], [1354.0, 9298.0], [1358.0, 9995.0], [1350.0, 5736.5], [1378.0, 2357.0], [1382.0, 8554.0], [1386.0, 9052.0], [1390.0, 8497.0], [1402.0, 3544.0], [1362.0, 6082.0], [1366.0, 8743.0], [1370.0, 8574.0], [1374.0, 6955.0], [1422.0, 9178.0], [1462.0, 5012.666666666667], [1466.0, 5608.5], [1458.0, 8242.0], [1418.0, 8529.0], [1414.0, 8993.0], [1430.0, 6622.0], [1426.0, 8941.0], [1434.0, 8662.0], [1438.0, 5390.0], [1410.0, 8649.0], [1442.0, 5464.5], [1454.0, 8178.0], [1446.0, 8644.0], [1470.0, 8346.0], [1482.0, 8464.0], [1522.0, 4354.5], [1494.0, 5476.0], [1490.0, 8256.0], [1526.0, 7776.0], [1486.0, 8736.0], [1478.0, 8880.0], [1474.0, 8038.0], [1502.0, 8933.0], [1498.0, 7974.0], [1534.0, 7832.0], [1510.0, 8275.0], [1514.0, 7832.0], [1518.0, 7798.0], [1530.0, 7859.0], [1590.0, 4638.0], [1558.0, 5465.5], [1554.0, 8100.0], [1586.0, 7647.0], [1594.0, 5631.5], [1598.0, 7970.0], [1570.0, 7567.0], [1574.0, 7602.5], [1550.0, 6589.0], [1546.0, 9898.0], [1542.0, 7878.0], [1538.0, 7737.0], [1566.0, 7839.0], [1562.0, 9720.0], [1578.0, 4920.6], [1614.0, 7659.5], [1610.0, 5130.5], [1662.0, 7177.0], [1654.0, 5492.0], [1650.0, 8135.0], [1658.0, 7785.0], [1630.0, 5251.5], [1602.0, 7834.0], [1606.0, 7991.0], [1626.0, 7358.5], [1622.0, 7494.0], [1618.0, 7344.0], [1646.0, 6201.666666666667], [1634.0, 7298.0], [1638.0, 7437.5], [1642.0, 7222.0], [1718.0, 4516.333333333333], [1674.0, 7386.0], [1678.0, 4743.666666666667], [1714.0, 6975.0], [1726.0, 5343.5], [1722.0, 7285.5], [1698.0, 7039.0], [1702.0, 7163.0], [1706.0, 6952.0], [1710.0, 7510.0], [1682.0, 7652.0], [1686.0, 3106.0], [1694.0, 6998.0], [1666.0, 8410.0], [1670.0, 8205.0], [1758.0, 6809.0], [1734.0, 6814.0], [1742.0, 7224.0], [1738.0, 6766.0], [1778.0, 7420.0], [1746.0, 6680.0], [1750.0, 8958.0], [1754.0, 3148.0], [1730.0, 6816.0], [1790.0, 3268.0], [1782.0, 6541.0], [1766.0, 4916.25], [1770.0, 6916.0], [1774.0, 6666.0], [1794.0, 3137.0], [1842.0, 6464.0], [1806.0, 6465.0], [1798.0, 9386.0], [1846.0, 5111.0], [1814.0, 6757.0], [1810.0, 6520.0], [1818.0, 6835.0], [1822.0, 6363.0], [1830.0, 6503.0], [1834.0, 6308.0], [1838.0, 7001.5], [1826.0, 5031.0], [1854.0, 6272.0], [1850.0, 6318.0], [1870.0, 7186.0], [1866.0, 4650.0], [1914.0, 4838.5], [1910.0, 6003.0], [1906.0, 7005.0], [1918.0, 5918.0], [1874.0, 4846.0], [1882.0, 6780.0], [1878.0, 6522.0], [1886.0, 6642.0], [1858.0, 6299.0], [1862.0, 6471.5], [1890.0, 5008.5], [1898.0, 6216.0], [1894.0, 6783.0], [1902.0, 4259.0], [1934.0, 5895.0], [1970.0, 5872.0], [1930.0, 7612.0], [1926.0, 6375.0], [1922.0, 6813.0], [1974.0, 6276.0], [1978.0, 5827.0], [1982.0, 6067.0], [1954.0, 6044.0], [1938.0, 4864.0], [1942.0, 5055.5], [1946.0, 4767.6], [1950.0, 7035.0], [1958.0, 4698.0], [1962.0, 6848.0], [1966.0, 5793.0], [1994.0, 5655.0], [2042.0, 5464.0], [1986.0, 4844.666666666667], [2014.0, 5751.5], [1990.0, 5910.0], [2038.0, 5522.5], [2034.0, 6401.0], [1998.0, 5677.0], [2026.0, 4978.5], [2022.0, 5692.0], [2018.0, 6026.0], [2030.0, 5534.0], [2046.0, 6101.0], [2006.0, 5778.0], [2002.0, 5622.0], [2010.0, 4612.666666666667], [2052.0, 6014.0], [2092.0, 5278.0], [2100.0, 5631.0], [2108.0, 4526.5], [2148.0, 5174.0], [2076.0, 6736.0], [2068.0, 5311.0], [2060.0, 5654.0], [2156.0, 5236.25], [2164.0, 5767.5], [2172.0, 4343.666666666667], [2124.0, 4939.0], [2132.0, 5228.0], [2140.0, 5050.0], [2180.0, 4756.5], [2196.0, 5089.0], [2236.0, 4674.0], [2228.0, 4986.0], [2220.0, 5333.0], [2204.0, 4582.0], [2188.0, 5246.0], [2212.0, 4832.5], [2252.0, 4357.0], [2260.0, 5680.0], [2268.0, 4700.0], [2284.0, 4432.5], [2244.0, 4687.0], [2300.0, 5200.0], [2292.0, 4411.0], [2276.0, 4478.0], [2308.0, 4532.0], [2316.0, 5070.0], [2324.0, 5294.0], [2157.0, 5292.0], [2149.0, 5431.0], [2077.0, 5061.0], [2053.0, 4772.666666666667], [2061.0, 5611.0], [2069.0, 5463.0], [2165.0, 5100.0], [2173.0, 5190.333333333333], [2117.0, 5384.0], [2133.0, 5626.0], [2125.0, 5108.0], [2141.0, 5744.0], [2085.0, 5424.0], [2093.0, 5877.0], [2101.0, 5334.0], [2109.0, 5314.666666666667], [2197.0, 5586.0], [2245.0, 4557.0], [2181.0, 4564.0], [2237.0, 4817.0], [2229.0, 4811.0], [2221.0, 4829.0], [2189.0, 4938.0], [2205.0, 5393.0], [2285.0, 4388.0], [2293.0, 4802.0], [2301.0, 4565.0], [2213.0, 4676.333333333333], [2253.0, 4869.0], [2269.0, 4863.333333333333], [2261.0, 4553.0], [2309.0, 4374.0], [2325.0, 4499.0], [2317.0, 5489.0], [1031.0, 10406.0], [1083.0, 9718.0], [1027.0, 2216.0], [1055.0, 10305.0], [1051.0, 10299.0], [1047.0, 9891.0], [1043.0, 10366.0], [1035.0, 6392.0], [1079.0, 2247.0], [1075.0, 6028.5], [1039.0, 10090.0], [1059.0, 10372.0], [1063.0, 9775.0], [1067.0, 10095.0], [1071.0, 9796.5], [1087.0, 10038.0], [1143.0, 9566.0], [1103.0, 2238.0], [1091.0, 6102.0], [1139.0, 9987.0], [1147.0, 9757.0], [1151.0, 9469.0], [1123.0, 4604.0], [1127.0, 4714.0], [1135.0, 9755.0], [1131.0, 9633.0], [1095.0, 9654.0], [1107.0, 7127.333333333333], [1119.0, 9601.0], [1115.0, 10116.0], [1111.0, 10885.0], [1167.0, 9522.0], [1207.0, 5706.5], [1215.0, 9228.0], [1159.0, 4596.666666666666], [1155.0, 9986.0], [1179.0, 9345.0], [1175.0, 9799.0], [1171.0, 10311.0], [1203.0, 10639.0], [1163.0, 11418.0], [1199.0, 6869.666666666667], [1195.0, 2255.0], [1191.0, 9275.0], [1187.0, 9354.0], [1211.0, 9270.0], [1275.0, 8918.0], [1279.0, 9430.0], [1251.0, 9388.0], [1255.0, 9040.0], [1259.0, 9005.0], [1271.0, 8960.0], [1267.0, 8980.0], [1247.0, 9067.0], [1219.0, 10236.0], [1223.0, 9740.0], [1231.0, 9222.0], [1243.0, 9332.0], [1239.0, 9995.0], [1235.0, 9913.0], [1263.0, 9483.0], [1295.0, 10053.0], [1331.0, 8790.0], [1315.0, 4821.666666666666], [1319.0, 9897.0], [1323.0, 8728.0], [1291.0, 8837.0], [1287.0, 9280.0], [1283.0, 8891.0], [1311.0, 8740.0], [1307.0, 8940.0], [1303.0, 8862.0], [1299.0, 9789.0], [1343.0, 9600.0], [1339.0, 8837.666666666666], [1335.0, 9746.0], [1403.0, 8682.0], [1395.0, 6826.0], [1359.0, 6002.0], [1355.0, 8682.0], [1347.0, 9760.0], [1351.0, 5863.0], [1379.0, 5758.5], [1383.0, 8559.0], [1387.0, 8713.0], [1407.0, 6045.5], [1399.0, 8728.0], [1375.0, 6504.5], [1371.0, 8533.0], [1367.0, 8554.0], [1415.0, 6223.0], [1459.0, 5929.0], [1423.0, 8446.0], [1411.0, 5579.5], [1419.0, 8883.0], [1463.0, 5477.0], [1467.0, 5355.5], [1431.0, 4063.4], [1427.0, 8956.0], [1435.0, 8263.0], [1439.0, 8584.0], [1451.0, 6318.333333333333], [1455.0, 5514.5], [1447.0, 8216.0], [1471.0, 8060.0], [1503.0, 8012.0], [1491.0, 4079.0], [1495.0, 5500.0], [1499.0, 7887.0], [1475.0, 8152.0], [1479.0, 8277.0], [1487.0, 9308.0], [1527.0, 4797.666666666666], [1523.0, 4556.666666666667], [1535.0, 8692.0], [1507.0, 7964.5], [1511.0, 8437.0], [1515.0, 7856.0], [1531.0, 7731.0], [1567.0, 7588.0], [1551.0, 5609.0], [1591.0, 5495.0], [1587.0, 7599.0], [1555.0, 5623.5], [1559.0, 7874.0], [1563.0, 8003.0], [1539.0, 8430.0], [1543.0, 8448.0], [1547.0, 8254.0], [1579.0, 5318.0], [1599.0, 7720.0], [1575.0, 7640.0], [1571.0, 7581.0], [1583.0, 5955.666666666667], [1651.0, 5491.5], [1607.0, 3904.8], [1603.0, 7963.0], [1631.0, 7308.0], [1615.0, 7719.0], [1655.0, 9271.0], [1659.0, 5222.0], [1663.0, 3744.5], [1635.0, 7645.0], [1611.0, 5160.5], [1619.0, 5258.5], [1623.0, 7926.0], [1627.0, 5389.5], [1639.0, 4373.333333333333], [1647.0, 5366.5], [1719.0, 7274.0], [1723.0, 7046.0], [1691.0, 6215.333333333333], [1679.0, 4282.25], [1715.0, 7152.0], [1703.0, 7780.0], [1707.0, 6960.0], [1711.0, 6970.0], [1683.0, 6146.0], [1687.0, 7189.0], [1695.0, 7022.0], [1675.0, 7750.0], [1671.0, 7559.0], [1667.0, 7226.0], [1727.0, 6814.0], [1739.0, 5038.0], [1787.0, 6811.0], [1731.0, 3714.0], [1735.0, 8458.0], [1759.0, 6612.0], [1755.0, 7450.0], [1747.0, 7010.0], [1767.0, 7483.0], [1763.0, 7452.5], [1771.0, 7325.0], [1775.0, 6535.0], [1779.0, 7045.0], [1743.0, 7005.0], [1791.0, 6642.0], [1783.0, 7097.0], [1803.0, 6542.5], [1807.0, 4459.0], [1795.0, 6688.5], [1799.0, 6788.0], [1823.0, 6366.0], [1819.0, 6626.0], [1815.0, 6392.0], [1843.0, 7180.0], [1847.0, 4949.5], [1855.0, 7637.0], [1851.0, 6413.0], [1827.0, 3904.5], [1839.0, 5144.333333333333], [1835.0, 6807.0], [1831.0, 6440.0], [1863.0, 6735.0], [1867.0, 4354.0], [1859.0, 6208.0], [1871.0, 6346.0], [1907.0, 6705.0], [1911.0, 6464.0], [1915.0, 6085.0], [1875.0, 4855.5], [1883.0, 6111.0], [1879.0, 6116.0], [1887.0, 7283.0], [1899.0, 6159.5], [1903.0, 5261.333333333333], [1891.0, 7243.0], [1895.0, 6910.0], [1927.0, 6093.0], [1971.0, 4360.333333333333], [1939.0, 4940.0], [1943.0, 6498.0], [1947.0, 4611.6], [1935.0, 6295.0], [1931.0, 6289.0], [1923.0, 5937.0], [1951.0, 6809.0], [1983.0, 6458.0], [1967.0, 5793.0], [1963.0, 5776.0], [1959.0, 5822.0], [1955.0, 6282.0], [1979.0, 6321.0], [1975.0, 6010.0], [2047.0, 4331.4], [1987.0, 4808.5], [2015.0, 5607.0], [2019.0, 5849.0], [2027.0, 6100.0], [2031.0, 6702.0], [2043.0, 6240.0], [2039.0, 5932.0], [2035.0, 5671.0], [1999.0, 5691.0], [1995.0, 6363.0], [1991.0, 6101.0], [2003.0, 5718.0], [2007.0, 5475.5], [2011.0, 5009.666666666667], [2062.0, 5768.0], [2070.0, 6402.0], [2054.0, 4320.666666666667], [2110.0, 5808.0], [2102.0, 6304.0], [2094.0, 5963.0], [2086.0, 5262.0], [2078.0, 5620.5], [2158.0, 5477.0], [2174.0, 5552.0], [2134.0, 5223.0], [2126.0, 5095.0], [2118.0, 6266.0], [2142.0, 5643.0], [2182.0, 4716.0], [2206.0, 4425.5], [2238.0, 5090.0], [2230.0, 4845.0], [2222.0, 4793.0], [2214.0, 5438.0], [2190.0, 5592.0], [2254.0, 4489.0], [2262.0, 4566.0], [2270.0, 4603.0], [2286.0, 4533.0], [2302.0, 4677.5], [2246.0, 5497.0], [2278.0, 4727.666666666667], [2310.0, 4367.8], [2318.0, 4834.0], [2326.0, 4708.0], [2079.0, 4778.0], [2167.0, 5473.0], [2111.0, 4511.5], [2071.0, 5492.0], [2063.0, 5471.0], [2055.0, 5486.0], [2151.0, 5211.0], [2159.0, 6381.0], [2175.0, 4932.5], [2127.0, 5274.0], [2119.0, 5772.0], [2135.0, 5051.0], [2143.0, 5385.0], [2087.0, 5279.0], [2095.0, 4659.5], [2103.0, 4682.0], [2199.0, 5217.0], [2183.0, 4702.8], [2239.0, 5180.0], [2231.0, 4791.0], [2223.0, 5572.0], [2191.0, 4969.0], [2207.0, 5241.0], [2279.0, 5352.0], [2287.0, 4568.0], [2295.0, 4859.5], [2303.0, 4327.0], [2215.0, 4861.75], [2247.0, 4932.0], [2255.0, 4934.333333333333], [2271.0, 4323.5], [2263.0, 5013.0], [2311.0, 4695.0], [2319.0, 4436.0], [1.0, 2040.8571428571431]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[839.3311111111109, 5460.127111111112]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2326.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 36176.0, "minX": 1.699971875E12, "maxY": 302909.0, "series": [{"data": [[1.699971886E12, 76395.0], [1.699971887E12, 74512.0], [1.699971888E12, 64685.0], [1.699971883E12, 63301.0], [1.699971884E12, 68973.0], [1.699971885E12, 79745.0], [1.699971891E12, 73556.0], [1.699971892E12, 74984.0], [1.699971893E12, 84427.0], [1.699971889E12, 71269.0], [1.69997189E12, 75001.0], [1.699971875E12, 52528.0], [1.699971876E12, 202943.0], [1.699971897E12, 75058.0], [1.699971898E12, 76403.0], [1.699971877E12, 302909.0], [1.699971894E12, 74074.0], [1.699971895E12, 79243.0], [1.699971896E12, 73164.0], [1.699971881E12, 58608.0], [1.699971882E12, 68905.0], [1.699971878E12, 97467.0], [1.699971879E12, 70799.0], [1.69997188E12, 70780.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.699971886E12, 52597.0], [1.699971887E12, 51298.0], [1.699971888E12, 44537.0], [1.699971883E12, 43591.0], [1.699971884E12, 47511.0], [1.699971885E12, 54925.0], [1.699971891E12, 50634.0], [1.699971892E12, 51624.0], [1.699971893E12, 58147.0], [1.699971889E12, 49077.0], [1.69997189E12, 51641.0], [1.699971875E12, 36176.0], [1.699971876E12, 139725.0], [1.699971897E12, 51698.0], [1.699971898E12, 52605.0], [1.699971877E12, 208593.0], [1.699971894E12, 51006.0], [1.699971895E12, 54569.0], [1.699971896E12, 50388.0], [1.699971881E12, 40358.0], [1.699971882E12, 47443.0], [1.699971878E12, 67099.0], [1.699971879E12, 48753.0], [1.69997188E12, 48734.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.699971898E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8.297921478060045, "minX": 1.699971875E12, "maxY": 14356.392638036808, "series": [{"data": [[1.699971886E12, 6021.104294478526], [1.699971887E12, 6711.125786163519], [1.699971888E12, 7427.876811594206], [1.699971883E12, 3988.1111111111104], [1.699971884E12, 4686.455782312927], [1.699971885E12, 5360.399999999997], [1.699971891E12, 9557.936305732484], [1.699971892E12, 10187.875], [1.699971893E12, 10887.905555555557], [1.699971889E12, 8064.519736842106], [1.69997189E12, 8817.031249999996], [1.699971875E12, 35.29464285714288], [1.699971876E12, 8.297921478060045], [1.699971897E12, 13571.393749999996], [1.699971898E12, 14356.392638036808], [1.699971877E12, 8.325077399380806], [1.699971894E12, 11496.55696202531], [1.699971895E12, 12191.071005917156], [1.699971896E12, 12861.384615384615], [1.699971881E12, 2459.3360000000007], [1.699971882E12, 3177.08843537415], [1.699971878E12, 181.43269230769232], [1.699971879E12, 952.5629139072848], [1.69997188E12, 1773.8211920529807]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.699971898E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8.23684210526316, "minX": 1.699971875E12, "maxY": 14356.282208588957, "series": [{"data": [[1.699971886E12, 6021.073619631903], [1.699971887E12, 6711.075471698113], [1.699971888E12, 7427.789855072467], [1.699971883E12, 3988.0518518518506], [1.699971884E12, 4686.346938775513], [1.699971885E12, 5358.876470588239], [1.699971891E12, 9557.751592356688], [1.699971892E12, 10187.831250000003], [1.699971893E12, 10887.827777777773], [1.699971889E12, 8064.519736842106], [1.69997189E12, 8816.987499999997], [1.699971875E12, 34.60714285714283], [1.699971876E12, 8.25866050808314], [1.699971897E12, 13571.35000000001], [1.699971898E12, 14356.282208588957], [1.699971877E12, 8.23684210526316], [1.699971894E12, 11496.531645569616], [1.699971895E12, 12191.035502958575], [1.699971896E12, 12861.14102564102], [1.699971881E12, 2459.2880000000014], [1.699971882E12, 3177.0476190476193], [1.699971878E12, 181.3461538461539], [1.699971879E12, 952.4900662251652], [1.69997188E12, 1773.7682119205306]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.699971898E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.6319018404907976, "minX": 1.699971875E12, "maxY": 11.919642857142858, "series": [{"data": [[1.699971886E12, 1.2085889570552155], [1.699971887E12, 1.1006289308176107], [1.699971888E12, 1.0507246376811592], [1.699971883E12, 1.4296296296296291], [1.699971884E12, 1.0136054421768703], [1.699971885E12, 1.2941176470588238], [1.699971891E12, 1.439490445859873], [1.699971892E12, 0.9625000000000001], [1.699971893E12, 0.8833333333333334], [1.699971889E12, 0.8486842105263158], [1.69997189E12, 0.8750000000000002], [1.699971875E12, 11.919642857142858], [1.699971876E12, 1.5473441108545025], [1.699971897E12, 0.6374999999999997], [1.699971898E12, 0.6319018404907976], [1.699971877E12, 1.1547987616099067], [1.699971894E12, 1.3291139240506329], [1.699971895E12, 1.017751479289941], [1.699971896E12, 0.6602564102564102], [1.699971881E12, 1.4960000000000002], [1.699971882E12, 1.0000000000000007], [1.699971878E12, 1.6634615384615392], [1.699971879E12, 1.1523178807947017], [1.69997188E12, 1.6556291390728475]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.699971898E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.699971875E12, "maxY": 16931.0, "series": [{"data": [[1.699971886E12, 7763.0], [1.699971887E12, 9386.0], [1.699971888E12, 9271.0], [1.699971883E12, 5803.0], [1.699971884E12, 6400.0], [1.699971885E12, 7392.0], [1.699971891E12, 11833.0], [1.699971892E12, 13702.0], [1.699971893E12, 13071.0], [1.699971889E12, 11721.0], [1.69997189E12, 11047.0], [1.699971875E12, 120.0], [1.699971876E12, 24.0], [1.699971897E12, 16035.0], [1.699971898E12, 16931.0], [1.699971877E12, 20.0], [1.699971894E12, 14111.0], [1.699971895E12, 14040.0], [1.699971896E12, 14593.0], [1.699971881E12, 3739.0], [1.699971882E12, 4593.0], [1.699971878E12, 808.0], [1.699971879E12, 1827.0], [1.69997188E12, 2744.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.699971886E12, 6639.2], [1.699971887E12, 7380.0], [1.699971888E12, 8116.1], [1.699971883E12, 4786.400000000001], [1.699971884E12, 5512.6], [1.699971885E12, 5992.7], [1.699971891E12, 10223.2], [1.699971892E12, 10891.3], [1.699971893E12, 11558.1], [1.699971889E12, 8735.300000000001], [1.69997189E12, 9514.5], [1.699971875E12, 87.7], [1.699971876E12, 11.0], [1.699971897E12, 14365.0], [1.699971898E12, 14973.4], [1.699971877E12, 11.0], [1.699971894E12, 12011.9], [1.699971895E12, 12904.0], [1.699971896E12, 13636.0], [1.699971881E12, 3082.0], [1.699971882E12, 3767.8], [1.699971878E12, 506.69999999999993], [1.699971879E12, 1425.2000000000003], [1.69997188E12, 2331.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.699971886E12, 7666.359999999998], [1.699971887E12, 8996.000000000004], [1.699971888E12, 9200.799999999997], [1.699971883E12, 5749.359999999998], [1.699971884E12, 6328.000000000002], [1.699971885E12, 7051.199999999996], [1.699971891E12, 11699.599999999997], [1.699971892E12, 13007.819999999985], [1.699971893E12, 12674.909999999998], [1.699971889E12, 10754.809999999998], [1.69997189E12, 10762.129999999994], [1.699971875E12, 119.61000000000001], [1.699971876E12, 16.659999999999968], [1.699971897E12, 15842.849999999995], [1.699971898E12, 16264.759999999984], [1.699971877E12, 16.0], [1.699971894E12, 14033.119999999999], [1.699971895E12, 13992.400000000001], [1.699971896E12, 14383.810000000003], [1.699971881E12, 3713.5199999999995], [1.699971882E12, 4501.800000000002], [1.699971878E12, 761.73], [1.699971879E12, 1808.2799999999997], [1.69997188E12, 2732.04]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.699971886E12, 6817.0], [1.699971887E12, 7762.0], [1.699971888E12, 8464.499999999998], [1.699971883E12, 5200.8], [1.699971884E12, 5741.0], [1.699971885E12, 6436.849999999999], [1.699971891E12, 10554.4], [1.699971892E12, 11381.65], [1.699971893E12, 11979.349999999999], [1.699971889E12, 8977.699999999999], [1.69997189E12, 9788.5], [1.699971875E12, 103.39999999999998], [1.699971876E12, 13.0], [1.699971897E12, 14592.5], [1.699971898E12, 15152.4], [1.699971877E12, 12.0], [1.699971894E12, 12328.65], [1.699971895E12, 13393.0], [1.699971896E12, 13980.9], [1.699971881E12, 3500.5999999999995], [1.699971882E12, 4088.2], [1.699971878E12, 634.8499999999999], [1.699971879E12, 1568.0], [1.69997188E12, 2450.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.699971886E12, 5311.0], [1.699971887E12, 6003.0], [1.699971888E12, 6676.0], [1.699971883E12, 3213.0], [1.699971884E12, 3952.0], [1.699971885E12, 4669.0], [1.699971891E12, 8809.0], [1.699971892E12, 9448.0], [1.699971893E12, 10159.0], [1.699971889E12, 7435.0], [1.69997189E12, 8092.0], [1.699971875E12, 6.0], [1.699971876E12, 5.0], [1.699971897E12, 12807.0], [1.699971898E12, 13693.0], [1.699971877E12, 5.0], [1.699971894E12, 10802.0], [1.699971895E12, 11468.0], [1.699971896E12, 12141.0], [1.699971881E12, 1807.0], [1.699971882E12, 2542.0], [1.699971878E12, 8.0], [1.699971879E12, 385.0], [1.69997188E12, 1076.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.699971886E12, 5932.0], [1.699971887E12, 6586.0], [1.699971888E12, 7308.5], [1.699971883E12, 3853.0], [1.699971884E12, 4541.0], [1.699971885E12, 5263.5], [1.699971891E12, 9430.0], [1.699971892E12, 10092.5], [1.699971893E12, 10774.0], [1.699971889E12, 7969.0], [1.69997189E12, 8728.0], [1.699971875E12, 16.5], [1.699971876E12, 8.0], [1.699971897E12, 13435.5], [1.699971898E12, 14232.0], [1.699971877E12, 8.0], [1.699971894E12, 11407.5], [1.699971895E12, 12081.0], [1.699971896E12, 12766.5], [1.699971881E12, 2393.0], [1.699971882E12, 3136.0], [1.699971878E12, 98.0], [1.699971879E12, 936.0], [1.69997188E12, 1741.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.699971898E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8.0, "minX": 112.0, "maxY": 12766.5, "series": [{"data": [[135.0, 3853.0], [138.0, 7308.5], [151.0, 1321.5], [147.0, 4042.5], [159.0, 6586.0], [152.0, 7969.0], [157.0, 9430.0], [158.0, 11407.5], [156.0, 12766.5], [646.0, 8.0], [163.0, 10728.0], [160.0, 10101.5], [170.0, 5263.5], [169.0, 12081.0], [180.0, 10774.0], [208.0, 98.0], [433.0, 8.0], [112.0, 16.5], [125.0, 2393.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 646.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 8.0, "minX": 112.0, "maxY": 12766.5, "series": [{"data": [[135.0, 3853.0], [138.0, 7308.0], [151.0, 1321.5], [147.0, 4042.5], [159.0, 6586.0], [152.0, 7969.0], [157.0, 9430.0], [158.0, 11407.5], [156.0, 12766.5], [646.0, 8.0], [163.0, 10728.0], [160.0, 10101.5], [170.0, 5263.5], [169.0, 12081.0], [180.0, 10774.0], [208.0, 98.0], [433.0, 8.0], [112.0, 16.5], [125.0, 2393.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 646.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 115.0, "minX": 1.699971875E12, "maxY": 649.0, "series": [{"data": [[1.699971875E12, 115.0], [1.699971876E12, 435.0], [1.699971877E12, 649.0], [1.699971883E12, 500.0], [1.699971884E12, 223.0], [1.699971881E12, 500.0], [1.699971882E12, 500.0], [1.699971878E12, 578.0], [1.699971879E12, 500.0], [1.69997188E12, 500.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.699971884E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 112.0, "minX": 1.699971875E12, "maxY": 646.0, "series": [{"data": [[1.699971886E12, 163.0], [1.699971887E12, 159.0], [1.699971888E12, 138.0], [1.699971883E12, 135.0], [1.699971884E12, 147.0], [1.699971885E12, 170.0], [1.699971891E12, 157.0], [1.699971892E12, 160.0], [1.699971893E12, 180.0], [1.699971889E12, 152.0], [1.69997189E12, 160.0], [1.699971875E12, 112.0], [1.699971876E12, 433.0], [1.699971897E12, 160.0], [1.699971898E12, 163.0], [1.699971877E12, 646.0], [1.699971894E12, 158.0], [1.699971895E12, 169.0], [1.699971896E12, 156.0], [1.699971881E12, 125.0], [1.699971882E12, 147.0], [1.699971878E12, 208.0], [1.699971879E12, 151.0], [1.69997188E12, 151.0]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.699971898E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 112.0, "minX": 1.699971875E12, "maxY": 646.0, "series": [{"data": [[1.699971886E12, 163.0], [1.699971887E12, 159.0], [1.699971888E12, 138.0], [1.699971883E12, 135.0], [1.699971884E12, 147.0], [1.699971885E12, 170.0], [1.699971891E12, 157.0], [1.699971892E12, 160.0], [1.699971893E12, 180.0], [1.699971889E12, 152.0], [1.69997189E12, 160.0], [1.699971875E12, 112.0], [1.699971876E12, 433.0], [1.699971897E12, 160.0], [1.699971898E12, 163.0], [1.699971877E12, 646.0], [1.699971894E12, 158.0], [1.699971895E12, 169.0], [1.699971896E12, 156.0], [1.699971881E12, 125.0], [1.699971882E12, 147.0], [1.699971878E12, 208.0], [1.699971879E12, 151.0], [1.69997188E12, 151.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.699971898E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 112.0, "minX": 1.699971875E12, "maxY": 646.0, "series": [{"data": [[1.699971886E12, 163.0], [1.699971887E12, 159.0], [1.699971888E12, 138.0], [1.699971883E12, 135.0], [1.699971884E12, 147.0], [1.699971885E12, 170.0], [1.699971891E12, 157.0], [1.699971892E12, 160.0], [1.699971893E12, 180.0], [1.699971889E12, 152.0], [1.69997189E12, 160.0], [1.699971875E12, 112.0], [1.699971876E12, 433.0], [1.699971897E12, 160.0], [1.699971898E12, 163.0], [1.699971877E12, 646.0], [1.699971894E12, 158.0], [1.699971895E12, 169.0], [1.699971896E12, 156.0], [1.699971881E12, 125.0], [1.699971882E12, 147.0], [1.699971878E12, 208.0], [1.699971879E12, 151.0], [1.69997188E12, 151.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.699971898E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

