/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 15601.0, "series": [{"data": [[0.0, 5.0], [0.1, 5.0], [0.2, 6.0], [0.3, 6.0], [0.4, 6.0], [0.5, 6.0], [0.6, 6.0], [0.7, 6.0], [0.8, 6.0], [0.9, 6.0], [1.0, 6.0], [1.1, 6.0], [1.2, 6.0], [1.3, 6.0], [1.4, 6.0], [1.5, 6.0], [1.6, 6.0], [1.7, 6.0], [1.8, 6.0], [1.9, 6.0], [2.0, 6.0], [2.1, 6.0], [2.2, 6.0], [2.3, 6.0], [2.4, 6.0], [2.5, 6.0], [2.6, 6.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 7.0], [3.3, 7.0], [3.4, 7.0], [3.5, 7.0], [3.6, 7.0], [3.7, 7.0], [3.8, 7.0], [3.9, 7.0], [4.0, 7.0], [4.1, 7.0], [4.2, 7.0], [4.3, 7.0], [4.4, 7.0], [4.5, 7.0], [4.6, 7.0], [4.7, 7.0], [4.8, 7.0], [4.9, 7.0], [5.0, 7.0], [5.1, 7.0], [5.2, 7.0], [5.3, 7.0], [5.4, 7.0], [5.5, 7.0], [5.6, 7.0], [5.7, 7.0], [5.8, 7.0], [5.9, 7.0], [6.0, 7.0], [6.1, 7.0], [6.2, 7.0], [6.3, 7.0], [6.4, 7.0], [6.5, 7.0], [6.6, 7.0], [6.7, 7.0], [6.8, 7.0], [6.9, 7.0], [7.0, 7.0], [7.1, 7.0], [7.2, 7.0], [7.3, 7.0], [7.4, 7.0], [7.5, 7.0], [7.6, 7.0], [7.7, 7.0], [7.8, 7.0], [7.9, 7.0], [8.0, 7.0], [8.1, 7.0], [8.2, 7.0], [8.3, 7.0], [8.4, 7.0], [8.5, 7.0], [8.6, 7.0], [8.7, 7.0], [8.8, 7.0], [8.9, 7.0], [9.0, 7.0], [9.1, 7.0], [9.2, 7.0], [9.3, 7.0], [9.4, 7.0], [9.5, 7.0], [9.6, 7.0], [9.7, 7.0], [9.8, 7.0], [9.9, 7.0], [10.0, 7.0], [10.1, 7.0], [10.2, 7.0], [10.3, 7.0], [10.4, 7.0], [10.5, 7.0], [10.6, 7.0], [10.7, 7.0], [10.8, 8.0], [10.9, 8.0], [11.0, 8.0], [11.1, 8.0], [11.2, 8.0], [11.3, 8.0], [11.4, 8.0], [11.5, 8.0], [11.6, 8.0], [11.7, 8.0], [11.8, 8.0], [11.9, 8.0], [12.0, 8.0], [12.1, 8.0], [12.2, 8.0], [12.3, 8.0], [12.4, 8.0], [12.5, 8.0], [12.6, 8.0], [12.7, 8.0], [12.8, 8.0], [12.9, 8.0], [13.0, 8.0], [13.1, 8.0], [13.2, 8.0], [13.3, 8.0], [13.4, 8.0], [13.5, 8.0], [13.6, 8.0], [13.7, 8.0], [13.8, 8.0], [13.9, 8.0], [14.0, 8.0], [14.1, 8.0], [14.2, 8.0], [14.3, 8.0], [14.4, 8.0], [14.5, 8.0], [14.6, 8.0], [14.7, 8.0], [14.8, 8.0], [14.9, 8.0], [15.0, 8.0], [15.1, 8.0], [15.2, 8.0], [15.3, 8.0], [15.4, 8.0], [15.5, 8.0], [15.6, 8.0], [15.7, 8.0], [15.8, 8.0], [15.9, 8.0], [16.0, 8.0], [16.1, 8.0], [16.2, 8.0], [16.3, 8.0], [16.4, 8.0], [16.5, 8.0], [16.6, 8.0], [16.7, 8.0], [16.8, 8.0], [16.9, 8.0], [17.0, 8.0], [17.1, 8.0], [17.2, 9.0], [17.3, 9.0], [17.4, 9.0], [17.5, 9.0], [17.6, 9.0], [17.7, 9.0], [17.8, 9.0], [17.9, 9.0], [18.0, 9.0], [18.1, 9.0], [18.2, 9.0], [18.3, 9.0], [18.4, 9.0], [18.5, 9.0], [18.6, 9.0], [18.7, 9.0], [18.8, 9.0], [18.9, 9.0], [19.0, 9.0], [19.1, 9.0], [19.2, 9.0], [19.3, 9.0], [19.4, 9.0], [19.5, 9.0], [19.6, 9.0], [19.7, 9.0], [19.8, 9.0], [19.9, 9.0], [20.0, 9.0], [20.1, 9.0], [20.2, 9.0], [20.3, 9.0], [20.4, 9.0], [20.5, 9.0], [20.6, 9.0], [20.7, 9.0], [20.8, 9.0], [20.9, 9.0], [21.0, 9.0], [21.1, 9.0], [21.2, 9.0], [21.3, 9.0], [21.4, 9.0], [21.5, 9.0], [21.6, 9.0], [21.7, 10.0], [21.8, 10.0], [21.9, 10.0], [22.0, 10.0], [22.1, 10.0], [22.2, 10.0], [22.3, 10.0], [22.4, 10.0], [22.5, 10.0], [22.6, 10.0], [22.7, 10.0], [22.8, 10.0], [22.9, 10.0], [23.0, 10.0], [23.1, 10.0], [23.2, 10.0], [23.3, 10.0], [23.4, 10.0], [23.5, 10.0], [23.6, 10.0], [23.7, 10.0], [23.8, 10.0], [23.9, 10.0], [24.0, 10.0], [24.1, 10.0], [24.2, 10.0], [24.3, 10.0], [24.4, 10.0], [24.5, 10.0], [24.6, 10.0], [24.7, 10.0], [24.8, 10.0], [24.9, 10.0], [25.0, 10.0], [25.1, 11.0], [25.2, 11.0], [25.3, 11.0], [25.4, 11.0], [25.5, 11.0], [25.6, 11.0], [25.7, 11.0], [25.8, 11.0], [25.9, 11.0], [26.0, 11.0], [26.1, 11.0], [26.2, 11.0], [26.3, 11.0], [26.4, 11.0], [26.5, 11.0], [26.6, 11.0], [26.7, 11.0], [26.8, 11.0], [26.9, 12.0], [27.0, 12.0], [27.1, 12.0], [27.2, 12.0], [27.3, 12.0], [27.4, 12.0], [27.5, 12.0], [27.6, 12.0], [27.7, 12.0], [27.8, 12.0], [27.9, 12.0], [28.0, 12.0], [28.1, 12.0], [28.2, 13.0], [28.3, 13.0], [28.4, 13.0], [28.5, 13.0], [28.6, 13.0], [28.7, 13.0], [28.8, 13.0], [28.9, 13.0], [29.0, 13.0], [29.1, 14.0], [29.2, 14.0], [29.3, 14.0], [29.4, 14.0], [29.5, 14.0], [29.6, 14.0], [29.7, 14.0], [29.8, 15.0], [29.9, 15.0], [30.0, 15.0], [30.1, 15.0], [30.2, 15.0], [30.3, 16.0], [30.4, 16.0], [30.5, 16.0], [30.6, 16.0], [30.7, 17.0], [30.8, 17.0], [30.9, 17.0], [31.0, 18.0], [31.1, 19.0], [31.2, 19.0], [31.3, 20.0], [31.4, 20.0], [31.5, 21.0], [31.6, 22.0], [31.7, 23.0], [31.8, 24.0], [31.9, 25.0], [32.0, 25.0], [32.1, 27.0], [32.2, 28.0], [32.3, 30.0], [32.4, 31.0], [32.5, 33.0], [32.6, 35.0], [32.7, 36.0], [32.8, 37.0], [32.9, 43.0], [33.0, 46.0], [33.1, 49.0], [33.2, 51.0], [33.3, 55.0], [33.4, 57.0], [33.5, 59.0], [33.6, 61.0], [33.7, 62.0], [33.8, 67.0], [33.9, 75.0], [34.0, 79.0], [34.1, 86.0], [34.2, 91.0], [34.3, 95.0], [34.4, 98.0], [34.5, 110.0], [34.6, 114.0], [34.7, 116.0], [34.8, 128.0], [34.9, 141.0], [35.0, 148.0], [35.1, 164.0], [35.2, 175.0], [35.3, 182.0], [35.4, 189.0], [35.5, 206.0], [35.6, 214.0], [35.7, 228.0], [35.8, 247.0], [35.9, 261.0], [36.0, 274.0], [36.1, 287.0], [36.2, 315.0], [36.3, 324.0], [36.4, 329.0], [36.5, 355.0], [36.6, 376.0], [36.7, 392.0], [36.8, 415.0], [36.9, 430.0], [37.0, 454.0], [37.1, 465.0], [37.2, 509.0], [37.3, 541.0], [37.4, 554.0], [37.5, 585.0], [37.6, 606.0], [37.7, 615.0], [37.8, 629.0], [37.9, 646.0], [38.0, 659.0], [38.1, 691.0], [38.2, 700.0], [38.3, 712.0], [38.4, 749.0], [38.5, 754.0], [38.6, 789.0], [38.7, 820.0], [38.8, 835.0], [38.9, 854.0], [39.0, 870.0], [39.1, 877.0], [39.2, 928.0], [39.3, 930.0], [39.4, 954.0], [39.5, 958.0], [39.6, 1008.0], [39.7, 1020.0], [39.8, 1034.0], [39.9, 1079.0], [40.0, 1092.0], [40.1, 1122.0], [40.2, 1140.0], [40.3, 1152.0], [40.4, 1157.0], [40.5, 1174.0], [40.6, 1181.0], [40.7, 1211.0], [40.8, 1236.0], [40.9, 1258.0], [41.0, 1295.0], [41.1, 1324.0], [41.2, 1349.0], [41.3, 1376.0], [41.4, 1404.0], [41.5, 1427.0], [41.6, 1439.0], [41.7, 1479.0], [41.8, 1496.0], [41.9, 1517.0], [42.0, 1565.0], [42.1, 1574.0], [42.2, 1590.0], [42.3, 1603.0], [42.4, 1630.0], [42.5, 1643.0], [42.6, 1674.0], [42.7, 1687.0], [42.8, 1713.0], [42.9, 1750.0], [43.0, 1760.0], [43.1, 1765.0], [43.2, 1801.0], [43.3, 1813.0], [43.4, 1850.0], [43.5, 1880.0], [43.6, 1904.0], [43.7, 1915.0], [43.8, 1973.0], [43.9, 1982.0], [44.0, 1997.0], [44.1, 2051.0], [44.2, 2064.0], [44.3, 2076.0], [44.4, 2103.0], [44.5, 2117.0], [44.6, 2139.0], [44.7, 2144.0], [44.8, 2153.0], [44.9, 2202.0], [45.0, 2224.0], [45.1, 2230.0], [45.2, 2263.0], [45.3, 2279.0], [45.4, 2310.0], [45.5, 2361.0], [45.6, 2393.0], [45.7, 2413.0], [45.8, 2428.0], [45.9, 2453.0], [46.0, 2473.0], [46.1, 2486.0], [46.2, 2501.0], [46.3, 2512.0], [46.4, 2525.0], [46.5, 2553.0], [46.6, 2566.0], [46.7, 2597.0], [46.8, 2627.0], [46.9, 2650.0], [47.0, 2671.0], [47.1, 2698.0], [47.2, 2724.0], [47.3, 2736.0], [47.4, 2753.0], [47.5, 2758.0], [47.6, 2769.0], [47.7, 2792.0], [47.8, 2824.0], [47.9, 2858.0], [48.0, 2876.0], [48.1, 2895.0], [48.2, 2911.0], [48.3, 2934.0], [48.4, 2950.0], [48.5, 2967.0], [48.6, 3012.0], [48.7, 3029.0], [48.8, 3047.0], [48.9, 3062.0], [49.0, 3087.0], [49.1, 3106.0], [49.2, 3140.0], [49.3, 3154.0], [49.4, 3168.0], [49.5, 3178.0], [49.6, 3193.0], [49.7, 3207.0], [49.8, 3247.0], [49.9, 3267.0], [50.0, 3289.0], [50.1, 3300.0], [50.2, 3321.0], [50.3, 3400.0], [50.4, 3419.0], [50.5, 3442.0], [50.6, 3469.0], [50.7, 3492.0], [50.8, 3528.0], [50.9, 3536.0], [51.0, 3549.0], [51.1, 3578.0], [51.2, 3602.0], [51.3, 3615.0], [51.4, 3651.0], [51.5, 3672.0], [51.6, 3683.0], [51.7, 3716.0], [51.8, 3726.0], [51.9, 3757.0], [52.0, 3770.0], [52.1, 3798.0], [52.2, 3807.0], [52.3, 3813.0], [52.4, 3825.0], [52.5, 3853.0], [52.6, 3865.0], [52.7, 3890.0], [52.8, 3912.0], [52.9, 3931.0], [53.0, 3949.0], [53.1, 3979.0], [53.2, 3997.0], [53.3, 4012.0], [53.4, 4065.0], [53.5, 4088.0], [53.6, 4098.0], [53.7, 4109.0], [53.8, 4121.0], [53.9, 4142.0], [54.0, 4151.0], [54.1, 4169.0], [54.2, 4179.0], [54.3, 4188.0], [54.4, 4198.0], [54.5, 4220.0], [54.6, 4230.0], [54.7, 4233.0], [54.8, 4242.0], [54.9, 4288.0], [55.0, 4306.0], [55.1, 4319.0], [55.2, 4330.0], [55.3, 4346.0], [55.4, 4382.0], [55.5, 4398.0], [55.6, 4411.0], [55.7, 4421.0], [55.8, 4444.0], [55.9, 4454.0], [56.0, 4516.0], [56.1, 4530.0], [56.2, 4541.0], [56.3, 4552.0], [56.4, 4559.0], [56.5, 4581.0], [56.6, 4600.0], [56.7, 4615.0], [56.8, 4619.0], [56.9, 4645.0], [57.0, 4655.0], [57.1, 4678.0], [57.2, 4684.0], [57.3, 4695.0], [57.4, 4717.0], [57.5, 4746.0], [57.6, 4779.0], [57.7, 4810.0], [57.8, 4817.0], [57.9, 4826.0], [58.0, 4833.0], [58.1, 4849.0], [58.2, 4856.0], [58.3, 4868.0], [58.4, 4885.0], [58.5, 4895.0], [58.6, 4907.0], [58.7, 4923.0], [58.8, 4941.0], [58.9, 4963.0], [59.0, 4982.0], [59.1, 5002.0], [59.2, 5016.0], [59.3, 5046.0], [59.4, 5054.0], [59.5, 5072.0], [59.6, 5115.0], [59.7, 5145.0], [59.8, 5156.0], [59.9, 5172.0], [60.0, 5198.0], [60.1, 5223.0], [60.2, 5247.0], [60.3, 5267.0], [60.4, 5280.0], [60.5, 5290.0], [60.6, 5306.0], [60.7, 5311.0], [60.8, 5320.0], [60.9, 5345.0], [61.0, 5359.0], [61.1, 5384.0], [61.2, 5399.0], [61.3, 5425.0], [61.4, 5435.0], [61.5, 5447.0], [61.6, 5482.0], [61.7, 5499.0], [61.8, 5512.0], [61.9, 5523.0], [62.0, 5551.0], [62.1, 5558.0], [62.2, 5581.0], [62.3, 5608.0], [62.4, 5622.0], [62.5, 5647.0], [62.6, 5663.0], [62.7, 5666.0], [62.8, 5670.0], [62.9, 5692.0], [63.0, 5701.0], [63.1, 5714.0], [63.2, 5722.0], [63.3, 5747.0], [63.4, 5772.0], [63.5, 5792.0], [63.6, 5813.0], [63.7, 5825.0], [63.8, 5839.0], [63.9, 5862.0], [64.0, 5881.0], [64.1, 5910.0], [64.2, 5915.0], [64.3, 5933.0], [64.4, 5941.0], [64.5, 5952.0], [64.6, 5968.0], [64.7, 5971.0], [64.8, 5990.0], [64.9, 6005.0], [65.0, 6019.0], [65.1, 6045.0], [65.2, 6052.0], [65.3, 6080.0], [65.4, 6141.0], [65.5, 6149.0], [65.6, 6168.0], [65.7, 6187.0], [65.8, 6202.0], [65.9, 6211.0], [66.0, 6245.0], [66.1, 6268.0], [66.2, 6279.0], [66.3, 6287.0], [66.4, 6310.0], [66.5, 6315.0], [66.6, 6353.0], [66.7, 6382.0], [66.8, 6398.0], [66.9, 6408.0], [67.0, 6418.0], [67.1, 6440.0], [67.2, 6450.0], [67.3, 6475.0], [67.4, 6481.0], [67.5, 6495.0], [67.6, 6521.0], [67.7, 6537.0], [67.8, 6545.0], [67.9, 6570.0], [68.0, 6588.0], [68.1, 6615.0], [68.2, 6627.0], [68.3, 6636.0], [68.4, 6658.0], [68.5, 6686.0], [68.6, 6703.0], [68.7, 6733.0], [68.8, 6746.0], [68.9, 6795.0], [69.0, 6800.0], [69.1, 6819.0], [69.2, 6825.0], [69.3, 6840.0], [69.4, 6858.0], [69.5, 6877.0], [69.6, 6891.0], [69.7, 6896.0], [69.8, 6921.0], [69.9, 6927.0], [70.0, 6932.0], [70.1, 6965.0], [70.2, 6977.0], [70.3, 6986.0], [70.4, 6997.0], [70.5, 7014.0], [70.6, 7030.0], [70.7, 7065.0], [70.8, 7084.0], [70.9, 7089.0], [71.0, 7107.0], [71.1, 7153.0], [71.2, 7168.0], [71.3, 7188.0], [71.4, 7196.0], [71.5, 7219.0], [71.6, 7235.0], [71.7, 7272.0], [71.8, 7280.0], [71.9, 7286.0], [72.0, 7313.0], [72.1, 7321.0], [72.2, 7355.0], [72.3, 7369.0], [72.4, 7383.0], [72.5, 7412.0], [72.6, 7442.0], [72.7, 7457.0], [72.8, 7466.0], [72.9, 7488.0], [73.0, 7515.0], [73.1, 7542.0], [73.2, 7559.0], [73.3, 7584.0], [73.4, 7597.0], [73.5, 7621.0], [73.6, 7636.0], [73.7, 7664.0], [73.8, 7676.0], [73.9, 7697.0], [74.0, 7722.0], [74.1, 7752.0], [74.2, 7766.0], [74.3, 7779.0], [74.4, 7791.0], [74.5, 7795.0], [74.6, 7842.0], [74.7, 7869.0], [74.8, 7903.0], [74.9, 7915.0], [75.0, 7944.0], [75.1, 7962.0], [75.2, 7982.0], [75.3, 8003.0], [75.4, 8021.0], [75.5, 8040.0], [75.6, 8059.0], [75.7, 8080.0], [75.8, 8113.0], [75.9, 8117.0], [76.0, 8138.0], [76.1, 8145.0], [76.2, 8168.0], [76.3, 8215.0], [76.4, 8220.0], [76.5, 8227.0], [76.6, 8240.0], [76.7, 8288.0], [76.8, 8296.0], [76.9, 8320.0], [77.0, 8361.0], [77.1, 8396.0], [77.2, 8415.0], [77.3, 8420.0], [77.4, 8432.0], [77.5, 8452.0], [77.6, 8477.0], [77.7, 8503.0], [77.8, 8520.0], [77.9, 8532.0], [78.0, 8552.0], [78.1, 8572.0], [78.2, 8610.0], [78.3, 8616.0], [78.4, 8634.0], [78.5, 8659.0], [78.6, 8669.0], [78.7, 8693.0], [78.8, 8711.0], [78.9, 8736.0], [79.0, 8744.0], [79.1, 8757.0], [79.2, 8775.0], [79.3, 8793.0], [79.4, 8839.0], [79.5, 8849.0], [79.6, 8870.0], [79.7, 8900.0], [79.8, 8911.0], [79.9, 8929.0], [80.0, 8956.0], [80.1, 8964.0], [80.2, 8984.0], [80.3, 9001.0], [80.4, 9008.0], [80.5, 9040.0], [80.6, 9047.0], [80.7, 9058.0], [80.8, 9077.0], [80.9, 9117.0], [81.0, 9130.0], [81.1, 9184.0], [81.2, 9195.0], [81.3, 9213.0], [81.4, 9250.0], [81.5, 9268.0], [81.6, 9280.0], [81.7, 9316.0], [81.8, 9327.0], [81.9, 9337.0], [82.0, 9342.0], [82.1, 9359.0], [82.2, 9385.0], [82.3, 9408.0], [82.4, 9419.0], [82.5, 9435.0], [82.6, 9451.0], [82.7, 9474.0], [82.8, 9486.0], [82.9, 9518.0], [83.0, 9540.0], [83.1, 9549.0], [83.2, 9557.0], [83.3, 9579.0], [83.4, 9589.0], [83.5, 9613.0], [83.6, 9621.0], [83.7, 9645.0], [83.8, 9660.0], [83.9, 9680.0], [84.0, 9700.0], [84.1, 9719.0], [84.2, 9734.0], [84.3, 9751.0], [84.4, 9789.0], [84.5, 9803.0], [84.6, 9819.0], [84.7, 9830.0], [84.8, 9853.0], [84.9, 9901.0], [85.0, 9915.0], [85.1, 9922.0], [85.2, 9944.0], [85.3, 9959.0], [85.4, 9975.0], [85.5, 9989.0], [85.6, 10005.0], [85.7, 10039.0], [85.8, 10073.0], [85.9, 10076.0], [86.0, 10086.0], [86.1, 10092.0], [86.2, 10107.0], [86.3, 10148.0], [86.4, 10160.0], [86.5, 10170.0], [86.6, 10190.0], [86.7, 10197.0], [86.8, 10219.0], [86.9, 10225.0], [87.0, 10243.0], [87.1, 10286.0], [87.2, 10326.0], [87.3, 10353.0], [87.4, 10382.0], [87.5, 10394.0], [87.6, 10405.0], [87.7, 10436.0], [87.8, 10456.0], [87.9, 10470.0], [88.0, 10503.0], [88.1, 10522.0], [88.2, 10539.0], [88.3, 10556.0], [88.4, 10588.0], [88.5, 10600.0], [88.6, 10639.0], [88.7, 10653.0], [88.8, 10659.0], [88.9, 10688.0], [89.0, 10709.0], [89.1, 10715.0], [89.2, 10719.0], [89.3, 10728.0], [89.4, 10740.0], [89.5, 10754.0], [89.6, 10764.0], [89.7, 10779.0], [89.8, 10811.0], [89.9, 10816.0], [90.0, 10844.0], [90.1, 10871.0], [90.2, 10896.0], [90.3, 10912.0], [90.4, 10940.0], [90.5, 10966.0], [90.6, 10975.0], [90.7, 11012.0], [90.8, 11057.0], [90.9, 11067.0], [91.0, 11084.0], [91.1, 11107.0], [91.2, 11127.0], [91.3, 11159.0], [91.4, 11163.0], [91.5, 11181.0], [91.6, 11211.0], [91.7, 11220.0], [91.8, 11237.0], [91.9, 11245.0], [92.0, 11252.0], [92.1, 11264.0], [92.2, 11275.0], [92.3, 11289.0], [92.4, 11323.0], [92.5, 11336.0], [92.6, 11355.0], [92.7, 11371.0], [92.8, 11409.0], [92.9, 11423.0], [93.0, 11470.0], [93.1, 11479.0], [93.2, 11524.0], [93.3, 11556.0], [93.4, 11567.0], [93.5, 11592.0], [93.6, 11602.0], [93.7, 11645.0], [93.8, 11665.0], [93.9, 11679.0], [94.0, 11716.0], [94.1, 11738.0], [94.2, 11757.0], [94.3, 11796.0], [94.4, 11824.0], [94.5, 11834.0], [94.6, 11869.0], [94.7, 11903.0], [94.8, 11928.0], [94.9, 11942.0], [95.0, 11956.0], [95.1, 11987.0], [95.2, 12000.0], [95.3, 12024.0], [95.4, 12033.0], [95.5, 12039.0], [95.6, 12049.0], [95.7, 12093.0], [95.8, 12112.0], [95.9, 12123.0], [96.0, 12141.0], [96.1, 12150.0], [96.2, 12162.0], [96.3, 12181.0], [96.4, 12196.0], [96.5, 12208.0], [96.6, 12220.0], [96.7, 12226.0], [96.8, 12232.0], [96.9, 12240.0], [97.0, 12253.0], [97.1, 12269.0], [97.2, 12282.0], [97.3, 12310.0], [97.4, 12328.0], [97.5, 12344.0], [97.6, 12373.0], [97.7, 12386.0], [97.8, 12413.0], [97.9, 12430.0], [98.0, 12451.0], [98.1, 12481.0], [98.2, 12486.0], [98.3, 12528.0], [98.4, 12546.0], [98.5, 12574.0], [98.6, 12596.0], [98.7, 12607.0], [98.8, 12645.0], [98.9, 12698.0], [99.0, 12775.0], [99.1, 12838.0], [99.2, 12925.0], [99.3, 13007.0], [99.4, 13092.0], [99.5, 13206.0], [99.6, 13306.0], [99.7, 13565.0], [99.8, 13729.0], [99.9, 13806.0], [100.0, 15601.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1382.0, "series": [{"data": [[0.0, 1382.0], [100.0, 41.0], [200.0, 28.0], [300.0, 23.0], [400.0, 19.0], [500.0, 14.0], [600.0, 26.0], [700.0, 19.0], [800.0, 20.0], [900.0, 17.0], [1000.0, 18.0], [1100.0, 24.0], [1200.0, 16.0], [1300.0, 15.0], [1400.0, 17.0], [1500.0, 19.0], [1600.0, 19.0], [1700.0, 16.0], [1800.0, 16.0], [1900.0, 18.0], [2000.0, 15.0], [2100.0, 20.0], [2200.0, 19.0], [2300.0, 12.0], [2400.0, 21.0], [2500.0, 22.0], [2600.0, 16.0], [2700.0, 26.0], [2800.0, 16.0], [2900.0, 16.0], [3000.0, 19.0], [3100.0, 24.0], [3300.0, 8.0], [3200.0, 18.0], [3400.0, 18.0], [3500.0, 17.0], [3600.0, 21.0], [3700.0, 17.0], [3800.0, 26.0], [3900.0, 19.0], [4000.0, 16.0], [4100.0, 32.0], [4300.0, 23.0], [4200.0, 21.0], [4600.0, 29.0], [4400.0, 19.0], [4500.0, 24.0], [4800.0, 35.0], [4700.0, 14.0], [4900.0, 22.0], [5100.0, 20.0], [5000.0, 17.0], [5300.0, 26.0], [5200.0, 23.0], [5400.0, 20.0], [5500.0, 23.0], [5600.0, 28.0], [5700.0, 23.0], [5800.0, 20.0], [5900.0, 32.0], [6000.0, 18.0], [6100.0, 19.0], [6200.0, 23.0], [6300.0, 20.0], [6600.0, 23.0], [6400.0, 28.0], [6500.0, 19.0], [6700.0, 16.0], [6800.0, 30.0], [6900.0, 29.0], [7000.0, 19.0], [7100.0, 20.0], [7400.0, 21.0], [7200.0, 20.0], [7300.0, 20.0], [7600.0, 20.0], [7500.0, 20.0], [7700.0, 23.0], [7900.0, 20.0], [7800.0, 11.0], [8100.0, 20.0], [8000.0, 19.0], [8200.0, 22.0], [8400.0, 23.0], [8300.0, 12.0], [8500.0, 18.0], [8600.0, 23.0], [8700.0, 25.0], [8900.0, 25.0], [8800.0, 14.0], [9200.0, 19.0], [9000.0, 21.0], [9100.0, 16.0], [9500.0, 24.0], [9600.0, 22.0], [9700.0, 19.0], [9300.0, 23.0], [9400.0, 23.0], [10100.0, 26.0], [9900.0, 27.0], [9800.0, 16.0], [10000.0, 23.0], [10200.0, 17.0], [10500.0, 22.0], [10600.0, 18.0], [10400.0, 15.0], [10300.0, 16.0], [10700.0, 33.0], [11000.0, 15.0], [10900.0, 18.0], [11100.0, 21.0], [11200.0, 32.0], [10800.0, 19.0], [11300.0, 16.0], [11400.0, 14.0], [11500.0, 19.0], [11700.0, 16.0], [11600.0, 14.0], [12000.0, 22.0], [11800.0, 14.0], [11900.0, 20.0], [12200.0, 33.0], [12100.0, 27.0], [12500.0, 16.0], [12300.0, 21.0], [12700.0, 6.0], [12600.0, 12.0], [12400.0, 18.0], [13000.0, 5.0], [13100.0, 3.0], [13200.0, 4.0], [12800.0, 3.0], [12900.0, 6.0], [13300.0, 2.0], [13800.0, 2.0], [13700.0, 4.0], [13400.0, 2.0], [13500.0, 2.0], [13600.0, 1.0], [13900.0, 1.0], [14100.0, 1.0], [14800.0, 1.0], [15600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 15600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 186.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2336.0, "series": [{"data": [[0.0, 1493.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 186.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2336.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.883054892601433, "minX": 1.699972499E12, "maxY": 1855.6197183098593, "series": [{"data": [[1.699972504E12, 812.0763888888888], [1.699972503E12, 445.5034013605442], [1.699972502E12, 66.61849710982659], [1.699972506E12, 1525.728571428571], [1.699972505E12, 1177.0300751879704], [1.699972509E12, 1615.6164383561645], [1.699972508E12, 1767.5632911392404], [1.699972507E12, 1855.6197183098593], [1.699972512E12, 1145.5897435897432], [1.699972511E12, 1299.6052631578943], [1.69997251E12, 1459.0898203592815], [1.699972514E12, 859.0948905109494], [1.699972513E12, 997.5857142857144], [1.699972517E12, 425.08029197080305], [1.699972516E12, 567.1088435374154], [1.699972515E12, 715.6133333333337], [1.699972519E12, 98.19487179487179], [1.699972518E12, 276.10559006211173], [1.699972501E12, 6.973421926910291], [1.6999725E12, 4.883054892601433], [1.699972499E12, 6.395833333333335]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.699972519E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9.177914110429446, "minX": 1.0, "maxY": 13806.0, "series": [{"data": [[2.0, 280.5918367346939], [3.0, 121.40170940170941], [4.0, 74.97282608695653], [5.0, 67.8644859813084], [6.0, 66.62037037037038], [7.0, 9.177914110429446], [8.0, 243.17142857142858], [9.0, 177.9041095890411], [10.0, 227.55737704918033], [11.0, 322.92682926829264], [12.0, 593.9130434782609], [13.0, 775.1875], [14.0, 1195.4545454545455], [15.0, 1126.090909090909], [16.0, 1240.6], [17.0, 1802.0000000000002], [18.0, 2757.0], [19.0, 6250.5], [20.0, 2778.8], [21.0, 2063.6666666666665], [22.0, 13.75], [23.0, 6170.75], [24.0, 33.85714285714286], [25.0, 8280.0], [26.0, 12570.0], [27.0, 6544.5], [28.0, 12282.0], [29.0, 12566.0], [30.0, 12739.0], [31.0, 12379.0], [32.0, 12223.0], [35.0, 12347.0], [34.0, 12574.0], [37.0, 3925.75], [36.0, 4227.666666666667], [39.0, 5055.8], [38.0, 4330.0], [40.0, 49.0], [41.0, 12476.5], [42.0, 6160.5], [43.0, 12240.0], [45.0, 6278.0], [44.0, 12481.0], [47.0, 6135.0], [46.0, 6156.0], [49.0, 4363.666666666667], [48.0, 3065.75], [50.0, 32.0], [51.0, 12336.5], [53.0, 12255.0], [52.0, 12443.0], [54.0, 12337.0], [57.0, 12128.0], [56.0, 13376.5], [58.0, 6365.5], [59.0, 6359.0], [61.0, 54.0], [60.0, 4507.0], [62.0, 6090.0], [63.0, 12182.0], [66.0, 3087.25], [67.0, 6367.0], [65.0, 4185.0], [64.0, 6178.0], [71.0, 6801.5], [70.0, 12470.0], [69.0, 12532.0], [68.0, 12274.0], [75.0, 12142.0], [73.0, 12140.0], [78.0, 6301.0], [79.0, 12328.0], [77.0, 12266.0], [76.0, 12251.0], [82.0, 6223.0], [83.0, 12196.0], [80.0, 12600.0], [87.0, 12123.0], [86.0, 12181.666666666666], [84.0, 12311.0], [91.0, 12923.0], [90.0, 12050.0], [89.0, 12959.0], [88.0, 12201.0], [95.0, 12582.0], [94.0, 12283.0], [93.0, 13768.0], [92.0, 12344.0], [99.0, 4126.0], [98.0, 6150.75], [96.0, 6490.5], [103.0, 12314.0], [102.0, 12229.0], [101.0, 12430.0], [100.0, 13030.0], [104.0, 6213.5], [106.0, 6090.5], [107.0, 13802.0], [105.0, 12280.0], [109.0, 3458.0], [111.0, 12715.5], [108.0, 12181.0], [112.0, 68.0], [115.0, 2812.2], [114.0, 3161.5], [113.0, 12877.0], [116.0, 2525.4], [118.0, 140.0], [119.0, 8218.333333333334], [117.0, 12190.0], [123.0, 12604.5], [121.0, 12925.0], [120.0, 12195.0], [127.0, 12161.0], [125.0, 12375.0], [124.0, 12838.0], [129.0, 4334.666666666667], [135.0, 12386.0], [134.0, 12254.5], [133.0, 12787.0], [132.0, 13156.0], [130.0, 11956.0], [128.0, 12421.0], [136.0, 4094.6666666666665], [139.0, 3242.0], [140.0, 3124.75], [142.0, 3234.0], [143.0, 12034.0], [141.0, 11879.0], [138.0, 12485.0], [137.0, 12479.0], [145.0, 2830.2], [151.0, 6290.5], [150.0, 11824.0], [149.0, 11824.0], [148.0, 12676.0], [147.0, 11847.0], [146.0, 13299.0], [144.0, 11860.0], [156.0, 8135.333333333333], [159.0, 12178.0], [157.0, 12141.0], [154.0, 12417.0], [153.0, 12252.0], [152.0, 13806.0], [160.0, 4333.0], [167.0, 3180.75], [166.0, 4387.0], [165.0, 11855.5], [163.0, 11990.0], [162.0, 12546.0], [161.0, 11911.0], [168.0, 4226.666666666666], [172.0, 3133.0], [171.0, 8653.333333333334], [169.0, 279.0], [175.0, 11661.0], [174.0, 11905.5], [170.0, 12237.0], [183.0, 11625.0], [181.0, 12039.0], [180.0, 11803.0], [179.0, 11637.0], [178.0, 12775.0], [177.0, 12645.0], [176.0, 11757.0], [184.0, 5851.5], [187.0, 4009.3333333333335], [191.0, 2538.4], [190.0, 2478.0], [189.0, 3142.75], [188.0, 12093.0], [186.0, 11709.0], [185.0, 12224.0], [194.0, 6036.5], [199.0, 5756.0], [198.0, 11592.0], [197.0, 12267.0], [196.0, 11949.0], [195.0, 11508.0], [193.0, 12102.0], [192.0, 11863.0], [207.0, 11796.0], [206.0, 11567.0], [205.0, 11796.0], [204.0, 11569.0], [203.0, 11756.0], [202.0, 12112.0], [201.0, 11475.0], [200.0, 11474.0], [210.0, 3476.285714285714], [209.0, 374.0], [213.0, 372.0], [215.0, 11595.0], [214.0, 11396.0], [212.0, 12017.0], [211.0, 12382.0], [208.0, 11543.0], [223.0, 12528.0], [222.0, 12056.0], [221.0, 11774.0], [220.0, 11903.0], [219.0, 11679.0], [218.0, 13316.5], [216.0, 11409.0], [224.0, 6007.0], [231.0, 12779.0], [230.0, 12596.0], [229.0, 11357.0], [228.0, 13016.0], [227.0, 12269.0], [226.0, 13206.0], [225.0, 11350.0], [237.0, 4125.333333333334], [236.0, 2475.4], [238.0, 5715.0], [239.0, 5847.0], [235.0, 12150.0], [234.0, 11478.0], [233.0, 11628.5], [244.0, 6197.0], [247.0, 11252.0], [246.0, 12251.0], [245.0, 12119.0], [243.0, 11933.0], [242.0, 11374.0], [241.0, 11736.0], [248.0, 6229.0], [251.0, 5989.5], [255.0, 11188.0], [254.0, 11187.0], [253.0, 11584.0], [252.0, 12329.0], [250.0, 11243.0], [249.0, 11631.0], [263.0, 5818.5], [260.0, 3941.0], [259.0, 3186.25], [258.0, 11943.0], [257.0, 11564.0], [256.0, 12036.0], [268.0, 12278.0], [261.0, 2471.2], [262.0, 3940.3333333333335], [265.0, 5869.5], [267.0, 5705.0], [266.0, 11160.0], [271.0, 11464.5], [264.0, 11264.0], [269.0, 11508.0], [284.0, 7821.0], [275.0, 7542.333333333333], [273.0, 11285.0], [285.0, 262.0], [287.0, 11080.0], [286.0, 11247.5], [282.0, 11471.5], [280.0, 11324.0], [279.0, 11220.0], [278.0, 11096.0], [277.0, 12036.0], [276.0, 11264.0], [302.0, 11340.0], [294.0, 6049.5], [293.0, 11159.0], [292.0, 11113.0], [295.0, 2577.4], [301.0, 5945.5], [303.0, 5651.5], [300.0, 11645.0], [291.0, 11828.0], [290.0, 11088.0], [289.0, 13165.0], [288.0, 11651.0], [299.0, 11496.5], [297.0, 11181.0], [296.0, 10984.0], [316.0, 6042.0], [306.0, 5677.0], [305.0, 5748.0], [311.0, 4268.0], [307.0, 4282.333333333334], [309.0, 4283.333333333334], [308.0, 5610.5], [310.0, 5770.5], [315.0, 5699.0], [314.0, 5711.5], [313.0, 5791.5], [312.0, 5938.0], [319.0, 10954.0], [318.0, 11446.0], [334.0, 10964.0], [335.0, 11219.0], [333.0, 11071.0], [323.0, 11430.0], [322.0, 11423.0], [321.0, 11067.0], [320.0, 11293.0], [331.0, 10873.0], [330.0, 11618.0], [329.0, 11245.0], [328.0, 10896.0], [327.0, 11126.0], [326.0, 11237.0], [325.0, 11591.0], [324.0, 10877.0], [351.0, 10760.0], [343.0, 5724.0], [342.0, 10816.0], [341.0, 11371.0], [340.0, 11027.0], [346.0, 381.0], [350.0, 11026.0], [349.0, 10966.0], [348.0, 12502.0], [339.0, 12033.0], [338.0, 10851.0], [337.0, 10813.0], [336.0, 11078.0], [347.0, 11167.5], [345.0, 10764.0], [344.0, 10878.0], [366.0, 11145.0], [354.0, 5731.0], [355.0, 712.0], [365.0, 10711.0], [364.0, 10719.0], [357.0, 4062.3333333333335], [356.0, 7840.666666666666], [359.0, 6124.5], [353.0, 10764.0], [352.0, 11834.0], [358.0, 10940.0], [360.0, 460.25], [361.0, 6078.5], [363.0, 10719.0], [362.0, 11102.0], [367.0, 11217.0], [383.0, 10655.0], [376.0, 5572.5], [381.0, 5927.0], [382.0, 11711.0], [380.0, 10644.0], [371.0, 10734.0], [370.0, 13092.0], [369.0, 10811.0], [368.0, 11062.0], [379.0, 10652.0], [378.0, 10737.0], [377.0, 10753.0], [375.0, 11070.0], [374.0, 10717.0], [373.0, 10735.0], [372.0, 10728.0], [397.0, 7932.0], [386.0, 2263.6666666666665], [388.0, 5607.5], [389.0, 11065.0], [387.0, 2583.8], [385.0, 5764.0], [384.0, 10659.0], [390.0, 10740.0], [399.0, 10502.0], [398.0, 10630.0], [395.0, 10793.0], [393.0, 10654.0], [392.0, 11374.0], [415.0, 10590.0], [402.0, 5482.0], [405.0, 5644.0], [404.0, 10504.0], [407.0, 10975.0], [401.0, 10797.0], [400.0, 10523.0], [406.0, 11421.0], [408.0, 3158.0], [409.0, 3159.25], [410.0, 2552.0], [411.0, 5753.0], [414.0, 10456.0], [413.0, 11795.0], [412.0, 10902.0], [403.0, 10522.0], [429.0, 5929.0], [420.0, 6111.0], [421.0, 11929.0], [422.0, 5727.5], [428.0, 4408.0], [423.0, 10394.0], [418.0, 10439.0], [417.0, 10523.0], [419.0, 11650.0], [431.0, 10846.5], [427.0, 10365.0], [426.0, 10388.0], [425.0, 10353.0], [424.0, 11127.0], [447.0, 5586.0], [433.0, 5670.5], [436.0, 5648.0], [439.0, 11523.0], [432.0, 11468.0], [437.0, 10595.0], [441.0, 5667.0], [440.0, 10844.0], [446.0, 6119.0], [445.0, 10834.0], [444.0, 10467.0], [435.0, 10415.0], [434.0, 10563.0], [443.0, 10818.0], [442.0, 10617.0], [462.0, 10149.0], [450.0, 3222.5], [452.0, 787.0], [451.0, 5589.0], [453.0, 7391.666666666667], [455.0, 11211.0], [449.0, 10470.0], [448.0, 10220.0], [454.0, 10560.0], [458.0, 3210.5], [459.0, 4423.0], [463.0, 10228.0], [457.0, 10864.0], [456.0, 11064.0], [461.0, 10148.0], [460.0, 10275.0], [478.0, 10817.0], [465.0, 6020.0], [464.0, 10709.0], [467.0, 11289.0], [466.0, 11272.0], [471.0, 10195.0], [470.0, 10427.0], [469.0, 10193.0], [468.0, 10751.0], [479.0, 10105.0], [477.0, 10539.0], [476.0, 10553.0], [475.0, 10462.0], [474.0, 10182.0], [473.0, 10369.0], [472.0, 10685.0], [494.0, 10219.0], [487.0, 1155.0], [481.0, 10190.0], [480.0, 10523.0], [483.0, 10076.0], [482.0, 10082.0], [486.0, 10467.0], [484.0, 10073.0], [489.0, 5363.0], [491.0, 3130.0], [492.0, 582.0], [495.0, 5787.0], [493.0, 10267.5], [490.0, 10720.0], [488.0, 10268.5], [508.0, 5703.5], [497.0, 5343.0], [499.0, 5417.5], [498.0, 10351.0], [501.0, 5586.0], [500.0, 10162.0], [503.0, 10260.0], [496.0, 10197.0], [502.0, 10707.0], [505.0, 5438.75], [507.0, 11362.0], [506.0, 10121.0], [504.0, 878.5], [511.0, 10503.0], [510.0, 9958.0], [509.0, 10009.0], [514.0, 10565.0], [536.0, 4102.666666666666], [528.0, 3968.0], [530.0, 5299.0], [532.0, 10765.0], [534.0, 9916.0], [512.0, 10128.0], [518.0, 10012.0], [526.0, 10238.0], [524.0, 9920.0], [522.0, 9897.0], [542.0, 3226.75], [540.0, 10600.0], [550.0, 5677.5], [546.0, 10196.0], [568.0, 10136.0], [570.0, 5814.5], [572.0, 5569.5], [574.0, 11107.0], [552.0, 5614.0], [554.0, 10207.0], [556.0, 3872.3333333333335], [558.0, 9795.0], [562.0, 10092.0], [564.0, 9969.0], [560.0, 5413.5], [590.0, 3241.75], [600.0, 9781.0], [584.0, 9830.0], [586.0, 9714.0], [588.0, 6924.0], [596.0, 5260.5], [598.0, 9550.0], [606.0, 10221.0], [592.0, 10151.0], [594.0, 10286.0], [604.0, 9658.0], [602.0, 10287.5], [582.0, 9789.0], [580.0, 9627.0], [576.0, 10020.5], [608.0, 10017.0], [634.0, 5220.0], [610.0, 3920.3333333333335], [612.0, 10405.0], [614.0, 9540.0], [616.0, 9965.0], [618.0, 9446.0], [620.0, 9442.0], [622.0, 9645.0], [628.0, 5136.0], [630.0, 7000.666666666667], [624.0, 9637.0], [626.0, 9912.0], [638.0, 9342.0], [636.0, 9615.0], [640.0, 9342.0], [642.0, 5628.0], [654.0, 9929.0], [644.0, 881.0], [646.0, 9475.0], [648.0, 6901.666666666667], [650.0, 9342.0], [652.0, 9543.0], [662.0, 3225.5], [656.0, 9291.0], [658.0, 9420.0], [660.0, 9477.0], [668.0, 9709.0], [666.0, 9341.0], [674.0, 3974.3333333333335], [678.0, 1140.6666666666667], [672.0, 10786.0], [676.0, 9399.0], [680.0, 5322.5], [682.0, 9609.0], [684.0, 9549.0], [686.0, 9346.0], [692.0, 5524.25], [690.0, 6066.5], [688.0, 9047.0], [702.0, 5102.5], [700.0, 9362.0], [698.0, 9474.0], [696.0, 8979.0], [694.0, 5460.5], [706.0, 9185.0], [708.0, 5316.5], [710.0, 8943.0], [728.0, 9037.0], [730.0, 10688.0], [732.0, 8912.0], [714.0, 8988.0], [712.0, 8959.0], [716.0, 9162.0], [704.0, 9324.0], [718.0, 8963.0], [724.0, 5192.0], [726.0, 1080.0], [734.0, 9233.0], [720.0, 9676.0], [722.0, 8929.0], [742.0, 8906.0], [744.0, 4994.0], [746.0, 8874.0], [756.0, 5699.0], [758.0, 9276.0], [760.0, 9130.0], [738.0, 10170.0], [736.0, 9053.0], [750.0, 9058.0], [748.0, 9316.0], [762.0, 9336.0], [764.0, 9463.0], [752.0, 9810.0], [754.0, 8969.0], [766.0, 8757.0], [792.0, 4913.0], [772.0, 5086.0], [768.0, 11084.0], [774.0, 8936.0], [798.0, 8768.5], [796.0, 9989.0], [794.0, 8652.0], [776.0, 4678.8], [784.0, 6416.333333333333], [782.0, 8706.0], [780.0, 8703.0], [778.0, 9184.0], [786.0, 9118.0], [788.0, 8904.0], [790.0, 3797.6666666666665], [802.0, 11336.0], [806.0, 5252.5], [808.0, 5033.0], [812.0, 9853.0], [810.0, 8619.0], [800.0, 8605.0], [804.0, 9729.0], [814.0, 8516.0], [820.0, 5296.5], [818.0, 9504.0], [816.0, 9288.0], [822.0, 5110.25], [824.0, 5254.0], [826.0, 8772.0], [830.0, 8961.5], [828.0, 8425.0], [846.0, 5027.0], [858.0, 8548.0], [840.0, 5257.0], [842.0, 4899.5], [844.0, 8693.0], [854.0, 8296.0], [850.0, 4914.5], [848.0, 8859.0], [862.0, 1610.5], [860.0, 8347.0], [856.0, 9041.0], [838.0, 8570.0], [836.0, 8592.0], [834.0, 8452.0], [832.0, 8811.0], [870.0, 8221.5], [892.0, 8409.0], [864.0, 4000.6666666666665], [868.0, 9001.0], [888.0, 8289.0], [876.0, 5065.0], [872.0, 8208.0], [878.0, 4176.666666666666], [880.0, 8145.0], [882.0, 8364.0], [884.0, 8615.0], [886.0, 8416.0], [894.0, 5507.0], [890.0, 8078.0], [898.0, 9060.0], [922.0, 8061.0], [926.0, 8094.0], [896.0, 5321.0], [900.0, 9074.0], [902.0, 8318.0], [920.0, 9703.0], [924.0, 8117.0], [908.0, 4733.0], [906.0, 8797.0], [904.0, 9327.0], [910.0, 5489.0], [912.0, 5051.5], [914.0, 8285.0], [916.0, 7996.0], [918.0, 8233.0], [930.0, 8960.0], [956.0, 7952.5], [944.0, 5142.5], [946.0, 7963.0], [928.0, 8140.0], [932.0, 8176.0], [934.0, 8022.0], [942.0, 8564.0], [940.0, 8113.0], [938.0, 9280.0], [936.0, 8227.0], [948.0, 5165.5], [950.0, 1541.0], [952.0, 3148.75], [954.0, 7752.0], [958.0, 8660.0], [966.0, 5719.0], [984.0, 4667.0], [964.0, 8040.0], [960.0, 7950.0], [974.0, 7914.0], [986.0, 4950.0], [988.0, 8984.0], [990.0, 9052.0], [970.0, 7647.0], [968.0, 8117.0], [972.0, 4776.0], [976.0, 3760.666666666667], [980.0, 5429.0], [978.0, 8222.0], [982.0, 1638.75], [1006.0, 4984.0], [1002.0, 5034.0], [1000.0, 7543.0], [1004.0, 3646.0], [1008.0, 7488.0], [1010.0, 5097.0], [1014.0, 7545.0], [1012.0, 7466.0], [1022.0, 7670.0], [1020.0, 7460.0], [1018.0, 7944.0], [1016.0, 8489.0], [994.0, 7640.5], [992.0, 8337.0], [996.0, 8070.0], [998.0, 7766.0], [1032.0, 4859.5], [1076.0, 7791.0], [1084.0, 7107.0], [1036.0, 7353.0], [1040.0, 5375.0], [1048.0, 7287.0], [1028.0, 7438.0], [1052.0, 7600.0], [1064.0, 4682.2], [1068.0, 7147.0], [1060.0, 7335.0], [1080.0, 7356.0], [1092.0, 7220.0], [1096.0, 6006.666666666667], [1088.0, 7100.0], [1100.0, 7014.0], [1116.0, 6970.0], [1112.0, 7081.5], [1108.0, 7087.0], [1104.0, 8503.0], [1136.0, 3897.0], [1132.0, 7915.0], [1128.0, 6929.0], [1120.0, 7281.0], [1124.0, 6938.0], [1144.0, 7126.0], [1140.0, 7189.0], [1164.0, 7135.5], [1160.0, 3632.0], [1156.0, 6859.0], [1152.0, 6971.0], [1200.0, 7475.0], [1204.0, 9586.0], [1196.0, 3216.2], [1192.0, 4849.5], [1168.0, 5064.5], [1172.0, 7383.0], [1176.0, 6877.0], [1180.0, 6995.0], [1184.0, 6712.0], [1188.0, 7321.0], [1208.0, 6982.0], [1228.0, 6622.0], [1264.0, 3590.333333333333], [1220.0, 6553.0], [1232.0, 5034.0], [1236.0, 6822.0], [1240.0, 6448.0], [1216.0, 6791.0], [1260.0, 6965.0], [1256.0, 7276.0], [1252.0, 6392.0], [1276.0, 4452.0], [1248.0, 7593.0], [1268.0, 6357.0], [1288.0, 4804.5], [1284.0, 4914.0], [1280.0, 6284.0], [1308.0, 6409.0], [1304.0, 6441.5], [1292.0, 7154.0], [1328.0, 4281.0], [1316.0, 6153.0], [1312.0, 6337.0], [1340.0, 6045.0], [1336.0, 6202.0], [1332.0, 6875.0], [1320.0, 3964.0], [1324.0, 3656.333333333333], [1300.0, 4206.5], [1296.0, 4310.5], [1400.0, 4804.333333333333], [1344.0, 6313.0], [1348.0, 5999.0], [1372.0, 6168.0], [1404.0, 5736.0], [1396.0, 6037.0], [1352.0, 6169.0], [1376.0, 5792.0], [1380.0, 6634.0], [1384.0, 6142.0], [1388.0, 6045.0], [1360.0, 2343.0], [1364.0, 4443.5], [1368.0, 5876.0], [1408.0, 5694.0], [1416.0, 4071.0], [1420.0, 5790.0], [1456.0, 5668.0], [1436.0, 6063.0], [1432.0, 5633.0], [1428.0, 5747.0], [1424.0, 5651.5], [1412.0, 3941.333333333333], [1468.0, 4155.5], [1460.0, 5519.0], [1440.0, 6220.0], [1444.0, 5551.0], [1448.0, 4208.0], [1452.0, 5701.0], [1484.0, 5399.0], [1524.0, 5291.0], [1476.0, 5542.0], [1472.0, 5575.0], [1500.0, 5760.0], [1480.0, 5750.0], [1520.0, 5509.0], [1532.0, 4389.5], [1528.0, 4088.0], [1492.0, 5699.0], [1488.0, 5708.0], [1496.0, 5862.5], [1516.0, 5273.0], [1512.0, 5586.0], [1508.0, 5272.0], [1504.0, 5441.0], [1536.0, 5663.0], [1596.0, 5284.0], [1544.0, 4143.0], [1540.0, 5499.0], [1548.0, 5290.0], [1564.0, 5132.0], [1560.0, 6431.0], [1556.0, 6481.0], [1552.0, 5115.0], [1568.0, 4266.5], [1588.0, 4937.0], [1584.0, 4980.0], [1572.0, 5002.0], [1580.0, 6396.0], [1604.0, 4871.0], [1608.0, 5046.0], [1620.0, 6288.0], [1624.0, 3978.5], [1600.0, 5732.0], [1628.0, 5319.0], [1632.0, 4815.0], [1656.0, 4856.0], [1652.0, 4911.0], [1660.0, 5016.0], [1648.0, 4726.0], [1640.0, 3991.75], [1644.0, 5036.0], [1668.0, 6210.0], [1676.0, 3555.25], [1664.0, 5512.0], [1692.0, 5674.0], [1680.0, 5209.0], [1684.0, 5198.0], [1688.0, 4226.5], [1704.0, 3938.5], [1716.0, 4864.333333333333], [1720.0, 3691.8333333333335], [1724.0, 4315.0], [1696.0, 4420.0], [1700.0, 4810.0], [1712.0, 4328.0], [1708.0, 4382.0], [1776.0, 4102.0], [1736.0, 3703.5], [1728.0, 4823.0], [1732.0, 4306.0], [1740.0, 4967.0], [1780.0, 4261.0], [1784.0, 4858.0], [1788.0, 3710.0], [1760.0, 4897.0], [1764.0, 4192.0], [1768.0, 4404.0], [1772.0, 3636.0], [1752.0, 5033.5], [1748.0, 4228.0], [1744.0, 5507.0], [1756.0, 3815.0], [1796.0, 4237.0], [1792.0, 3750.5], [1800.0, 4097.0], [1804.0, 4075.0], [1820.0, 5852.0], [1816.0, 4275.0], [1812.0, 4084.0], [1808.0, 4615.0], [1840.0, 4185.0], [1844.0, 3864.3333333333335], [1828.0, 4441.0], [1832.0, 4192.0], [1836.0, 4681.0], [1852.0, 4790.0], [1848.0, 4105.0], [1884.0, 5419.0], [1868.0, 4301.0], [1916.0, 3597.0], [1876.0, 4233.0], [1872.0, 3959.0], [1880.0, 4096.0], [1856.0, 4233.0], [1860.0, 4613.0], [1864.0, 3711.5], [1892.0, 4162.0], [1896.0, 5306.0], [1900.0, 3982.5], [1904.0, 4063.75], [1908.0, 3994.0], [1912.0, 3507.0], [1888.0, 3615.0], [1924.0, 3720.0], [1920.0, 3734.0], [1025.0, 7602.0], [1037.0, 7345.0], [1073.0, 7662.5], [1033.0, 3230.0], [1041.0, 4739.5], [1045.0, 8062.5], [1049.0, 7573.0], [1029.0, 7776.0], [1053.0, 7271.0], [1061.0, 7442.0], [1057.0, 7912.5], [1065.0, 8420.0], [1069.0, 7741.0], [1077.0, 3794.666666666667], [1081.0, 7672.0], [1093.0, 7168.0], [1097.0, 3423.5], [1101.0, 4051.666666666667], [1137.0, 6887.0], [1089.0, 7083.0], [1105.0, 5969.5], [1113.0, 6999.0], [1117.0, 7644.0], [1125.0, 4058.666666666667], [1121.0, 7183.0], [1149.0, 7049.0], [1145.0, 6975.0], [1141.0, 6896.0], [1129.0, 4732.0], [1133.0, 6880.0], [1209.0, 4334.5], [1165.0, 3679.666666666667], [1157.0, 7028.0], [1161.0, 6825.0], [1193.0, 4451.0], [1189.0, 8043.0], [1185.0, 8412.0], [1197.0, 3702.5], [1205.0, 7196.0], [1201.0, 6645.0], [1213.0, 6587.0], [1173.0, 7962.0], [1169.0, 6818.0], [1177.0, 5103.5], [1181.0, 6692.0], [1217.0, 6564.0], [1229.0, 4872.0], [1225.0, 7290.0], [1221.0, 6567.0], [1245.0, 6889.0], [1241.0, 6686.0], [1237.0, 6784.0], [1233.0, 6495.0], [1261.0, 6988.0], [1257.0, 6408.0], [1253.0, 6830.0], [1249.0, 6398.0], [1265.0, 3971.333333333333], [1273.0, 5212.666666666667], [1277.0, 6285.0], [1285.0, 4251.0], [1281.0, 2435.0], [1309.0, 6287.0], [1305.0, 6244.0], [1301.0, 6404.0], [1289.0, 6475.0], [1333.0, 2515.0], [1337.0, 4303.5], [1313.0, 4442.5], [1317.0, 6154.0], [1321.0, 6504.0], [1325.0, 6895.0], [1341.0, 6584.0], [1293.0, 4352.5], [1329.0, 6418.0], [1297.0, 5114.0], [1349.0, 6884.0], [1365.0, 6837.0], [1361.0, 6692.0], [1345.0, 5990.0], [1353.0, 6543.0], [1393.0, 5960.5], [1397.0, 5888.0], [1401.0, 4146.5], [1385.0, 4586.5], [1377.0, 5809.0], [1389.0, 6427.0], [1405.0, 5683.0], [1369.0, 5173.5], [1373.0, 5889.0], [1413.0, 7765.0], [1465.0, 4892.333333333333], [1409.0, 4212.0], [1437.0, 5608.0], [1433.0, 5772.0], [1417.0, 3911.333333333333], [1461.0, 5523.0], [1457.0, 6484.0], [1421.0, 6981.0], [1469.0, 2633.0], [1429.0, 3722.666666666667], [1425.0, 5825.0], [1441.0, 4376.0], [1453.0, 3543.5], [1445.0, 5770.0], [1449.0, 5581.0], [1481.0, 3660.6666666666665], [1529.0, 5360.0], [1477.0, 4279.0], [1473.0, 5938.0], [1501.0, 5325.0], [1497.0, 3076.0], [1485.0, 4477.333333333333], [1517.0, 5744.0], [1513.0, 5796.0], [1509.0, 5314.0], [1505.0, 5490.0], [1521.0, 6268.0], [1489.0, 4229.0], [1493.0, 5311.0], [1537.0, 4189.0], [1545.0, 4585.0], [1565.0, 5052.0], [1561.0, 5276.0], [1557.0, 5071.0], [1553.0, 5425.0], [1541.0, 5430.0], [1585.0, 4212.0], [1549.0, 5714.0], [1589.0, 5205.0], [1593.0, 5087.5], [1569.0, 5218.0], [1573.0, 5214.0], [1577.0, 3958.8333333333335], [1609.0, 3063.5], [1605.0, 4319.5], [1613.0, 4414.666666666667], [1621.0, 4423.0], [1617.0, 5036.5], [1629.0, 4686.0], [1625.0, 4957.0], [1637.0, 4426.333333333333], [1633.0, 4649.0], [1657.0, 3992.0], [1653.0, 4868.0], [1661.0, 4700.0], [1641.0, 6047.0], [1645.0, 3776.0], [1669.0, 4994.0], [1665.0, 4596.0], [1673.0, 4775.0], [1693.0, 4811.0], [1689.0, 4581.0], [1681.0, 3949.6666666666665], [1685.0, 4684.0], [1717.0, 4647.0], [1721.0, 4386.0], [1725.0, 3839.5], [1697.0, 4541.0], [1701.0, 4398.0], [1713.0, 4519.0], [1677.0, 4850.0], [1709.0, 4248.5], [1705.0, 4472.0], [1777.0, 4288.0], [1737.0, 3665.3333333333335], [1729.0, 4606.0], [1741.0, 4358.0], [1781.0, 3326.0], [1785.0, 5105.0], [1789.0, 3852.25], [1761.0, 4198.0], [1765.0, 4444.0], [1769.0, 4233.0], [1773.0, 4555.0], [1749.0, 4230.0], [1745.0, 5714.0], [1757.0, 4448.5], [1797.0, 4012.0], [1793.0, 5026.0], [1801.0, 4025.0], [1805.0, 4868.0], [1821.0, 5722.0], [1817.0, 3931.0], [1813.0, 3949.0], [1809.0, 4315.0], [1841.0, 5119.0], [1845.0, 3852.0], [1825.0, 4133.5], [1829.0, 3855.0], [1837.0, 3894.0], [1853.0, 3818.0], [1885.0, 3694.0], [1889.0, 3743.0], [1877.0, 4233.0], [1873.0, 4220.0], [1881.0, 4061.5], [1857.0, 4849.0], [1861.0, 4343.0], [1865.0, 3696.0], [1869.0, 3825.0], [1893.0, 4762.0], [1897.0, 3818.0], [1901.0, 4250.0], [1905.0, 3894.0], [1909.0, 3612.0], [1913.0, 3912.0], [1917.0, 3769.0], [1925.0, 3664.3333333333335], [1921.0, 3680.0], [517.0, 10385.0], [541.0, 5715.5], [529.0, 9915.0], [531.0, 9915.0], [533.0, 10993.0], [535.0, 9945.0], [527.0, 11815.0], [513.0, 9966.0], [515.0, 10160.0], [519.0, 10005.0], [525.0, 9901.0], [523.0, 10332.0], [521.0, 10564.0], [543.0, 5271.5], [539.0, 10300.0], [537.0, 11282.0], [547.0, 5544.0], [545.0, 6903.333333333333], [549.0, 10299.5], [551.0, 10961.0], [569.0, 10556.0], [573.0, 6004.0], [571.0, 5848.0], [553.0, 9765.0], [555.0, 10092.0], [557.0, 5739.5], [559.0, 5638.5], [561.0, 3382.25], [563.0, 10653.0], [567.0, 9721.0], [565.0, 10166.0], [591.0, 3840.0], [589.0, 5513.0], [585.0, 5201.5], [587.0, 1157.0], [597.0, 854.0], [599.0, 9734.0], [593.0, 9548.0], [595.0, 9560.0], [605.0, 9902.0], [603.0, 9486.0], [583.0, 9682.0], [581.0, 9621.0], [579.0, 10428.0], [577.0, 10155.0], [623.0, 9654.0], [611.0, 2764.6], [613.0, 9542.0], [633.0, 9750.0], [615.0, 9429.0], [617.0, 852.0], [619.0, 3839.0], [621.0, 3892.6666666666665], [609.0, 9526.0], [631.0, 9401.0], [639.0, 10199.0], [625.0, 9618.0], [627.0, 9385.0], [637.0, 10436.0], [635.0, 9458.0], [641.0, 5665.5], [665.0, 6796.666666666667], [655.0, 9451.0], [643.0, 9922.0], [645.0, 10045.5], [649.0, 9748.0], [651.0, 9356.0], [653.0, 5397.5], [663.0, 3786.0], [671.0, 9213.0], [657.0, 9595.0], [659.0, 9419.0], [661.0, 9268.0], [669.0, 9200.0], [675.0, 3906.0], [673.0, 5532.5], [677.0, 9115.0], [681.0, 9983.0], [683.0, 10073.0], [685.0, 9900.0], [687.0, 9051.0], [691.0, 1008.0], [689.0, 9058.0], [701.0, 9004.0], [699.0, 9266.0], [697.0, 9589.0], [679.0, 9265.5], [703.0, 9549.0], [693.0, 3784.6666666666665], [695.0, 9959.0], [709.0, 5100.0], [729.0, 9321.0], [733.0, 9418.0], [711.0, 9819.0], [731.0, 9419.0], [715.0, 1367.0], [713.0, 9660.0], [717.0, 5322.0], [719.0, 8964.0], [707.0, 9012.0], [705.0, 9041.0], [727.0, 9280.0], [725.0, 5308.0], [721.0, 9587.0], [743.0, 8843.0], [763.0, 1144.5], [745.0, 9737.0], [747.0, 3809.3333333333335], [759.0, 5255.5], [757.0, 9172.0], [761.0, 5737.0], [741.0, 9028.5], [739.0, 8980.0], [737.0, 9319.0], [751.0, 9165.0], [749.0, 8844.0], [765.0, 5391.5], [767.0, 8754.0], [753.0, 9115.0], [755.0, 8839.0], [771.0, 9296.0], [769.0, 4977.0], [775.0, 1972.0], [773.0, 8911.0], [799.0, 9917.0], [795.0, 8655.0], [777.0, 4132.0], [783.0, 1203.0], [781.0, 9700.0], [779.0, 8692.0], [785.0, 4959.5], [787.0, 8666.0], [789.0, 9337.0], [791.0, 8659.0], [815.0, 8530.0], [809.0, 4396.666666666666], [813.0, 4155.0], [811.0, 8616.0], [801.0, 8789.0], [803.0, 8723.0], [805.0, 9488.0], [819.0, 8720.0], [817.0, 8508.0], [823.0, 5353.0], [807.0, 10640.0], [825.0, 8418.0], [827.0, 8428.0], [831.0, 9721.0], [863.0, 6436.333333333333], [847.0, 1295.0], [841.0, 8420.0], [843.0, 8496.0], [851.0, 5161.5], [853.0, 8382.0], [855.0, 8289.0], [849.0, 8306.0], [861.0, 8785.0], [859.0, 8742.0], [857.0, 8614.0], [839.0, 8450.0], [837.0, 8572.0], [833.0, 8450.0], [867.0, 8221.0], [865.0, 8240.0], [871.0, 8987.0], [875.0, 8551.5], [873.0, 10551.0], [879.0, 5193.0], [877.0, 8142.0], [895.0, 3657.6666666666665], [881.0, 8149.0], [883.0, 8876.0], [885.0, 8117.0], [887.0, 8736.0], [893.0, 5271.5], [889.0, 8080.0], [901.0, 8052.0], [911.0, 3062.0], [897.0, 9508.0], [899.0, 8013.0], [903.0, 8038.0], [921.0, 8533.0], [923.0, 8003.0], [925.0, 7957.0], [909.0, 3422.75], [907.0, 8136.0], [905.0, 8396.0], [913.0, 4253.333333333334], [915.0, 8218.0], [917.0, 7997.0], [919.0, 8168.0], [927.0, 8743.0], [929.0, 8610.0], [945.0, 5278.5], [943.0, 4684.0], [931.0, 7913.0], [933.0, 9333.0], [935.0, 8016.0], [941.0, 8415.0], [939.0, 7866.0], [937.0, 8165.0], [947.0, 3991.6666666666665], [949.0, 3832.0], [951.0, 7793.0], [953.0, 4292.666666666667], [957.0, 8114.0], [959.0, 9373.0], [967.0, 5640.0], [965.0, 2430.0], [963.0, 8188.5], [961.0, 7724.0], [975.0, 8008.0], [973.0, 8409.0], [985.0, 7598.0], [987.0, 7587.0], [989.0, 5714.5], [991.0, 8021.0], [971.0, 3686.6666666666665], [969.0, 8488.0], [981.0, 4702.5], [979.0, 7946.0], [977.0, 8868.0], [983.0, 7751.5], [1021.0, 7403.0], [1019.0, 7622.0], [1001.0, 7982.0], [1005.0, 7764.0], [1003.0, 3278.75], [1009.0, 3822.333333333333], [1015.0, 3693.5], [1013.0, 7718.0], [1011.0, 7545.0], [1023.0, 8102.0], [1017.0, 7692.0], [1007.0, 8532.0], [995.0, 9268.0], [997.0, 7971.0], [999.0, 8223.0], [1054.0, 7457.0], [1034.0, 4563.0], [1074.0, 7455.0], [1038.0, 7676.0], [1078.0, 8669.0], [1046.0, 7285.0], [1042.0, 7426.0], [1050.0, 7883.0], [1026.0, 7857.0], [1030.0, 8059.0], [1066.0, 4430.666666666666], [1070.0, 7235.0], [1086.0, 7532.5], [1062.0, 7196.0], [1082.0, 7085.0], [1094.0, 7284.0], [1146.0, 7099.0], [1090.0, 7304.0], [1098.0, 9975.0], [1118.0, 8902.0], [1114.0, 7355.0], [1110.0, 6987.0], [1106.0, 6984.0], [1126.0, 3533.333333333333], [1134.0, 4953.0], [1130.0, 7450.0], [1150.0, 7061.0], [1122.0, 7021.0], [1142.0, 7515.0], [1158.0, 6927.0], [1202.0, 6608.0], [1210.0, 6615.0], [1154.0, 7272.5], [1162.0, 4450.0], [1166.0, 4921.5], [1194.0, 7252.0], [1198.0, 6798.0], [1170.0, 8245.0], [1174.0, 7280.0], [1178.0, 7469.0], [1182.0, 6688.0], [1214.0, 8319.0], [1186.0, 6921.0], [1206.0, 6858.0], [1218.0, 4013.666666666667], [1266.0, 3792.333333333333], [1230.0, 8138.0], [1226.0, 7636.0], [1234.0, 6498.0], [1238.0, 6855.0], [1246.0, 6443.0], [1242.0, 6450.0], [1250.0, 2235.75], [1262.0, 6366.0], [1258.0, 6405.0], [1254.0, 6830.0], [1278.0, 5062.0], [1274.0, 6398.0], [1270.0, 6351.0], [1290.0, 6609.0], [1294.0, 4713.5], [1282.0, 5004.666666666667], [1310.0, 6621.0], [1302.0, 7983.0], [1286.0, 8455.0], [1330.0, 4780.5], [1318.0, 4543.5], [1314.0, 6270.0], [1342.0, 6795.0], [1338.0, 6659.0], [1334.0, 6290.0], [1322.0, 7316.0], [1298.0, 4821.5], [1394.0, 6122.0], [1358.0, 5944.333333333333], [1346.0, 5170.5], [1374.0, 5905.0], [1406.0, 4298.0], [1402.0, 4544.5], [1398.0, 3935.0], [1354.0, 6270.0], [1378.0, 4555.0], [1382.0, 4855.666666666667], [1386.0, 4191.0], [1390.0, 5871.0], [1350.0, 2347.0], [1362.0, 4603.0], [1366.0, 6011.0], [1370.0, 4600.5], [1410.0, 4895.5], [1458.0, 4330.0], [1414.0, 6636.0], [1418.0, 7777.0], [1422.0, 5820.0], [1438.0, 5969.0], [1434.0, 5976.0], [1430.0, 6440.0], [1426.0, 6209.0], [1466.0, 5948.0], [1462.0, 5425.0], [1470.0, 5540.0], [1442.0, 5678.0], [1446.0, 4370.0], [1450.0, 5970.0], [1454.0, 3536.0], [1478.0, 4158.0], [1498.0, 4560.0], [1502.0, 5789.0], [1474.0, 5482.0], [1486.0, 3972.666666666667], [1522.0, 5622.0], [1494.0, 3906.0], [1490.0, 6521.0], [1534.0, 5350.5], [1518.0, 5300.0], [1514.0, 5286.0], [1510.0, 5266.0], [1506.0, 5311.0], [1526.0, 5527.5], [1546.0, 5147.0], [1550.0, 3087.0], [1542.0, 5949.0], [1566.0, 5057.0], [1562.0, 5345.0], [1558.0, 5072.0], [1554.0, 5358.0], [1594.0, 4890.0], [1590.0, 4915.0], [1586.0, 5161.0], [1598.0, 4885.5], [1574.0, 2822.0], [1570.0, 5010.0], [1578.0, 3546.5], [1582.0, 4961.0], [1606.0, 4814.0], [1602.0, 5115.5], [1610.0, 4024.0], [1618.0, 5981.0], [1622.0, 5847.0], [1630.0, 4706.0], [1626.0, 5384.0], [1638.0, 4702.0], [1654.0, 5038.0], [1658.0, 5386.0], [1662.0, 4552.0], [1650.0, 4178.333333333333], [1614.0, 5003.0], [1642.0, 4574.0], [1646.0, 4987.0], [1670.0, 5289.0], [1674.0, 4005.0], [1666.0, 4595.0], [1694.0, 4690.0], [1690.0, 4904.0], [1682.0, 3742.5], [1686.0, 4907.0], [1718.0, 4817.0], [1722.0, 4369.0], [1698.0, 4833.0], [1702.0, 4746.0], [1726.0, 4901.0], [1714.0, 4063.25], [1678.0, 5340.0], [1706.0, 5046.0], [1710.0, 4322.0], [1738.0, 4841.0], [1758.0, 5046.0], [1730.0, 4306.0], [1734.0, 4419.5], [1742.0, 4198.5], [1778.0, 3773.0], [1782.0, 4234.0], [1786.0, 4175.0], [1762.0, 4678.0], [1790.0, 4829.0], [1766.0, 4637.0], [1770.0, 4894.0], [1774.0, 4169.0], [1750.0, 4319.0], [1746.0, 4772.0], [1754.0, 4182.333333333333], [1798.0, 4228.0], [1846.0, 4444.0], [1794.0, 4135.0], [1802.0, 4039.0], [1806.0, 3996.0], [1822.0, 4109.0], [1818.0, 3934.0], [1814.0, 3930.0], [1810.0, 4145.0], [1826.0, 4098.0], [1830.0, 4118.0], [1834.0, 3933.0], [1838.0, 4402.0], [1850.0, 4249.5], [1858.0, 3760.0], [1878.0, 4404.0], [1874.0, 3813.0], [1882.0, 3680.0], [1862.0, 3676.0], [1866.0, 4979.0], [1870.0, 4297.0], [1886.0, 3853.0], [1890.0, 3583.0], [1894.0, 3823.0], [1898.0, 3959.0], [1902.0, 3662.0], [1906.0, 4429.5], [1910.0, 4075.6666666666665], [1914.0, 3528.0], [1918.0, 3683.0], [1926.0, 3531.5], [1922.0, 3462.0], [1027.0, 7387.0], [1075.0, 3802.333333333333], [1039.0, 4728.0], [1035.0, 7412.0], [1043.0, 7272.0], [1051.0, 7570.0], [1055.0, 7214.0], [1031.0, 7499.0], [1063.0, 1747.0], [1059.0, 7680.5], [1067.0, 7376.0], [1071.0, 7592.0], [1079.0, 7369.0], [1087.0, 7188.0], [1083.0, 7781.0], [1095.0, 1811.5], [1139.0, 5521.0], [1099.0, 7153.0], [1103.0, 7012.5], [1091.0, 7186.0], [1107.0, 7375.0], [1115.0, 7313.0], [1119.0, 7057.0], [1123.0, 7795.0], [1151.0, 7084.0], [1147.0, 8099.0], [1143.0, 7559.0], [1127.0, 1801.0], [1131.0, 7606.0], [1135.0, 6875.0], [1163.0, 2698.0], [1159.0, 4984.5], [1183.0, 4588.0], [1155.0, 7481.0], [1191.0, 6884.5], [1187.0, 6675.0], [1199.0, 6643.0], [1195.0, 3780.666666666667], [1207.0, 6585.0], [1203.0, 6703.0], [1167.0, 6726.0], [1211.0, 6932.0], [1215.0, 7210.0], [1175.0, 4962.0], [1171.0, 7030.0], [1179.0, 5155.0], [1223.0, 7155.0], [1267.0, 4762.5], [1231.0, 2599.0], [1227.0, 6627.0], [1219.0, 6814.0], [1247.0, 6545.0], [1243.0, 7447.0], [1239.0, 6454.0], [1235.0, 6923.0], [1263.0, 4391.5], [1259.0, 6746.0], [1255.0, 7903.0], [1251.0, 6993.0], [1271.0, 6315.0], [1279.0, 6732.0], [1275.0, 6741.0], [1291.0, 6213.0], [1331.0, 3452.0], [1283.0, 3893.666666666667], [1311.0, 6379.0], [1307.0, 6389.5], [1287.0, 6271.0], [1335.0, 6050.0], [1315.0, 7089.0], [1319.0, 6149.0], [1323.0, 6080.0], [1327.0, 6249.5], [1343.0, 6537.0], [1339.0, 6052.0], [1295.0, 6735.0], [1299.0, 4335.5], [1351.0, 4929.333333333333], [1399.0, 4330.5], [1375.0, 3986.0], [1367.0, 4779.5], [1363.0, 6253.0], [1347.0, 6005.0], [1355.0, 5910.0], [1359.0, 6054.0], [1395.0, 5712.0], [1403.0, 3986.6666666666665], [1383.0, 6141.0], [1379.0, 5791.0], [1387.0, 6570.0], [1391.0, 6604.0], [1407.0, 5938.0], [1371.0, 6007.0], [1459.0, 5533.0], [1411.0, 5915.0], [1415.0, 8288.0], [1439.0, 5669.0], [1463.0, 4506.5], [1467.0, 5128.0], [1427.0, 5647.0], [1431.0, 4345.5], [1471.0, 5435.0], [1451.0, 4182.0], [1455.0, 5514.0], [1447.0, 4123.0], [1443.0, 5553.0], [1483.0, 4593.666666666667], [1475.0, 6733.0], [1479.0, 5954.0], [1503.0, 5667.0], [1499.0, 3231.0], [1519.0, 4134.5], [1515.0, 5318.0], [1511.0, 5280.0], [1507.0, 6439.0], [1535.0, 4429.0], [1531.0, 5198.333333333333], [1527.0, 5583.0], [1523.0, 5240.0], [1487.0, 6542.0], [1491.0, 3991.5], [1495.0, 2731.0], [1539.0, 4011.5], [1567.0, 5050.0], [1563.0, 5838.0], [1555.0, 5707.0], [1543.0, 4422.5], [1551.0, 5356.0], [1547.0, 6158.0], [1587.0, 4941.0], [1591.0, 4914.0], [1595.0, 5152.0], [1599.0, 4840.0], [1571.0, 4041.5], [1575.0, 5328.0], [1579.0, 3970.5], [1583.0, 5060.0], [1603.0, 5299.0], [1651.0, 4191.0], [1611.0, 3751.6666666666665], [1607.0, 5228.0], [1619.0, 5438.0], [1623.0, 4717.0], [1631.0, 4687.0], [1627.0, 5824.0], [1635.0, 4658.5], [1655.0, 4792.0], [1659.0, 4569.0], [1663.0, 4543.0], [1615.0, 4864.0], [1647.0, 4855.0], [1639.0, 2902.0], [1667.0, 4613.0], [1675.0, 4139.0], [1715.0, 3118.0], [1671.0, 3971.0], [1695.0, 4386.0], [1691.0, 4923.0], [1683.0, 3894.0], [1687.0, 4436.0], [1719.0, 3233.5], [1723.0, 4208.0], [1727.0, 4533.0], [1699.0, 4591.0], [1703.0, 5145.0], [1679.0, 5665.0], [1707.0, 4954.0], [1711.0, 4350.0], [1743.0, 4735.0], [1739.0, 4217.5], [1735.0, 3997.5], [1759.0, 4148.0], [1731.0, 4411.0], [1779.0, 4679.0], [1783.0, 3691.0], [1787.0, 4190.0], [1791.0, 4124.0], [1763.0, 3771.0], [1767.0, 4679.0], [1775.0, 3669.5], [1771.0, 3866.0], [1751.0, 4166.0], [1747.0, 4237.0], [1755.0, 4454.0], [1799.0, 3982.0], [1831.0, 4088.0], [1851.0, 3762.0], [1795.0, 5190.0], [1803.0, 3997.0], [1807.0, 4158.0], [1823.0, 4151.0], [1819.0, 4080.0], [1815.0, 3932.0], [1811.0, 4182.0], [1855.0, 3935.5], [1827.0, 3913.0], [1835.0, 3865.0], [1839.0, 3805.0], [1847.0, 3863.0], [1887.0, 4483.0], [1859.0, 3757.0], [1879.0, 4187.5], [1875.0, 4619.0], [1883.0, 3955.6666666666665], [1867.0, 4300.0], [1871.0, 3920.0], [1891.0, 3600.0], [1895.0, 4412.0], [1903.0, 3990.5], [1899.0, 3965.0], [1907.0, 4615.0], [1911.0, 3543.0], [1915.0, 3523.0], [1919.0, 3495.0], [1923.0, 4453.0], [1.0, 3068.5]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[635.3566625155665, 4269.431382316312]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1926.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 30983.0, "minX": 1.699972499E12, "maxY": 281642.0, "series": [{"data": [[1.699972504E12, 67379.0], [1.699972503E12, 68715.0], [1.699972502E12, 161790.0], [1.699972506E12, 65500.0], [1.699972505E12, 62262.0], [1.699972509E12, 68307.0], [1.699972508E12, 73894.0], [1.699972507E12, 66430.0], [1.699972512E12, 73005.0], [1.699972511E12, 71104.0], [1.69997251E12, 78102.0], [1.699972514E12, 64078.0], [1.699972513E12, 65501.0], [1.699972517E12, 64083.0], [1.699972516E12, 68761.0], [1.699972515E12, 70163.0], [1.699972519E12, 91251.0], [1.699972518E12, 75305.0], [1.699972501E12, 281642.0], [1.6999725E12, 195974.0], [1.699972499E12, 44903.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.699972504E12, 46499.0], [1.699972503E12, 47400.0], [1.699972502E12, 111620.0], [1.699972506E12, 45200.0], [1.699972505E12, 42977.0], [1.699972509E12, 47137.0], [1.699972508E12, 50984.0], [1.699972507E12, 45840.0], [1.699972512E12, 50385.0], [1.699972511E12, 49064.0], [1.69997251E12, 53887.0], [1.699972514E12, 44213.0], [1.699972513E12, 45201.0], [1.699972517E12, 44218.0], [1.699972516E12, 47446.0], [1.699972515E12, 48413.0], [1.699972519E12, 62976.0], [1.699972518E12, 51960.0], [1.699972501E12, 194352.0], [1.6999725E12, 135219.0], [1.699972499E12, 30983.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.699972519E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8.489260143198084, "minX": 1.699972499E12, "maxY": 12429.39487179487, "series": [{"data": [[1.699972504E12, 1541.9097222222215], [1.699972503E12, 742.2040816326536], [1.699972502E12, 71.99999999999997], [1.699972506E12, 3047.8785714285714], [1.699972505E12, 2304.5037593984957], [1.699972509E12, 5138.239726027398], [1.699972508E12, 4463.145569620251], [1.699972507E12, 3874.971830985915], [1.699972512E12, 7248.634615384613], [1.699972511E12, 6547.986842105262], [1.69997251E12, 5838.754491017964], [1.699972514E12, 8705.343065693429], [1.699972513E12, 7964.814285714286], [1.699972517E12, 10763.335766423364], [1.699972516E12, 10042.224489795923], [1.699972515E12, 9325.286666666663], [1.699972519E12, 12429.39487179487], [1.699972518E12, 11511.875776397523], [1.699972501E12, 9.785714285714269], [1.6999725E12, 8.489260143198084], [1.699972499E12, 19.583333333333314]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.699972519E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8.43675417661098, "minX": 1.699972499E12, "maxY": 12429.348717948718, "series": [{"data": [[1.699972504E12, 1541.861111111111], [1.699972503E12, 742.176870748299], [1.699972502E12, 71.93641618497107], [1.699972506E12, 3047.8214285714284], [1.699972505E12, 2304.4736842105267], [1.699972509E12, 5138.164383561642], [1.699972508E12, 4463.082278481009], [1.699972507E12, 3874.92957746479], [1.699972512E12, 7248.583333333337], [1.699972511E12, 6547.9013157894715], [1.69997251E12, 5838.610778443115], [1.699972514E12, 8705.240875912406], [1.699972513E12, 7964.742857142858], [1.699972517E12, 10763.26277372263], [1.699972516E12, 10042.176870748297], [1.699972515E12, 9325.200000000003], [1.699972519E12, 12429.348717948718], [1.699972518E12, 11511.826086956522], [1.699972501E12, 9.73089700996678], [1.6999725E12, 8.43675417661098], [1.699972499E12, 17.375]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.699972519E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.49659863945578253, "minX": 1.699972499E12, "maxY": 6.541666666666669, "series": [{"data": [[1.699972504E12, 1.5624999999999991], [1.699972503E12, 1.0952380952380962], [1.699972502E12, 1.3410404624277465], [1.699972506E12, 1.1714285714285708], [1.699972505E12, 2.090225563909775], [1.699972509E12, 0.7876712328767125], [1.699972508E12, 0.7468354430379749], [1.699972507E12, 0.9225352112676056], [1.699972512E12, 0.9358974358974356], [1.699972511E12, 0.6907894736842107], [1.69997251E12, 0.922155688622755], [1.699972514E12, 0.5109489051094891], [1.699972513E12, 0.7142857142857142], [1.699972517E12, 0.6496350364963508], [1.699972516E12, 0.49659863945578253], [1.699972515E12, 1.0866666666666662], [1.699972519E12, 1.2153846153846153], [1.699972518E12, 0.7453416149068324], [1.699972501E12, 1.4136212624584732], [1.6999725E12, 1.7899761336515516], [1.699972499E12, 6.541666666666669]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.699972519E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.699972499E12, "maxY": 15601.0, "series": [{"data": [[1.699972504E12, 2497.0], [1.699972503E12, 1501.0], [1.699972502E12, 615.0], [1.699972506E12, 4600.0], [1.699972505E12, 3307.0], [1.699972509E12, 6658.0], [1.699972508E12, 5958.0], [1.699972507E12, 5419.0], [1.699972512E12, 10186.0], [1.699972511E12, 8455.0], [1.69997251E12, 8288.0], [1.699972514E12, 11418.0], [1.699972513E12, 9745.0], [1.699972517E12, 13092.0], [1.699972516E12, 11815.0], [1.699972515E12, 12049.0], [1.699972519E12, 15601.0], [1.699972518E12, 14876.0], [1.699972501E12, 37.0], [1.6999725E12, 22.0], [1.699972499E12, 78.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.699972504E12, 2099.5], [1.699972503E12, 1155.4], [1.699972502E12, 221.90000000000003], [1.699972506E12, 3634.4], [1.699972505E12, 2826.6000000000004], [1.699972509E12, 5828.2], [1.699972508E12, 4972.9], [1.699972507E12, 4614.4], [1.699972512E12, 7921.3], [1.699972511E12, 7210.900000000001], [1.69997251E12, 6509.8], [1.699972514E12, 9504.8], [1.699972513E12, 8656.4], [1.699972517E12, 11430.4], [1.699972516E12, 10679.800000000001], [1.699972515E12, 9953.3], [1.699972519E12, 13195.6], [1.699972518E12, 12214.0], [1.699972501E12, 14.0], [1.6999725E12, 12.0], [1.699972499E12, 58.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.699972504E12, 2486.2000000000003], [1.699972503E12, 1484.6800000000003], [1.699972502E12, 519.0699999999995], [1.699972506E12, 4425.340000000001], [1.699972505E12, 3261.0999999999995], [1.699972509E12, 6574.81], [1.699972508E12, 5953.28], [1.699972507E12, 5372.129999999999], [1.699972512E12, 10065.730000000001], [1.699972511E12, 8286.99], [1.69997251E12, 7940.519999999997], [1.699972514E12, 11386.84], [1.699972513E12, 9718.35], [1.699972517E12, 12689.580000000005], [1.699972516E12, 11597.560000000005], [1.699972515E12, 11556.85000000001], [1.699972519E12, 14208.999999999989], [1.699972518E12, 13840.599999999993], [1.699972501E12, 29.0], [1.6999725E12, 18.0], [1.699972499E12, 78.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.699972504E12, 2244.25], [1.699972503E12, 1241.8], [1.699972502E12, 323.29999999999995], [1.699972506E12, 3811.75], [1.699972505E12, 3088.5], [1.699972509E12, 6119.150000000001], [1.699972508E12, 5514.949999999997], [1.699972507E12, 4848.55], [1.699972512E12, 8332.95], [1.699972511E12, 7605.25], [1.69997251E12, 6773.2], [1.699972514E12, 9859.4], [1.699972513E12, 9257.199999999997], [1.699972517E12, 11724.8], [1.699972516E12, 10870.4], [1.699972515E12, 10078.85], [1.699972519E12, 13672.199999999999], [1.699972518E12, 12490.0], [1.699972501E12, 20.0], [1.6999725E12, 14.0], [1.699972499E12, 64.44999999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.699972504E12, 852.0], [1.699972503E12, 207.0], [1.699972502E12, 5.0], [1.699972506E12, 2343.0], [1.699972505E12, 1610.0], [1.699972509E12, 4436.0], [1.699972508E12, 3805.0], [1.699972507E12, 3062.0], [1.699972512E12, 6553.0], [1.699972511E12, 5876.0], [1.69997251E12, 5184.0], [1.699972514E12, 7957.0], [1.699972513E12, 7196.0], [1.699972517E12, 10073.0], [1.699972516E12, 9342.0], [1.699972515E12, 8666.0], [1.699972519E12, 11508.0], [1.699972518E12, 10760.0], [1.699972501E12, 5.0], [1.6999725E12, 5.0], [1.699972499E12, 6.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.699972504E12, 1514.0], [1.699972503E12, 707.0], [1.699972502E12, 14.0], [1.699972506E12, 2969.0], [1.699972505E12, 2263.0], [1.699972509E12, 5053.0], [1.699972508E12, 4375.5], [1.699972507E12, 3769.5], [1.699972512E12, 7099.5], [1.699972511E12, 6433.5], [1.69997251E12, 5721.0], [1.699972514E12, 8570.0], [1.699972513E12, 7857.5], [1.699972517E12, 10709.0], [1.699972516E12, 9982.0], [1.699972515E12, 9245.0], [1.699972519E12, 12310.0], [1.699972518E12, 11374.0], [1.699972501E12, 8.0], [1.6999725E12, 8.0], [1.699972499E12, 10.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.699972519E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8.0, "minX": 96.0, "maxY": 12310.0, "series": [{"data": [[133.0, 2263.0], [140.0, 5898.0], [142.0, 3769.5], [137.0, 10087.0], [602.0, 8.0], [147.0, 5421.5], [144.0, 1514.0], [146.0, 5053.0], [150.0, 9245.0], [158.0, 4375.5], [152.0, 6433.5], [156.0, 7099.5], [167.0, 5721.0], [161.0, 11374.0], [195.0, 12310.0], [346.0, 14.0], [96.0, 10.0], [419.0, 8.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 602.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 8.0, "minX": 96.0, "maxY": 12308.0, "series": [{"data": [[133.0, 2263.0], [140.0, 5898.0], [142.0, 3769.5], [137.0, 10087.0], [602.0, 8.0], [147.0, 5421.5], [144.0, 1514.0], [146.0, 5053.0], [150.0, 9245.0], [158.0, 4375.5], [152.0, 6433.5], [156.0, 7099.5], [167.0, 5721.0], [161.0, 11374.0], [195.0, 12308.0], [346.0, 14.0], [96.0, 10.0], [419.0, 8.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 602.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 99.0, "minX": 1.699972499E12, "maxY": 622.0, "series": [{"data": [[1.699972504E12, 517.0], [1.699972503E12, 482.0], [1.699972502E12, 622.0], [1.699972506E12, 500.0], [1.699972505E12, 501.0], [1.699972507E12, 274.0], [1.699972501E12, 600.0], [1.6999725E12, 420.0], [1.699972499E12, 99.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.699972507E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 96.0, "minX": 1.699972499E12, "maxY": 602.0, "series": [{"data": [[1.699972504E12, 144.0], [1.699972503E12, 147.0], [1.699972502E12, 346.0], [1.699972506E12, 140.0], [1.699972505E12, 133.0], [1.699972509E12, 146.0], [1.699972508E12, 158.0], [1.699972507E12, 142.0], [1.699972512E12, 156.0], [1.699972511E12, 152.0], [1.69997251E12, 167.0], [1.699972514E12, 137.0], [1.699972513E12, 140.0], [1.699972517E12, 137.0], [1.699972516E12, 147.0], [1.699972515E12, 150.0], [1.699972519E12, 195.0], [1.699972518E12, 161.0], [1.699972501E12, 602.0], [1.6999725E12, 419.0], [1.699972499E12, 96.0]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.699972519E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 96.0, "minX": 1.699972499E12, "maxY": 602.0, "series": [{"data": [[1.699972504E12, 144.0], [1.699972503E12, 147.0], [1.699972502E12, 346.0], [1.699972506E12, 140.0], [1.699972505E12, 133.0], [1.699972509E12, 146.0], [1.699972508E12, 158.0], [1.699972507E12, 142.0], [1.699972512E12, 156.0], [1.699972511E12, 152.0], [1.69997251E12, 167.0], [1.699972514E12, 137.0], [1.699972513E12, 140.0], [1.699972517E12, 137.0], [1.699972516E12, 147.0], [1.699972515E12, 150.0], [1.699972519E12, 195.0], [1.699972518E12, 161.0], [1.699972501E12, 602.0], [1.6999725E12, 419.0], [1.699972499E12, 96.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.699972519E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 96.0, "minX": 1.699972499E12, "maxY": 602.0, "series": [{"data": [[1.699972504E12, 144.0], [1.699972503E12, 147.0], [1.699972502E12, 346.0], [1.699972506E12, 140.0], [1.699972505E12, 133.0], [1.699972509E12, 146.0], [1.699972508E12, 158.0], [1.699972507E12, 142.0], [1.699972512E12, 156.0], [1.699972511E12, 152.0], [1.69997251E12, 167.0], [1.699972514E12, 137.0], [1.699972513E12, 140.0], [1.699972517E12, 137.0], [1.699972516E12, 147.0], [1.699972515E12, 150.0], [1.699972519E12, 195.0], [1.699972518E12, 161.0], [1.699972501E12, 602.0], [1.6999725E12, 419.0], [1.699972499E12, 96.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.699972519E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

